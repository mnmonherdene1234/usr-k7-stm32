
USR-K7-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002200  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800230c  0800230c  0000330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002388  08002388  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002388  08002388  00003388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002390  08002390  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002390  08002390  00003390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002394  08002394  00003394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002398  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  080023f4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080023f4  00004294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c46  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f0  00000000  00000000  0000accb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c0  00000000  00000000  0000c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017161  00000000  00000000  0000ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000834f  00000000  00000000  00023e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f66  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  000ae124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000afe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022f4 	.word	0x080022f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080022f4 	.word	0x080022f4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <USRK7_transmit>:

UART_HandleTypeDef *USRK7_UART;
char USRK7_BUFFER[USRK7_BUFFER_SIZE];
char USRK7_COMMAND[USRK7_COMMAND_SIZE];

static void USRK7_transmit(const char *command, int timeout) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(USRK7_UART, (uint8_t*) command, strlen(command), timeout);
 8000166:	4b08      	ldr	r3, [pc, #32]	@ (8000188 <USRK7_transmit+0x2c>)
 8000168:	681c      	ldr	r4, [r3, #0]
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f7ff ffee 	bl	800014c <strlen>
 8000170:	4603      	mov	r3, r0
 8000172:	b29a      	uxth	r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	6879      	ldr	r1, [r7, #4]
 8000178:	4620      	mov	r0, r4
 800017a:	f001 f9d5 	bl	8001528 <HAL_UART_Transmit>
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bd90      	pop	{r4, r7, pc}
 8000186:	bf00      	nop
 8000188:	20000078 	.word	0x20000078

0800018c <USRK7_receive>:

static void USRK7_receive(int timeout) {
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	sprintf(USRK7_BUFFER, "");
 8000194:	4907      	ldr	r1, [pc, #28]	@ (80001b4 <USRK7_receive+0x28>)
 8000196:	4808      	ldr	r0, [pc, #32]	@ (80001b8 <USRK7_receive+0x2c>)
 8000198:	f001 fbd8 	bl	800194c <siprintf>
	HAL_UART_Receive(USRK7_UART, (uint8_t*) USRK7_BUFFER, USRK7_BUFFER_SIZE,
 800019c:	4b07      	ldr	r3, [pc, #28]	@ (80001bc <USRK7_receive+0x30>)
 800019e:	6818      	ldr	r0, [r3, #0]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2240      	movs	r2, #64	@ 0x40
 80001a4:	4904      	ldr	r1, [pc, #16]	@ (80001b8 <USRK7_receive+0x2c>)
 80001a6:	f001 fa42 	bl	800162e <HAL_UART_Receive>
			timeout);
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	0800230c 	.word	0x0800230c
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	20000078 	.word	0x20000078

080001c0 <USRK7_transmit_receive>:

static void USRK7_transmit_receive(const char *command, int tTimeout,
		int rTimeout) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	60f8      	str	r0, [r7, #12]
 80001c8:	60b9      	str	r1, [r7, #8]
 80001ca:	607a      	str	r2, [r7, #4]
	USRK7_transmit(command, tTimeout);
 80001cc:	68b9      	ldr	r1, [r7, #8]
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f7ff ffc4 	bl	800015c <USRK7_transmit>
	USRK7_receive(rTimeout);
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f7ff ffd9 	bl	800018c <USRK7_receive>
}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
	...

080001e4 <USRK7_init>:

int USRK7_init(UART_HandleTypeDef *uart) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	USRK7_UART = uart;
 80001ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000268 <USRK7_init+0x84>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6013      	str	r3, [r2, #0]

	sprintf(USRK7_COMMAND, "+++");
 80001f2:	491e      	ldr	r1, [pc, #120]	@ (800026c <USRK7_init+0x88>)
 80001f4:	481e      	ldr	r0, [pc, #120]	@ (8000270 <USRK7_init+0x8c>)
 80001f6:	f001 fba9 	bl	800194c <siprintf>
	USRK7_transmit(USRK7_COMMAND, 3000);
 80001fa:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001fe:	481c      	ldr	r0, [pc, #112]	@ (8000270 <USRK7_init+0x8c>)
 8000200:	f7ff ffac 	bl	800015c <USRK7_transmit>
	USRK7_receive(200);
 8000204:	20c8      	movs	r0, #200	@ 0xc8
 8000206:	f7ff ffc1 	bl	800018c <USRK7_receive>

	if (strstr(USRK7_BUFFER, "a")) {
 800020a:	2161      	movs	r1, #97	@ 0x61
 800020c:	4819      	ldr	r0, [pc, #100]	@ (8000274 <USRK7_init+0x90>)
 800020e:	f001 fbc5 	bl	800199c <strchr>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d021      	beq.n	800025c <USRK7_init+0x78>
		HAL_Delay(200);
 8000218:	20c8      	movs	r0, #200	@ 0xc8
 800021a:	f000 fa67 	bl	80006ec <HAL_Delay>
		sprintf(USRK7_COMMAND, "a");
 800021e:	4916      	ldr	r1, [pc, #88]	@ (8000278 <USRK7_init+0x94>)
 8000220:	4813      	ldr	r0, [pc, #76]	@ (8000270 <USRK7_init+0x8c>)
 8000222:	f001 fb93 	bl	800194c <siprintf>
		USRK7_transmit(USRK7_COMMAND, 1000);
 8000226:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800022a:	4811      	ldr	r0, [pc, #68]	@ (8000270 <USRK7_init+0x8c>)
 800022c:	f7ff ff96 	bl	800015c <USRK7_transmit>

		// Step 4: Wait for '+ok' response
		USRK7_receive(3000);
 8000230:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000234:	f7ff ffaa 	bl	800018c <USRK7_receive>
		if (strstr(USRK7_BUFFER, "+ok")) {
 8000238:	4910      	ldr	r1, [pc, #64]	@ (800027c <USRK7_init+0x98>)
 800023a:	480e      	ldr	r0, [pc, #56]	@ (8000274 <USRK7_init+0x90>)
 800023c:	f001 fbbb 	bl	80019b6 <strstr>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d00a      	beq.n	800025c <USRK7_init+0x78>
			sprintf(USRK7_COMMAND, "AT+VER\r\n");
 8000246:	490e      	ldr	r1, [pc, #56]	@ (8000280 <USRK7_init+0x9c>)
 8000248:	4809      	ldr	r0, [pc, #36]	@ (8000270 <USRK7_init+0x8c>)
 800024a:	f001 fb7f 	bl	800194c <siprintf>
			USRK7_transmit_receive(USRK7_COMMAND, 200, 200);
 800024e:	22c8      	movs	r2, #200	@ 0xc8
 8000250:	21c8      	movs	r1, #200	@ 0xc8
 8000252:	4807      	ldr	r0, [pc, #28]	@ (8000270 <USRK7_init+0x8c>)
 8000254:	f7ff ffb4 	bl	80001c0 <USRK7_transmit_receive>

			return 0; // Initialization successful
 8000258:	2300      	movs	r3, #0
 800025a:	e001      	b.n	8000260 <USRK7_init+0x7c>
		}
	}

	return -1; // Initialization failed
 800025c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000260:	4618      	mov	r0, r3
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	08002310 	.word	0x08002310
 8000270:	200000bc 	.word	0x200000bc
 8000274:	2000007c 	.word	0x2000007c
 8000278:	08002314 	.word	0x08002314
 800027c:	08002318 	.word	0x08002318
 8000280:	0800231c 	.word	0x0800231c

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 f9ce 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f816 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f87a 	bl	8000388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000294:	f000 f84e 	bl	8000334 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USRK7_init(&huart2);
 8000298:	4806      	ldr	r0, [pc, #24]	@ (80002b4 <main+0x30>)
 800029a:	f7ff ffa3 	bl	80001e4 <USRK7_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800029e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a2:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <main+0x34>)
 80002a4:	f000 fcc6 	bl	8000c34 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80002a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ac:	f000 fa1e 	bl	80006ec <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002b0:	bf00      	nop
 80002b2:	e7f4      	b.n	800029e <main+0x1a>
 80002b4:	200000fc 	.word	0x200000fc
 80002b8:	40011000 	.word	0x40011000

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	@ 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fb5e 	bl	800198c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fcb8 	bl	8000c68 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fe:	f000 f883 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f000 ff26 	bl	800116c <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000326:	f000 f86f 	bl	8000408 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	@ 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000338:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <MX_USART2_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	@ (8000380 <MX_USART2_UART_Init+0x4c>)
 800036c:	f001 f88c 	bl	8001488 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f847 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000fc 	.word	0x200000fc
 8000384:	40004400 	.word	0x40004400

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_GPIO_Init+0x78>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a11      	ldr	r2, [pc, #68]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_GPIO_Init+0x78>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	@ (8000404 <MX_GPIO_Init+0x7c>)
 80003d4:	f000 fc16 	bl	8000c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 0308 	add.w	r3, r7, #8
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_GPIO_Init+0x7c>)
 80003f2:	f000 fa83 	bl	80008fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x8>

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a14      	ldr	r2, [pc, #80]	@ (8000470 <HAL_MspInit+0x5c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a0e      	ldr	r2, [pc, #56]	@ (8000470 <HAL_MspInit+0x5c>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <HAL_MspInit+0x60>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <HAL_MspInit+0x60>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	40010000 	.word	0x40010000

08000478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a1b      	ldr	r2, [pc, #108]	@ (8000500 <HAL_UART_MspInit+0x88>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d12f      	bne.n	80004f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000498:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <HAL_UART_MspInit+0x8c>)
 800049a:	69db      	ldr	r3, [r3, #28]
 800049c:	4a19      	ldr	r2, [pc, #100]	@ (8000504 <HAL_UART_MspInit+0x8c>)
 800049e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a2:	61d3      	str	r3, [r2, #28]
 80004a4:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <HAL_UART_MspInit+0x8c>)
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <HAL_UART_MspInit+0x8c>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a13      	ldr	r2, [pc, #76]	@ (8000504 <HAL_UART_MspInit+0x8c>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <HAL_UART_MspInit+0x8c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004c8:	2304      	movs	r3, #4
 80004ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	2302      	movs	r3, #2
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	480b      	ldr	r0, [pc, #44]	@ (8000508 <HAL_UART_MspInit+0x90>)
 80004dc:	f000 fa0e 	bl	80008fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004e0:	2308      	movs	r3, #8
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <HAL_UART_MspInit+0x90>)
 80004f4:	f000 fa02 	bl	80008fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40004400 	.word	0x40004400
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <NMI_Handler+0x4>

08000514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <MemManage_Handler+0x4>

08000524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <UsageFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f8aa 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800056c:	4a14      	ldr	r2, [pc, #80]	@ (80005c0 <_sbrk+0x5c>)
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <_sbrk+0x60>)
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <_sbrk+0x64>)
 8000582:	4a12      	ldr	r2, [pc, #72]	@ (80005cc <_sbrk+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000586:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	429a      	cmp	r2, r3
 8000592:	d207      	bcs.n	80005a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000594:	f001 fa26 	bl	80019e4 <__errno>
 8000598:	4603      	mov	r3, r0
 800059a:	220c      	movs	r2, #12
 800059c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e009      	b.n	80005b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a4:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <_sbrk+0x64>)
 80005b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20005000 	.word	0x20005000
 80005c4:	00000400 	.word	0x00000400
 80005c8:	20000144 	.word	0x20000144
 80005cc:	20000298 	.word	0x20000298

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff fff8 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e2:	490c      	ldr	r1, [pc, #48]	@ (8000614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a09      	ldr	r2, [pc, #36]	@ (800061c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f8:	4c09      	ldr	r4, [pc, #36]	@ (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f001 f9f3 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fe3b 	bl	8000284 <main>
  bx lr
 800060e:	4770      	bx	lr
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000618:	08002398 	.word	0x08002398
  ldr r2, =_sbss
 800061c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000620:	20000294 	.word	0x20000294

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <HAL_Init+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <HAL_Init+0x28>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f92b 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	200f      	movs	r0, #15
 8000640:	f000 f808 	bl	8000654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f7ff fee6 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_InitTick+0x54>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_InitTick+0x58>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f935 	bl	80008e2 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f90b 	bl	80008aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	@ (80006b0 <HAL_InitTick+0x5c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a03      	ldr	r2, [pc, #12]	@ (80006d4 <HAL_IncTick+0x20>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000148 	.word	0x20000148

080006d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	@ (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20000148 	.word	0x20000148

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff fff0 	bl	80006d8 <HAL_GetTick>
 80006f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <HAL_Delay+0x44>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000712:	bf00      	nop
 8000714:	f7ff ffe0 	bl	80006d8 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	@ 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000860:	d301      	bcc.n	8000866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2301      	movs	r3, #1
 8000864:	e00f      	b.n	8000886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <SysTick_Config+0x40>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086e:	210f      	movs	r1, #15
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff ff90 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SysTick_Config+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Config+0x40>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff49 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff5e 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffb0 	bl	8000850 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	@ 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e169      	b.n	8000be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000910:	2201      	movs	r2, #1
 8000912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8158 	bne.w	8000bde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4a9a      	ldr	r2, [pc, #616]	@ (8000b9c <HAL_GPIO_Init+0x2a0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d05e      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000938:	4a98      	ldr	r2, [pc, #608]	@ (8000b9c <HAL_GPIO_Init+0x2a0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d875      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800093e:	4a98      	ldr	r2, [pc, #608]	@ (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d058      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000944:	4a96      	ldr	r2, [pc, #600]	@ (8000ba0 <HAL_GPIO_Init+0x2a4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d86f      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800094a:	4a96      	ldr	r2, [pc, #600]	@ (8000ba4 <HAL_GPIO_Init+0x2a8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d052      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000950:	4a94      	ldr	r2, [pc, #592]	@ (8000ba4 <HAL_GPIO_Init+0x2a8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d869      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000956:	4a94      	ldr	r2, [pc, #592]	@ (8000ba8 <HAL_GPIO_Init+0x2ac>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d04c      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 800095c:	4a92      	ldr	r2, [pc, #584]	@ (8000ba8 <HAL_GPIO_Init+0x2ac>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d863      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000962:	4a92      	ldr	r2, [pc, #584]	@ (8000bac <HAL_GPIO_Init+0x2b0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d046      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
 8000968:	4a90      	ldr	r2, [pc, #576]	@ (8000bac <HAL_GPIO_Init+0x2b0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d85d      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 800096e:	2b12      	cmp	r3, #18
 8000970:	d82a      	bhi.n	80009c8 <HAL_GPIO_Init+0xcc>
 8000972:	2b12      	cmp	r3, #18
 8000974:	d859      	bhi.n	8000a2a <HAL_GPIO_Init+0x12e>
 8000976:	a201      	add	r2, pc, #4	@ (adr r2, 800097c <HAL_GPIO_Init+0x80>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009f7 	.word	0x080009f7
 8000980:	080009d1 	.word	0x080009d1
 8000984:	080009e3 	.word	0x080009e3
 8000988:	08000a25 	.word	0x08000a25
 800098c:	08000a2b 	.word	0x08000a2b
 8000990:	08000a2b 	.word	0x08000a2b
 8000994:	08000a2b 	.word	0x08000a2b
 8000998:	08000a2b 	.word	0x08000a2b
 800099c:	08000a2b 	.word	0x08000a2b
 80009a0:	08000a2b 	.word	0x08000a2b
 80009a4:	08000a2b 	.word	0x08000a2b
 80009a8:	08000a2b 	.word	0x08000a2b
 80009ac:	08000a2b 	.word	0x08000a2b
 80009b0:	08000a2b 	.word	0x08000a2b
 80009b4:	08000a2b 	.word	0x08000a2b
 80009b8:	08000a2b 	.word	0x08000a2b
 80009bc:	08000a2b 	.word	0x08000a2b
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009ed 	.word	0x080009ed
 80009c8:	4a79      	ldr	r2, [pc, #484]	@ (8000bb0 <HAL_GPIO_Init+0x2b4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d013      	beq.n	80009f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ce:	e02c      	b.n	8000a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e029      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	3304      	adds	r3, #4
 80009de:	623b      	str	r3, [r7, #32]
          break;
 80009e0:	e024      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	3308      	adds	r3, #8
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e01f      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	330c      	adds	r3, #12
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e01a      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fe:	2304      	movs	r3, #4
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e013      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d105      	bne.n	8000a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	611a      	str	r2, [r3, #16]
          break;
 8000a16:	e009      	b.n	8000a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	615a      	str	r2, [r3, #20]
          break;
 8000a22:	e003      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x130>
          break;
 8000a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2bff      	cmp	r3, #255	@ 0xff
 8000a30:	d801      	bhi.n	8000a36 <HAL_GPIO_Init+0x13a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	e001      	b.n	8000a3a <HAL_GPIO_Init+0x13e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	2bff      	cmp	r3, #255	@ 0xff
 8000a40:	d802      	bhi.n	8000a48 <HAL_GPIO_Init+0x14c>
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	e002      	b.n	8000a4e <HAL_GPIO_Init+0x152>
 8000a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4a:	3b08      	subs	r3, #8
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	210f      	movs	r1, #15
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	6a39      	ldr	r1, [r7, #32]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 80b1 	beq.w	8000bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a94:	4a48      	ldr	r2, [pc, #288]	@ (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	220f      	movs	r2, #15
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a40      	ldr	r2, [pc, #256]	@ (8000bbc <HAL_GPIO_Init+0x2c0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d013      	beq.n	8000ae8 <HAL_GPIO_Init+0x1ec>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8000bc0 <HAL_GPIO_Init+0x2c4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d00d      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e8>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc4 <HAL_GPIO_Init+0x2c8>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d007      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e4>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc8 <HAL_GPIO_Init+0x2cc>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d101      	bne.n	8000adc <HAL_GPIO_Init+0x1e0>
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e006      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000adc:	2304      	movs	r3, #4
 8000ade:	e004      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e002      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <HAL_GPIO_Init+0x1ee>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aec:	f002 0203 	and.w	r2, r2, #3
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	4093      	lsls	r3, r2
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000afa:	492f      	ldr	r1, [pc, #188]	@ (8000bb8 <HAL_GPIO_Init+0x2bc>)
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3302      	adds	r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b14:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	492c      	ldr	r1, [pc, #176]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	608b      	str	r3, [r1, #8]
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b22:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4928      	ldr	r1, [pc, #160]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3c:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	4922      	ldr	r1, [pc, #136]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60cb      	str	r3, [r1, #12]
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	491e      	ldr	r1, [pc, #120]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	4918      	ldr	r1, [pc, #96]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	4914      	ldr	r1, [pc, #80]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d021      	beq.n	8000bd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	490e      	ldr	r1, [pc, #56]	@ (8000bcc <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e021      	b.n	8000bde <HAL_GPIO_Init+0x2e2>
 8000b9a:	bf00      	nop
 8000b9c:	10320000 	.word	0x10320000
 8000ba0:	10310000 	.word	0x10310000
 8000ba4:	10220000 	.word	0x10220000
 8000ba8:	10210000 	.word	0x10210000
 8000bac:	10120000 	.word	0x10120000
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40011400 	.word	0x40011400
 8000bcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_GPIO_Init+0x304>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	4909      	ldr	r1, [pc, #36]	@ (8000c00 <HAL_GPIO_Init+0x304>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be0:	3301      	adds	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bea:	fa22 f303 	lsr.w	r3, r2, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f47f ae8e 	bne.w	8000910 <HAL_GPIO_Init+0x14>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	372c      	adds	r7, #44	@ 0x2c
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c20:	e003      	b.n	8000c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	041a      	lsls	r2, r3, #16
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	611a      	str	r2, [r3, #16]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43d9      	mvns	r1, r3
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	400b      	ands	r3, r1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
	...

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e272      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 8087 	beq.w	8000d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c88:	4b92      	ldr	r3, [pc, #584]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d00c      	beq.n	8000cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c94:	4b8f      	ldr	r3, [pc, #572]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d112      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x5e>
 8000ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cac:	d10b      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cae:	4b89      	ldr	r3, [pc, #548]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d06c      	beq.n	8000d94 <HAL_RCC_OscConfig+0x12c>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d168      	bne.n	8000d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e24c      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cce:	d106      	bne.n	8000cde <HAL_RCC_OscConfig+0x76>
 8000cd0:	4b80      	ldr	r3, [pc, #512]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e02e      	b.n	8000d3c <HAL_RCC_OscConfig+0xd4>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0x98>
 8000ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b78      	ldr	r3, [pc, #480]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a77      	ldr	r2, [pc, #476]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e01d      	b.n	8000d3c <HAL_RCC_OscConfig+0xd4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d08:	d10c      	bne.n	8000d24 <HAL_RCC_OscConfig+0xbc>
 8000d0a:	4b72      	ldr	r3, [pc, #456]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a71      	ldr	r2, [pc, #452]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e00b      	b.n	8000d3c <HAL_RCC_OscConfig+0xd4>
 8000d24:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b68      	ldr	r3, [pc, #416]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a67      	ldr	r2, [pc, #412]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d013      	beq.n	8000d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fcc8 	bl	80006d8 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fcc4 	bl	80006d8 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	@ 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e200      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f0      	beq.n	8000d4c <HAL_RCC_OscConfig+0xe4>
 8000d6a:	e014      	b.n	8000d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fcb4 	bl	80006d8 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fcb0 	bl	80006d8 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b64      	cmp	r3, #100	@ 0x64
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e1ec      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d86:	4b53      	ldr	r3, [pc, #332]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x10c>
 8000d92:	e000      	b.n	8000d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d063      	beq.n	8000e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00b      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dae:	4b49      	ldr	r3, [pc, #292]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d11c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x18c>
 8000dba:	4b46      	ldr	r3, [pc, #280]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d116      	bne.n	8000df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc6:	4b43      	ldr	r3, [pc, #268]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <HAL_RCC_OscConfig+0x176>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d001      	beq.n	8000dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e1c0      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dde:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4939      	ldr	r1, [pc, #228]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	e03a      	b.n	8000e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d020      	beq.n	8000e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dfc:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fc69 	bl	80006d8 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fc65 	bl	80006d8 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e1a1      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4927      	ldr	r1, [pc, #156]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
 8000e3c:	e015      	b.n	8000e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <HAL_RCC_OscConfig+0x270>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fc48 	bl	80006d8 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4c:	f7ff fc44 	bl	80006d8 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e180      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d03a      	beq.n	8000eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d019      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_RCC_OscConfig+0x274>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff fc28 	bl	80006d8 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fc24 	bl	80006d8 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e160      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 face 	bl	800144c <RCC_Delay>
 8000eb0:	e01c      	b.n	8000eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_RCC_OscConfig+0x274>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb8:	f7ff fc0e 	bl	80006d8 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebe:	e00f      	b.n	8000ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fc0a 	bl	80006d8 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d908      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e146      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	42420000 	.word	0x42420000
 8000edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4b92      	ldr	r3, [pc, #584]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e9      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80a6 	beq.w	8001046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b8b      	ldr	r3, [pc, #556]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10d      	bne.n	8000f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b88      	ldr	r3, [pc, #544]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a87      	ldr	r2, [pc, #540]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b85      	ldr	r3, [pc, #532]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f26:	4b82      	ldr	r3, [pc, #520]	@ (8001130 <HAL_RCC_OscConfig+0x4c8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d118      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f32:	4b7f      	ldr	r3, [pc, #508]	@ (8001130 <HAL_RCC_OscConfig+0x4c8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a7e      	ldr	r2, [pc, #504]	@ (8001130 <HAL_RCC_OscConfig+0x4c8>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fbcb 	bl	80006d8 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f46:	f7ff fbc7 	bl	80006d8 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	@ 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e103      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	4b75      	ldr	r3, [pc, #468]	@ (8001130 <HAL_RCC_OscConfig+0x4c8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x312>
 8000f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a6e      	ldr	r2, [pc, #440]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	e02d      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x334>
 8000f82:	4b6a      	ldr	r3, [pc, #424]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4a69      	ldr	r2, [pc, #420]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6213      	str	r3, [r2, #32]
 8000f8e:	4b67      	ldr	r3, [pc, #412]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a66      	ldr	r2, [pc, #408]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	e01c      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36e>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d10c      	bne.n	8000fbe <HAL_RCC_OscConfig+0x356>
 8000fa4:	4b61      	ldr	r3, [pc, #388]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4a60      	ldr	r2, [pc, #384]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6213      	str	r3, [r2, #32]
 8000fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	e00b      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36e>
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6213      	str	r3, [r2, #32]
 8000fca:	4b58      	ldr	r3, [pc, #352]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a57      	ldr	r2, [pc, #348]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	f023 0304 	bic.w	r3, r3, #4
 8000fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d015      	beq.n	800100a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fb7b 	bl	80006d8 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fb77 	bl	80006d8 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e0b1      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0ee      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x37e>
 8001008:	e014      	b.n	8001034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb65 	bl	80006d8 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fb61 	bl	80006d8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e09b      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	4b40      	ldr	r3, [pc, #256]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d105      	bne.n	8001046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	4b3c      	ldr	r3, [pc, #240]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a3b      	ldr	r2, [pc, #236]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8087 	beq.w	800115e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001050:	4b36      	ldr	r3, [pc, #216]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b08      	cmp	r3, #8
 800105a:	d061      	beq.n	8001120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d146      	bne.n	80010f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <HAL_RCC_OscConfig+0x4cc>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fb35 	bl	80006d8 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff fb31 	bl	80006d8 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e06d      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f0      	bne.n	8001072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001098:	d108      	bne.n	80010ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4921      	ldr	r1, [pc, #132]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a19      	ldr	r1, [r3, #32]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	430b      	orrs	r3, r1
 80010be:	491b      	ldr	r1, [pc, #108]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_RCC_OscConfig+0x4cc>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb05 	bl	80006d8 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff fb01 	bl	80006d8 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e03d      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x46a>
 80010f0:	e035      	b.n	800115e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <HAL_RCC_OscConfig+0x4cc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff faee 	bl	80006d8 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff faea 	bl	80006d8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e026      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_RCC_OscConfig+0x4c4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x498>
 800111e:	e01e      	b.n	800115e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d107      	bne.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e019      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
 800112c:	40021000 	.word	0x40021000
 8001130:	40007000 	.word	0x40007000
 8001134:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_RCC_OscConfig+0x500>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	429a      	cmp	r2, r3
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001156:	429a      	cmp	r2, r3
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0d0      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001180:	4b6a      	ldr	r3, [pc, #424]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d910      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b67      	ldr	r3, [pc, #412]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0207 	bic.w	r2, r3, #7
 8001196:	4965      	ldr	r1, [pc, #404]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b63      	ldr	r3, [pc, #396]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0b8      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c8:	4b59      	ldr	r3, [pc, #356]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a58      	ldr	r2, [pc, #352]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e0:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	4b50      	ldr	r3, [pc, #320]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	494d      	ldr	r1, [pc, #308]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d040      	beq.n	800128c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d115      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e07f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122a:	4b41      	ldr	r3, [pc, #260]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e073      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	4b3d      	ldr	r3, [pc, #244]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e06b      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124a:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f023 0203 	bic.w	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4936      	ldr	r1, [pc, #216]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fa3c 	bl	80006d8 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	e00a      	b.n	800127a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001264:	f7ff fa38 	bl	80006d8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e053      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 020c 	and.w	r2, r3, #12
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d1eb      	bne.n	8001264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800128c:	4b27      	ldr	r3, [pc, #156]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d210      	bcs.n	80012bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129a:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 0207 	bic.w	r2, r3, #7
 80012a2:	4922      	ldr	r1, [pc, #136]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e032      	b.n	8001322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4916      	ldr	r1, [pc, #88]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	490e      	ldr	r1, [pc, #56]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012fa:	f000 f821 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	490a      	ldr	r1, [pc, #40]	@ (8001334 <HAL_RCC_ClockConfig+0x1c8>)
 800130c:	5ccb      	ldrb	r3, [r1, r3]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a09      	ldr	r2, [pc, #36]	@ (8001338 <HAL_RCC_ClockConfig+0x1cc>)
 8001314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_RCC_ClockConfig+0x1d0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f99a 	bl	8000654 <HAL_InitTick>

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000
 8001330:	40021000 	.word	0x40021000
 8001334:	08002328 	.word	0x08002328
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d002      	beq.n	8001370 <HAL_RCC_GetSysClockFreq+0x30>
 800136a:	2b08      	cmp	r3, #8
 800136c:	d003      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x36>
 800136e:	e027      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001372:	613b      	str	r3, [r7, #16]
      break;
 8001374:	e027      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	0c9b      	lsrs	r3, r3, #18
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	4a17      	ldr	r2, [pc, #92]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d010      	beq.n	80013b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	0c5b      	lsrs	r3, r3, #17
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e004      	b.n	80013ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	613b      	str	r3, [r7, #16]
      break;
 80013be:	e002      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c2:	613b      	str	r3, [r7, #16]
      break;
 80013c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013c6:	693b      	ldr	r3, [r7, #16]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	007a1200 	.word	0x007a1200
 80013dc:	08002340 	.word	0x08002340
 80013e0:	08002350 	.word	0x08002350
 80013e4:	003d0900 	.word	0x003d0900

080013e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013ec:	4b02      	ldr	r3, [pc, #8]	@ (80013f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000000 	.word	0x20000000

080013fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001400:	f7ff fff2 	bl	80013e8 <HAL_RCC_GetHCLKFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b05      	ldr	r3, [pc, #20]	@ (800141c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	4903      	ldr	r1, [pc, #12]	@ (8001420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	08002338 	.word	0x08002338

08001424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001428:	f7ff ffde 	bl	80013e8 <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0adb      	lsrs	r3, r3, #11
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	@ (8001448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	08002338 	.word	0x08002338

0800144c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <RCC_Delay+0x34>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <RCC_Delay+0x38>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0a5b      	lsrs	r3, r3, #9
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001468:	bf00      	nop
  }
  while (Delay --);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f9      	bne.n	8001468 <RCC_Delay+0x1c>
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000000 	.word	0x20000000
 8001484:	10624dd3 	.word	0x10624dd3

08001488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e042      	b.n	8001520 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7fe ffe2 	bl	8000478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2224      	movs	r2, #36	@ 0x24
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f9af 	bl	8001830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	d16d      	bne.n	8001624 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_UART_Transmit+0x2c>
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e066      	b.n	8001626 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2221      	movs	r2, #33	@ 0x21
 8001562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001566:	f7ff f8b7 	bl	80006d8 <HAL_GetTick>
 800156a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	88fa      	ldrh	r2, [r7, #6]
 8001570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	88fa      	ldrh	r2, [r7, #6]
 8001576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001580:	d108      	bne.n	8001594 <HAL_UART_Transmit+0x6c>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d104      	bne.n	8001594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e003      	b.n	800159c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800159c:	e02a      	b.n	80015f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2200      	movs	r2, #0
 80015a6:	2180      	movs	r1, #128	@ 0x80
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 f8d2 	bl	8001752 <UART_WaitOnFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e036      	b.n	8001626 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10b      	bne.n	80015d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	3302      	adds	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	e007      	b.n	80015e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1cf      	bne.n	800159e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2200      	movs	r2, #0
 8001606:	2140      	movs	r1, #64	@ 0x40
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f8a2 	bl	8001752 <UART_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e006      	b.n	8001626 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	e000      	b.n	8001626 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001624:	2302      	movs	r3, #2
  }
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b08a      	sub	sp, #40	@ 0x28
 8001632:	af02      	add	r7, sp, #8
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4613      	mov	r3, r2
 800163c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	d17c      	bne.n	8001748 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_UART_Receive+0x2c>
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e075      	b.n	800174a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2222      	movs	r2, #34	@ 0x22
 8001668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001672:	f7ff f831 	bl	80006d8 <HAL_GetTick>
 8001676:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	88fa      	ldrh	r2, [r7, #6]
 8001682:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800168c:	d108      	bne.n	80016a0 <HAL_UART_Receive+0x72>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d104      	bne.n	80016a0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	e003      	b.n	80016a8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80016a8:	e043      	b.n	8001732 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2200      	movs	r2, #0
 80016b2:	2120      	movs	r1, #32
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f84c 	bl	8001752 <UART_WaitOnFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e042      	b.n	800174a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	3302      	adds	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	e01f      	b.n	8001724 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ec:	d007      	beq.n	80016fe <HAL_UART_Receive+0xd0>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_UART_Receive+0xde>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	701a      	strb	r2, [r3, #0]
 800170a:	e008      	b.n	800171e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001718:	b2da      	uxtb	r2, r3
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1b6      	bne.n	80016aa <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	e000      	b.n	800174a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001748:	2302      	movs	r3, #2
  }
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b090      	sub	sp, #64	@ 0x40
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001762:	e050      	b.n	8001806 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d04c      	beq.n	8001806 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800176c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x30>
 8001772:	f7fe ffb1 	bl	80006d8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800177e:	429a      	cmp	r2, r3
 8001780:	d241      	bcs.n	8001806 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	330c      	adds	r3, #12
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178c:	e853 3f00 	ldrex	r3, [r3]
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	330c      	adds	r3, #12
 80017a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80017a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017aa:	e841 2300 	strex	r3, r2, [r1]
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1e5      	bne.n	8001782 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3314      	adds	r3, #20
 80017bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	e853 3f00 	ldrex	r3, [r3]
 80017c4:	613b      	str	r3, [r7, #16]
   return(result);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3314      	adds	r3, #20
 80017d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017d6:	623a      	str	r2, [r7, #32]
 80017d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017da:	69f9      	ldr	r1, [r7, #28]
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	e841 2300 	strex	r3, r2, [r1]
 80017e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1e5      	bne.n	80017b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e00f      	b.n	8001826 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4013      	ands	r3, r2
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	429a      	cmp	r2, r3
 8001814:	bf0c      	ite	eq
 8001816:	2301      	moveq	r3, #1
 8001818:	2300      	movne	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	429a      	cmp	r2, r3
 8001822:	d09f      	beq.n	8001764 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3740      	adds	r7, #64	@ 0x40
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800186a:	f023 030c 	bic.w	r3, r3, #12
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	430b      	orrs	r3, r1
 8001876:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2c      	ldr	r2, [pc, #176]	@ (8001944 <UART_SetConfig+0x114>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d103      	bne.n	80018a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001898:	f7ff fdc4 	bl	8001424 <HAL_RCC_GetPCLK2Freq>
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	e002      	b.n	80018a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80018a0:	f7ff fdac 	bl	80013fc <HAL_RCC_GetPCLK1Freq>
 80018a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009a      	lsls	r2, r3, #2
 80018b0:	441a      	add	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <UART_SetConfig+0x118>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	0119      	lsls	r1, r3, #4
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009a      	lsls	r2, r3, #2
 80018d0:	441a      	add	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <UART_SetConfig+0x118>)
 80018de:	fba3 0302 	umull	r0, r3, r3, r2
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2064      	movs	r0, #100	@ 0x64
 80018e6:	fb00 f303 	mul.w	r3, r0, r3
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	3332      	adds	r3, #50	@ 0x32
 80018f0:	4a15      	ldr	r2, [pc, #84]	@ (8001948 <UART_SetConfig+0x118>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018fc:	4419      	add	r1, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009a      	lsls	r2, r3, #2
 8001908:	441a      	add	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fbb2 f2f3 	udiv	r2, r2, r3
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <UART_SetConfig+0x118>)
 8001916:	fba3 0302 	umull	r0, r3, r3, r2
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2064      	movs	r0, #100	@ 0x64
 800191e:	fb00 f303 	mul.w	r3, r0, r3
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	3332      	adds	r3, #50	@ 0x32
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <UART_SetConfig+0x118>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	f003 020f 	and.w	r2, r3, #15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	440a      	add	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40013800 	.word	0x40013800
 8001948:	51eb851f 	.word	0x51eb851f

0800194c <siprintf>:
 800194c:	b40e      	push	{r1, r2, r3}
 800194e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001952:	b500      	push	{lr}
 8001954:	b09c      	sub	sp, #112	@ 0x70
 8001956:	ab1d      	add	r3, sp, #116	@ 0x74
 8001958:	9002      	str	r0, [sp, #8]
 800195a:	9006      	str	r0, [sp, #24]
 800195c:	9107      	str	r1, [sp, #28]
 800195e:	9104      	str	r1, [sp, #16]
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <siprintf+0x38>)
 8001962:	4909      	ldr	r1, [pc, #36]	@ (8001988 <siprintf+0x3c>)
 8001964:	f853 2b04 	ldr.w	r2, [r3], #4
 8001968:	9105      	str	r1, [sp, #20]
 800196a:	6800      	ldr	r0, [r0, #0]
 800196c:	a902      	add	r1, sp, #8
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f000 f9b6 	bl	8001ce0 <_svfiprintf_r>
 8001974:	2200      	movs	r2, #0
 8001976:	9b02      	ldr	r3, [sp, #8]
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	b01c      	add	sp, #112	@ 0x70
 800197c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001980:	b003      	add	sp, #12
 8001982:	4770      	bx	lr
 8001984:	2000000c 	.word	0x2000000c
 8001988:	ffff0208 	.word	0xffff0208

0800198c <memset>:
 800198c:	4603      	mov	r3, r0
 800198e:	4402      	add	r2, r0
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <memset+0xa>
 8001994:	4770      	bx	lr
 8001996:	f803 1b01 	strb.w	r1, [r3], #1
 800199a:	e7f9      	b.n	8001990 <memset+0x4>

0800199c <strchr>:
 800199c:	4603      	mov	r3, r0
 800199e:	b2c9      	uxtb	r1, r1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019a6:	b112      	cbz	r2, 80019ae <strchr+0x12>
 80019a8:	428a      	cmp	r2, r1
 80019aa:	d1f9      	bne.n	80019a0 <strchr+0x4>
 80019ac:	4770      	bx	lr
 80019ae:	2900      	cmp	r1, #0
 80019b0:	bf18      	it	ne
 80019b2:	2000      	movne	r0, #0
 80019b4:	4770      	bx	lr

080019b6 <strstr>:
 80019b6:	780a      	ldrb	r2, [r1, #0]
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	b96a      	cbnz	r2, 80019d8 <strstr+0x22>
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	429a      	cmp	r2, r3
 80019c0:	d109      	bne.n	80019d6 <strstr+0x20>
 80019c2:	460c      	mov	r4, r1
 80019c4:	4605      	mov	r5, r0
 80019c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f6      	beq.n	80019bc <strstr+0x6>
 80019ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80019d2:	429e      	cmp	r6, r3
 80019d4:	d0f7      	beq.n	80019c6 <strstr+0x10>
 80019d6:	3001      	adds	r0, #1
 80019d8:	7803      	ldrb	r3, [r0, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <strstr+0x8>
 80019de:	4618      	mov	r0, r3
 80019e0:	e7ec      	b.n	80019bc <strstr+0x6>
	...

080019e4 <__errno>:
 80019e4:	4b01      	ldr	r3, [pc, #4]	@ (80019ec <__errno+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	2600      	movs	r6, #0
 80019f4:	4d0c      	ldr	r5, [pc, #48]	@ (8001a28 <__libc_init_array+0x38>)
 80019f6:	4c0d      	ldr	r4, [pc, #52]	@ (8001a2c <__libc_init_array+0x3c>)
 80019f8:	1b64      	subs	r4, r4, r5
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	42a6      	cmp	r6, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	f000 fc78 	bl	80022f4 <_init>
 8001a04:	2600      	movs	r6, #0
 8001a06:	4d0a      	ldr	r5, [pc, #40]	@ (8001a30 <__libc_init_array+0x40>)
 8001a08:	4c0a      	ldr	r4, [pc, #40]	@ (8001a34 <__libc_init_array+0x44>)
 8001a0a:	1b64      	subs	r4, r4, r5
 8001a0c:	10a4      	asrs	r4, r4, #2
 8001a0e:	42a6      	cmp	r6, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a18:	4798      	blx	r3
 8001a1a:	3601      	adds	r6, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a22:	4798      	blx	r3
 8001a24:	3601      	adds	r6, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	08002390 	.word	0x08002390
 8001a2c:	08002390 	.word	0x08002390
 8001a30:	08002390 	.word	0x08002390
 8001a34:	08002394 	.word	0x08002394

08001a38 <__retarget_lock_acquire_recursive>:
 8001a38:	4770      	bx	lr

08001a3a <__retarget_lock_release_recursive>:
 8001a3a:	4770      	bx	lr

08001a3c <_free_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	4605      	mov	r5, r0
 8001a40:	2900      	cmp	r1, #0
 8001a42:	d040      	beq.n	8001ac6 <_free_r+0x8a>
 8001a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a48:	1f0c      	subs	r4, r1, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	18e4      	addlt	r4, r4, r3
 8001a50:	f000 f8de 	bl	8001c10 <__malloc_lock>
 8001a54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <_free_r+0x8c>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	b933      	cbnz	r3, 8001a68 <_free_r+0x2c>
 8001a5a:	6063      	str	r3, [r4, #4]
 8001a5c:	6014      	str	r4, [r2, #0]
 8001a5e:	4628      	mov	r0, r5
 8001a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a64:	f000 b8da 	b.w	8001c1c <__malloc_unlock>
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	d908      	bls.n	8001a7e <_free_r+0x42>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	1821      	adds	r1, r4, r0
 8001a70:	428b      	cmp	r3, r1
 8001a72:	bf01      	itttt	eq
 8001a74:	6819      	ldreq	r1, [r3, #0]
 8001a76:	685b      	ldreq	r3, [r3, #4]
 8001a78:	1809      	addeq	r1, r1, r0
 8001a7a:	6021      	streq	r1, [r4, #0]
 8001a7c:	e7ed      	b.n	8001a5a <_free_r+0x1e>
 8001a7e:	461a      	mov	r2, r3
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b10b      	cbz	r3, 8001a88 <_free_r+0x4c>
 8001a84:	42a3      	cmp	r3, r4
 8001a86:	d9fa      	bls.n	8001a7e <_free_r+0x42>
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	1850      	adds	r0, r2, r1
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d10b      	bne.n	8001aa8 <_free_r+0x6c>
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	4401      	add	r1, r0
 8001a94:	1850      	adds	r0, r2, r1
 8001a96:	4283      	cmp	r3, r0
 8001a98:	6011      	str	r1, [r2, #0]
 8001a9a:	d1e0      	bne.n	8001a5e <_free_r+0x22>
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4408      	add	r0, r1
 8001aa2:	6010      	str	r0, [r2, #0]
 8001aa4:	6053      	str	r3, [r2, #4]
 8001aa6:	e7da      	b.n	8001a5e <_free_r+0x22>
 8001aa8:	d902      	bls.n	8001ab0 <_free_r+0x74>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	e7d6      	b.n	8001a5e <_free_r+0x22>
 8001ab0:	6820      	ldr	r0, [r4, #0]
 8001ab2:	1821      	adds	r1, r4, r0
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	bf01      	itttt	eq
 8001ab8:	6819      	ldreq	r1, [r3, #0]
 8001aba:	685b      	ldreq	r3, [r3, #4]
 8001abc:	1809      	addeq	r1, r1, r0
 8001abe:	6021      	streq	r1, [r4, #0]
 8001ac0:	6063      	str	r3, [r4, #4]
 8001ac2:	6054      	str	r4, [r2, #4]
 8001ac4:	e7cb      	b.n	8001a5e <_free_r+0x22>
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	20000290 	.word	0x20000290

08001acc <sbrk_aligned>:
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	4e0f      	ldr	r6, [pc, #60]	@ (8001b0c <sbrk_aligned+0x40>)
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	6831      	ldr	r1, [r6, #0]
 8001ad4:	4605      	mov	r5, r0
 8001ad6:	b911      	cbnz	r1, 8001ade <sbrk_aligned+0x12>
 8001ad8:	f000 fbaa 	bl	8002230 <_sbrk_r>
 8001adc:	6030      	str	r0, [r6, #0]
 8001ade:	4621      	mov	r1, r4
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	f000 fba5 	bl	8002230 <_sbrk_r>
 8001ae6:	1c43      	adds	r3, r0, #1
 8001ae8:	d103      	bne.n	8001af2 <sbrk_aligned+0x26>
 8001aea:	f04f 34ff 	mov.w	r4, #4294967295
 8001aee:	4620      	mov	r0, r4
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d0f8      	beq.n	8001aee <sbrk_aligned+0x22>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 fb96 	bl	8002230 <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d1f2      	bne.n	8001aee <sbrk_aligned+0x22>
 8001b08:	e7ef      	b.n	8001aea <sbrk_aligned+0x1e>
 8001b0a:	bf00      	nop
 8001b0c:	2000028c 	.word	0x2000028c

08001b10 <_malloc_r>:
 8001b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b14:	1ccd      	adds	r5, r1, #3
 8001b16:	f025 0503 	bic.w	r5, r5, #3
 8001b1a:	3508      	adds	r5, #8
 8001b1c:	2d0c      	cmp	r5, #12
 8001b1e:	bf38      	it	cc
 8001b20:	250c      	movcc	r5, #12
 8001b22:	2d00      	cmp	r5, #0
 8001b24:	4606      	mov	r6, r0
 8001b26:	db01      	blt.n	8001b2c <_malloc_r+0x1c>
 8001b28:	42a9      	cmp	r1, r5
 8001b2a:	d904      	bls.n	8001b36 <_malloc_r+0x26>
 8001b2c:	230c      	movs	r3, #12
 8001b2e:	6033      	str	r3, [r6, #0]
 8001b30:	2000      	movs	r0, #0
 8001b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c0c <_malloc_r+0xfc>
 8001b3a:	f000 f869 	bl	8001c10 <__malloc_lock>
 8001b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b42:	461c      	mov	r4, r3
 8001b44:	bb44      	cbnz	r4, 8001b98 <_malloc_r+0x88>
 8001b46:	4629      	mov	r1, r5
 8001b48:	4630      	mov	r0, r6
 8001b4a:	f7ff ffbf 	bl	8001acc <sbrk_aligned>
 8001b4e:	1c43      	adds	r3, r0, #1
 8001b50:	4604      	mov	r4, r0
 8001b52:	d158      	bne.n	8001c06 <_malloc_r+0xf6>
 8001b54:	f8d8 4000 	ldr.w	r4, [r8]
 8001b58:	4627      	mov	r7, r4
 8001b5a:	2f00      	cmp	r7, #0
 8001b5c:	d143      	bne.n	8001be6 <_malloc_r+0xd6>
 8001b5e:	2c00      	cmp	r4, #0
 8001b60:	d04b      	beq.n	8001bfa <_malloc_r+0xea>
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	4639      	mov	r1, r7
 8001b66:	4630      	mov	r0, r6
 8001b68:	eb04 0903 	add.w	r9, r4, r3
 8001b6c:	f000 fb60 	bl	8002230 <_sbrk_r>
 8001b70:	4581      	cmp	r9, r0
 8001b72:	d142      	bne.n	8001bfa <_malloc_r+0xea>
 8001b74:	6821      	ldr	r1, [r4, #0]
 8001b76:	4630      	mov	r0, r6
 8001b78:	1a6d      	subs	r5, r5, r1
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7ff ffa6 	bl	8001acc <sbrk_aligned>
 8001b80:	3001      	adds	r0, #1
 8001b82:	d03a      	beq.n	8001bfa <_malloc_r+0xea>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	442b      	add	r3, r5
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	bb62      	cbnz	r2, 8001bec <_malloc_r+0xdc>
 8001b92:	f8c8 7000 	str.w	r7, [r8]
 8001b96:	e00f      	b.n	8001bb8 <_malloc_r+0xa8>
 8001b98:	6822      	ldr	r2, [r4, #0]
 8001b9a:	1b52      	subs	r2, r2, r5
 8001b9c:	d420      	bmi.n	8001be0 <_malloc_r+0xd0>
 8001b9e:	2a0b      	cmp	r2, #11
 8001ba0:	d917      	bls.n	8001bd2 <_malloc_r+0xc2>
 8001ba2:	1961      	adds	r1, r4, r5
 8001ba4:	42a3      	cmp	r3, r4
 8001ba6:	6025      	str	r5, [r4, #0]
 8001ba8:	bf18      	it	ne
 8001baa:	6059      	strne	r1, [r3, #4]
 8001bac:	6863      	ldr	r3, [r4, #4]
 8001bae:	bf08      	it	eq
 8001bb0:	f8c8 1000 	streq.w	r1, [r8]
 8001bb4:	5162      	str	r2, [r4, r5]
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f000 f82f 	bl	8001c1c <__malloc_unlock>
 8001bbe:	f104 000b 	add.w	r0, r4, #11
 8001bc2:	1d23      	adds	r3, r4, #4
 8001bc4:	f020 0007 	bic.w	r0, r0, #7
 8001bc8:	1ac2      	subs	r2, r0, r3
 8001bca:	bf1c      	itt	ne
 8001bcc:	1a1b      	subne	r3, r3, r0
 8001bce:	50a3      	strne	r3, [r4, r2]
 8001bd0:	e7af      	b.n	8001b32 <_malloc_r+0x22>
 8001bd2:	6862      	ldr	r2, [r4, #4]
 8001bd4:	42a3      	cmp	r3, r4
 8001bd6:	bf0c      	ite	eq
 8001bd8:	f8c8 2000 	streq.w	r2, [r8]
 8001bdc:	605a      	strne	r2, [r3, #4]
 8001bde:	e7eb      	b.n	8001bb8 <_malloc_r+0xa8>
 8001be0:	4623      	mov	r3, r4
 8001be2:	6864      	ldr	r4, [r4, #4]
 8001be4:	e7ae      	b.n	8001b44 <_malloc_r+0x34>
 8001be6:	463c      	mov	r4, r7
 8001be8:	687f      	ldr	r7, [r7, #4]
 8001bea:	e7b6      	b.n	8001b5a <_malloc_r+0x4a>
 8001bec:	461a      	mov	r2, r3
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	42a3      	cmp	r3, r4
 8001bf2:	d1fb      	bne.n	8001bec <_malloc_r+0xdc>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6053      	str	r3, [r2, #4]
 8001bf8:	e7de      	b.n	8001bb8 <_malloc_r+0xa8>
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	6033      	str	r3, [r6, #0]
 8001c00:	f000 f80c 	bl	8001c1c <__malloc_unlock>
 8001c04:	e794      	b.n	8001b30 <_malloc_r+0x20>
 8001c06:	6005      	str	r5, [r0, #0]
 8001c08:	e7d6      	b.n	8001bb8 <_malloc_r+0xa8>
 8001c0a:	bf00      	nop
 8001c0c:	20000290 	.word	0x20000290

08001c10 <__malloc_lock>:
 8001c10:	4801      	ldr	r0, [pc, #4]	@ (8001c18 <__malloc_lock+0x8>)
 8001c12:	f7ff bf11 	b.w	8001a38 <__retarget_lock_acquire_recursive>
 8001c16:	bf00      	nop
 8001c18:	20000288 	.word	0x20000288

08001c1c <__malloc_unlock>:
 8001c1c:	4801      	ldr	r0, [pc, #4]	@ (8001c24 <__malloc_unlock+0x8>)
 8001c1e:	f7ff bf0c 	b.w	8001a3a <__retarget_lock_release_recursive>
 8001c22:	bf00      	nop
 8001c24:	20000288 	.word	0x20000288

08001c28 <__ssputs_r>:
 8001c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c2c:	461f      	mov	r7, r3
 8001c2e:	688e      	ldr	r6, [r1, #8]
 8001c30:	4682      	mov	sl, r0
 8001c32:	42be      	cmp	r6, r7
 8001c34:	460c      	mov	r4, r1
 8001c36:	4690      	mov	r8, r2
 8001c38:	680b      	ldr	r3, [r1, #0]
 8001c3a:	d82d      	bhi.n	8001c98 <__ssputs_r+0x70>
 8001c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001c44:	d026      	beq.n	8001c94 <__ssputs_r+0x6c>
 8001c46:	6965      	ldr	r5, [r4, #20]
 8001c48:	6909      	ldr	r1, [r1, #16]
 8001c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c4e:	eba3 0901 	sub.w	r9, r3, r1
 8001c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c56:	1c7b      	adds	r3, r7, #1
 8001c58:	444b      	add	r3, r9
 8001c5a:	106d      	asrs	r5, r5, #1
 8001c5c:	429d      	cmp	r5, r3
 8001c5e:	bf38      	it	cc
 8001c60:	461d      	movcc	r5, r3
 8001c62:	0553      	lsls	r3, r2, #21
 8001c64:	d527      	bpl.n	8001cb6 <__ssputs_r+0x8e>
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7ff ff52 	bl	8001b10 <_malloc_r>
 8001c6c:	4606      	mov	r6, r0
 8001c6e:	b360      	cbz	r0, 8001cca <__ssputs_r+0xa2>
 8001c70:	464a      	mov	r2, r9
 8001c72:	6921      	ldr	r1, [r4, #16]
 8001c74:	f000 fafa 	bl	800226c <memcpy>
 8001c78:	89a3      	ldrh	r3, [r4, #12]
 8001c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c82:	81a3      	strh	r3, [r4, #12]
 8001c84:	6126      	str	r6, [r4, #16]
 8001c86:	444e      	add	r6, r9
 8001c88:	6026      	str	r6, [r4, #0]
 8001c8a:	463e      	mov	r6, r7
 8001c8c:	6165      	str	r5, [r4, #20]
 8001c8e:	eba5 0509 	sub.w	r5, r5, r9
 8001c92:	60a5      	str	r5, [r4, #8]
 8001c94:	42be      	cmp	r6, r7
 8001c96:	d900      	bls.n	8001c9a <__ssputs_r+0x72>
 8001c98:	463e      	mov	r6, r7
 8001c9a:	4632      	mov	r2, r6
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f000 faac 	bl	80021fc <memmove>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	68a3      	ldr	r3, [r4, #8]
 8001ca8:	1b9b      	subs	r3, r3, r6
 8001caa:	60a3      	str	r3, [r4, #8]
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	4433      	add	r3, r6
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb6:	462a      	mov	r2, r5
 8001cb8:	f000 fae6 	bl	8002288 <_realloc_r>
 8001cbc:	4606      	mov	r6, r0
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d1e0      	bne.n	8001c84 <__ssputs_r+0x5c>
 8001cc2:	4650      	mov	r0, sl
 8001cc4:	6921      	ldr	r1, [r4, #16]
 8001cc6:	f7ff feb9 	bl	8001a3c <_free_r>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	f8ca 3000 	str.w	r3, [sl]
 8001cd0:	89a3      	ldrh	r3, [r4, #12]
 8001cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cda:	81a3      	strh	r3, [r4, #12]
 8001cdc:	e7e9      	b.n	8001cb2 <__ssputs_r+0x8a>
	...

08001ce0 <_svfiprintf_r>:
 8001ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce4:	4698      	mov	r8, r3
 8001ce6:	898b      	ldrh	r3, [r1, #12]
 8001ce8:	4607      	mov	r7, r0
 8001cea:	061b      	lsls	r3, r3, #24
 8001cec:	460d      	mov	r5, r1
 8001cee:	4614      	mov	r4, r2
 8001cf0:	b09d      	sub	sp, #116	@ 0x74
 8001cf2:	d510      	bpl.n	8001d16 <_svfiprintf_r+0x36>
 8001cf4:	690b      	ldr	r3, [r1, #16]
 8001cf6:	b973      	cbnz	r3, 8001d16 <_svfiprintf_r+0x36>
 8001cf8:	2140      	movs	r1, #64	@ 0x40
 8001cfa:	f7ff ff09 	bl	8001b10 <_malloc_r>
 8001cfe:	6028      	str	r0, [r5, #0]
 8001d00:	6128      	str	r0, [r5, #16]
 8001d02:	b930      	cbnz	r0, 8001d12 <_svfiprintf_r+0x32>
 8001d04:	230c      	movs	r3, #12
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	b01d      	add	sp, #116	@ 0x74
 8001d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d12:	2340      	movs	r3, #64	@ 0x40
 8001d14:	616b      	str	r3, [r5, #20]
 8001d16:	2300      	movs	r3, #0
 8001d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d20:	2330      	movs	r3, #48	@ 0x30
 8001d22:	f04f 0901 	mov.w	r9, #1
 8001d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001ec4 <_svfiprintf_r+0x1e4>
 8001d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d32:	4623      	mov	r3, r4
 8001d34:	469a      	mov	sl, r3
 8001d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d3a:	b10a      	cbz	r2, 8001d40 <_svfiprintf_r+0x60>
 8001d3c:	2a25      	cmp	r2, #37	@ 0x25
 8001d3e:	d1f9      	bne.n	8001d34 <_svfiprintf_r+0x54>
 8001d40:	ebba 0b04 	subs.w	fp, sl, r4
 8001d44:	d00b      	beq.n	8001d5e <_svfiprintf_r+0x7e>
 8001d46:	465b      	mov	r3, fp
 8001d48:	4622      	mov	r2, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	f7ff ff6b 	bl	8001c28 <__ssputs_r>
 8001d52:	3001      	adds	r0, #1
 8001d54:	f000 80a7 	beq.w	8001ea6 <_svfiprintf_r+0x1c6>
 8001d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d5a:	445a      	add	r2, fp
 8001d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 809f 	beq.w	8001ea6 <_svfiprintf_r+0x1c6>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d72:	f10a 0a01 	add.w	sl, sl, #1
 8001d76:	9304      	str	r3, [sp, #16]
 8001d78:	9307      	str	r3, [sp, #28]
 8001d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d80:	4654      	mov	r4, sl
 8001d82:	2205      	movs	r2, #5
 8001d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d88:	484e      	ldr	r0, [pc, #312]	@ (8001ec4 <_svfiprintf_r+0x1e4>)
 8001d8a:	f000 fa61 	bl	8002250 <memchr>
 8001d8e:	9a04      	ldr	r2, [sp, #16]
 8001d90:	b9d8      	cbnz	r0, 8001dca <_svfiprintf_r+0xea>
 8001d92:	06d0      	lsls	r0, r2, #27
 8001d94:	bf44      	itt	mi
 8001d96:	2320      	movmi	r3, #32
 8001d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d9c:	0711      	lsls	r1, r2, #28
 8001d9e:	bf44      	itt	mi
 8001da0:	232b      	movmi	r3, #43	@ 0x2b
 8001da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001da6:	f89a 3000 	ldrb.w	r3, [sl]
 8001daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dac:	d015      	beq.n	8001dda <_svfiprintf_r+0xfa>
 8001dae:	4654      	mov	r4, sl
 8001db0:	2000      	movs	r0, #0
 8001db2:	f04f 0c0a 	mov.w	ip, #10
 8001db6:	9a07      	ldr	r2, [sp, #28]
 8001db8:	4621      	mov	r1, r4
 8001dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dbe:	3b30      	subs	r3, #48	@ 0x30
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	d94b      	bls.n	8001e5c <_svfiprintf_r+0x17c>
 8001dc4:	b1b0      	cbz	r0, 8001df4 <_svfiprintf_r+0x114>
 8001dc6:	9207      	str	r2, [sp, #28]
 8001dc8:	e014      	b.n	8001df4 <_svfiprintf_r+0x114>
 8001dca:	eba0 0308 	sub.w	r3, r0, r8
 8001dce:	fa09 f303 	lsl.w	r3, r9, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	46a2      	mov	sl, r4
 8001dd6:	9304      	str	r3, [sp, #16]
 8001dd8:	e7d2      	b.n	8001d80 <_svfiprintf_r+0xa0>
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	1d19      	adds	r1, r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	9103      	str	r1, [sp, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bfbb      	ittet	lt
 8001de6:	425b      	neglt	r3, r3
 8001de8:	f042 0202 	orrlt.w	r2, r2, #2
 8001dec:	9307      	strge	r3, [sp, #28]
 8001dee:	9307      	strlt	r3, [sp, #28]
 8001df0:	bfb8      	it	lt
 8001df2:	9204      	strlt	r2, [sp, #16]
 8001df4:	7823      	ldrb	r3, [r4, #0]
 8001df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001df8:	d10a      	bne.n	8001e10 <_svfiprintf_r+0x130>
 8001dfa:	7863      	ldrb	r3, [r4, #1]
 8001dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dfe:	d132      	bne.n	8001e66 <_svfiprintf_r+0x186>
 8001e00:	9b03      	ldr	r3, [sp, #12]
 8001e02:	3402      	adds	r4, #2
 8001e04:	1d1a      	adds	r2, r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	9203      	str	r2, [sp, #12]
 8001e0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e0e:	9305      	str	r3, [sp, #20]
 8001e10:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001ec8 <_svfiprintf_r+0x1e8>
 8001e14:	2203      	movs	r2, #3
 8001e16:	4650      	mov	r0, sl
 8001e18:	7821      	ldrb	r1, [r4, #0]
 8001e1a:	f000 fa19 	bl	8002250 <memchr>
 8001e1e:	b138      	cbz	r0, 8001e30 <_svfiprintf_r+0x150>
 8001e20:	2240      	movs	r2, #64	@ 0x40
 8001e22:	9b04      	ldr	r3, [sp, #16]
 8001e24:	eba0 000a 	sub.w	r0, r0, sl
 8001e28:	4082      	lsls	r2, r0
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	3401      	adds	r4, #1
 8001e2e:	9304      	str	r3, [sp, #16]
 8001e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e34:	2206      	movs	r2, #6
 8001e36:	4825      	ldr	r0, [pc, #148]	@ (8001ecc <_svfiprintf_r+0x1ec>)
 8001e38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e3c:	f000 fa08 	bl	8002250 <memchr>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d036      	beq.n	8001eb2 <_svfiprintf_r+0x1d2>
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <_svfiprintf_r+0x1f0>)
 8001e46:	bb1b      	cbnz	r3, 8001e90 <_svfiprintf_r+0x1b0>
 8001e48:	9b03      	ldr	r3, [sp, #12]
 8001e4a:	3307      	adds	r3, #7
 8001e4c:	f023 0307 	bic.w	r3, r3, #7
 8001e50:	3308      	adds	r3, #8
 8001e52:	9303      	str	r3, [sp, #12]
 8001e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e56:	4433      	add	r3, r6
 8001e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e5a:	e76a      	b.n	8001d32 <_svfiprintf_r+0x52>
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	2001      	movs	r0, #1
 8001e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e64:	e7a8      	b.n	8001db8 <_svfiprintf_r+0xd8>
 8001e66:	2300      	movs	r3, #0
 8001e68:	f04f 0c0a 	mov.w	ip, #10
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	3401      	adds	r4, #1
 8001e70:	9305      	str	r3, [sp, #20]
 8001e72:	4620      	mov	r0, r4
 8001e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e78:	3a30      	subs	r2, #48	@ 0x30
 8001e7a:	2a09      	cmp	r2, #9
 8001e7c:	d903      	bls.n	8001e86 <_svfiprintf_r+0x1a6>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0c6      	beq.n	8001e10 <_svfiprintf_r+0x130>
 8001e82:	9105      	str	r1, [sp, #20]
 8001e84:	e7c4      	b.n	8001e10 <_svfiprintf_r+0x130>
 8001e86:	4604      	mov	r4, r0
 8001e88:	2301      	movs	r3, #1
 8001e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e8e:	e7f0      	b.n	8001e72 <_svfiprintf_r+0x192>
 8001e90:	ab03      	add	r3, sp, #12
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	462a      	mov	r2, r5
 8001e96:	4638      	mov	r0, r7
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <_svfiprintf_r+0x1f4>)
 8001e9a:	a904      	add	r1, sp, #16
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	1c42      	adds	r2, r0, #1
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	d1d6      	bne.n	8001e54 <_svfiprintf_r+0x174>
 8001ea6:	89ab      	ldrh	r3, [r5, #12]
 8001ea8:	065b      	lsls	r3, r3, #25
 8001eaa:	f53f af2d 	bmi.w	8001d08 <_svfiprintf_r+0x28>
 8001eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001eb0:	e72c      	b.n	8001d0c <_svfiprintf_r+0x2c>
 8001eb2:	ab03      	add	r3, sp, #12
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	462a      	mov	r2, r5
 8001eb8:	4638      	mov	r0, r7
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <_svfiprintf_r+0x1f4>)
 8001ebc:	a904      	add	r1, sp, #16
 8001ebe:	f000 f87d 	bl	8001fbc <_printf_i>
 8001ec2:	e7ed      	b.n	8001ea0 <_svfiprintf_r+0x1c0>
 8001ec4:	08002352 	.word	0x08002352
 8001ec8:	08002358 	.word	0x08002358
 8001ecc:	0800235c 	.word	0x0800235c
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	08001c29 	.word	0x08001c29

08001ed8 <_printf_common>:
 8001ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001edc:	4616      	mov	r6, r2
 8001ede:	4698      	mov	r8, r3
 8001ee0:	688a      	ldr	r2, [r1, #8]
 8001ee2:	690b      	ldr	r3, [r1, #16]
 8001ee4:	4607      	mov	r7, r0
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	bfb8      	it	lt
 8001eea:	4613      	movlt	r3, r2
 8001eec:	6033      	str	r3, [r6, #0]
 8001eee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ef8:	b10a      	cbz	r2, 8001efe <_printf_common+0x26>
 8001efa:	3301      	adds	r3, #1
 8001efc:	6033      	str	r3, [r6, #0]
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	0699      	lsls	r1, r3, #26
 8001f02:	bf42      	ittt	mi
 8001f04:	6833      	ldrmi	r3, [r6, #0]
 8001f06:	3302      	addmi	r3, #2
 8001f08:	6033      	strmi	r3, [r6, #0]
 8001f0a:	6825      	ldr	r5, [r4, #0]
 8001f0c:	f015 0506 	ands.w	r5, r5, #6
 8001f10:	d106      	bne.n	8001f20 <_printf_common+0x48>
 8001f12:	f104 0a19 	add.w	sl, r4, #25
 8001f16:	68e3      	ldr	r3, [r4, #12]
 8001f18:	6832      	ldr	r2, [r6, #0]
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	42ab      	cmp	r3, r5
 8001f1e:	dc2b      	bgt.n	8001f78 <_printf_common+0xa0>
 8001f20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	3b00      	subs	r3, #0
 8001f28:	bf18      	it	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	0692      	lsls	r2, r2, #26
 8001f2e:	d430      	bmi.n	8001f92 <_printf_common+0xba>
 8001f30:	4641      	mov	r1, r8
 8001f32:	4638      	mov	r0, r7
 8001f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f38:	47c8      	blx	r9
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	d023      	beq.n	8001f86 <_printf_common+0xae>
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	6922      	ldr	r2, [r4, #16]
 8001f42:	f003 0306 	and.w	r3, r3, #6
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf14      	ite	ne
 8001f4a:	2500      	movne	r5, #0
 8001f4c:	6833      	ldreq	r3, [r6, #0]
 8001f4e:	f04f 0600 	mov.w	r6, #0
 8001f52:	bf08      	it	eq
 8001f54:	68e5      	ldreq	r5, [r4, #12]
 8001f56:	f104 041a 	add.w	r4, r4, #26
 8001f5a:	bf08      	it	eq
 8001f5c:	1aed      	subeq	r5, r5, r3
 8001f5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001f62:	bf08      	it	eq
 8001f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bfc4      	itt	gt
 8001f6c:	1a9b      	subgt	r3, r3, r2
 8001f6e:	18ed      	addgt	r5, r5, r3
 8001f70:	42b5      	cmp	r5, r6
 8001f72:	d11a      	bne.n	8001faa <_printf_common+0xd2>
 8001f74:	2000      	movs	r0, #0
 8001f76:	e008      	b.n	8001f8a <_printf_common+0xb2>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4652      	mov	r2, sl
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	4638      	mov	r0, r7
 8001f80:	47c8      	blx	r9
 8001f82:	3001      	adds	r0, #1
 8001f84:	d103      	bne.n	8001f8e <_printf_common+0xb6>
 8001f86:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f8e:	3501      	adds	r5, #1
 8001f90:	e7c1      	b.n	8001f16 <_printf_common+0x3e>
 8001f92:	2030      	movs	r0, #48	@ 0x30
 8001f94:	18e1      	adds	r1, r4, r3
 8001f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001fa0:	4422      	add	r2, r4
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fa8:	e7c2      	b.n	8001f30 <_printf_common+0x58>
 8001faa:	2301      	movs	r3, #1
 8001fac:	4622      	mov	r2, r4
 8001fae:	4641      	mov	r1, r8
 8001fb0:	4638      	mov	r0, r7
 8001fb2:	47c8      	blx	r9
 8001fb4:	3001      	adds	r0, #1
 8001fb6:	d0e6      	beq.n	8001f86 <_printf_common+0xae>
 8001fb8:	3601      	adds	r6, #1
 8001fba:	e7d9      	b.n	8001f70 <_printf_common+0x98>

08001fbc <_printf_i>:
 8001fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc0:	7e0f      	ldrb	r7, [r1, #24]
 8001fc2:	4691      	mov	r9, r2
 8001fc4:	2f78      	cmp	r7, #120	@ 0x78
 8001fc6:	4680      	mov	r8, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	469a      	mov	sl, r3
 8001fcc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fd2:	d807      	bhi.n	8001fe4 <_printf_i+0x28>
 8001fd4:	2f62      	cmp	r7, #98	@ 0x62
 8001fd6:	d80a      	bhi.n	8001fee <_printf_i+0x32>
 8001fd8:	2f00      	cmp	r7, #0
 8001fda:	f000 80d3 	beq.w	8002184 <_printf_i+0x1c8>
 8001fde:	2f58      	cmp	r7, #88	@ 0x58
 8001fe0:	f000 80ba 	beq.w	8002158 <_printf_i+0x19c>
 8001fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fec:	e03a      	b.n	8002064 <_printf_i+0xa8>
 8001fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ff2:	2b15      	cmp	r3, #21
 8001ff4:	d8f6      	bhi.n	8001fe4 <_printf_i+0x28>
 8001ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8001ffc <_printf_i+0x40>)
 8001ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ffc:	08002055 	.word	0x08002055
 8002000:	08002069 	.word	0x08002069
 8002004:	08001fe5 	.word	0x08001fe5
 8002008:	08001fe5 	.word	0x08001fe5
 800200c:	08001fe5 	.word	0x08001fe5
 8002010:	08001fe5 	.word	0x08001fe5
 8002014:	08002069 	.word	0x08002069
 8002018:	08001fe5 	.word	0x08001fe5
 800201c:	08001fe5 	.word	0x08001fe5
 8002020:	08001fe5 	.word	0x08001fe5
 8002024:	08001fe5 	.word	0x08001fe5
 8002028:	0800216b 	.word	0x0800216b
 800202c:	08002093 	.word	0x08002093
 8002030:	08002125 	.word	0x08002125
 8002034:	08001fe5 	.word	0x08001fe5
 8002038:	08001fe5 	.word	0x08001fe5
 800203c:	0800218d 	.word	0x0800218d
 8002040:	08001fe5 	.word	0x08001fe5
 8002044:	08002093 	.word	0x08002093
 8002048:	08001fe5 	.word	0x08001fe5
 800204c:	08001fe5 	.word	0x08001fe5
 8002050:	0800212d 	.word	0x0800212d
 8002054:	6833      	ldr	r3, [r6, #0]
 8002056:	1d1a      	adds	r2, r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6032      	str	r2, [r6, #0]
 800205c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002064:	2301      	movs	r3, #1
 8002066:	e09e      	b.n	80021a6 <_printf_i+0x1ea>
 8002068:	6833      	ldr	r3, [r6, #0]
 800206a:	6820      	ldr	r0, [r4, #0]
 800206c:	1d19      	adds	r1, r3, #4
 800206e:	6031      	str	r1, [r6, #0]
 8002070:	0606      	lsls	r6, r0, #24
 8002072:	d501      	bpl.n	8002078 <_printf_i+0xbc>
 8002074:	681d      	ldr	r5, [r3, #0]
 8002076:	e003      	b.n	8002080 <_printf_i+0xc4>
 8002078:	0645      	lsls	r5, r0, #25
 800207a:	d5fb      	bpl.n	8002074 <_printf_i+0xb8>
 800207c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002080:	2d00      	cmp	r5, #0
 8002082:	da03      	bge.n	800208c <_printf_i+0xd0>
 8002084:	232d      	movs	r3, #45	@ 0x2d
 8002086:	426d      	negs	r5, r5
 8002088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800208c:	230a      	movs	r3, #10
 800208e:	4859      	ldr	r0, [pc, #356]	@ (80021f4 <_printf_i+0x238>)
 8002090:	e011      	b.n	80020b6 <_printf_i+0xfa>
 8002092:	6821      	ldr	r1, [r4, #0]
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	0608      	lsls	r0, r1, #24
 8002098:	f853 5b04 	ldr.w	r5, [r3], #4
 800209c:	d402      	bmi.n	80020a4 <_printf_i+0xe8>
 800209e:	0649      	lsls	r1, r1, #25
 80020a0:	bf48      	it	mi
 80020a2:	b2ad      	uxthmi	r5, r5
 80020a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80020a6:	6033      	str	r3, [r6, #0]
 80020a8:	bf14      	ite	ne
 80020aa:	230a      	movne	r3, #10
 80020ac:	2308      	moveq	r3, #8
 80020ae:	4851      	ldr	r0, [pc, #324]	@ (80021f4 <_printf_i+0x238>)
 80020b0:	2100      	movs	r1, #0
 80020b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020b6:	6866      	ldr	r6, [r4, #4]
 80020b8:	2e00      	cmp	r6, #0
 80020ba:	bfa8      	it	ge
 80020bc:	6821      	ldrge	r1, [r4, #0]
 80020be:	60a6      	str	r6, [r4, #8]
 80020c0:	bfa4      	itt	ge
 80020c2:	f021 0104 	bicge.w	r1, r1, #4
 80020c6:	6021      	strge	r1, [r4, #0]
 80020c8:	b90d      	cbnz	r5, 80020ce <_printf_i+0x112>
 80020ca:	2e00      	cmp	r6, #0
 80020cc:	d04b      	beq.n	8002166 <_printf_i+0x1aa>
 80020ce:	4616      	mov	r6, r2
 80020d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80020d4:	fb03 5711 	mls	r7, r3, r1, r5
 80020d8:	5dc7      	ldrb	r7, [r0, r7]
 80020da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020de:	462f      	mov	r7, r5
 80020e0:	42bb      	cmp	r3, r7
 80020e2:	460d      	mov	r5, r1
 80020e4:	d9f4      	bls.n	80020d0 <_printf_i+0x114>
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d10b      	bne.n	8002102 <_printf_i+0x146>
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	07df      	lsls	r7, r3, #31
 80020ee:	d508      	bpl.n	8002102 <_printf_i+0x146>
 80020f0:	6923      	ldr	r3, [r4, #16]
 80020f2:	6861      	ldr	r1, [r4, #4]
 80020f4:	4299      	cmp	r1, r3
 80020f6:	bfde      	ittt	le
 80020f8:	2330      	movle	r3, #48	@ 0x30
 80020fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002102:	1b92      	subs	r2, r2, r6
 8002104:	6122      	str	r2, [r4, #16]
 8002106:	464b      	mov	r3, r9
 8002108:	4621      	mov	r1, r4
 800210a:	4640      	mov	r0, r8
 800210c:	f8cd a000 	str.w	sl, [sp]
 8002110:	aa03      	add	r2, sp, #12
 8002112:	f7ff fee1 	bl	8001ed8 <_printf_common>
 8002116:	3001      	adds	r0, #1
 8002118:	d14a      	bne.n	80021b0 <_printf_i+0x1f4>
 800211a:	f04f 30ff 	mov.w	r0, #4294967295
 800211e:	b004      	add	sp, #16
 8002120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	f043 0320 	orr.w	r3, r3, #32
 800212a:	6023      	str	r3, [r4, #0]
 800212c:	2778      	movs	r7, #120	@ 0x78
 800212e:	4832      	ldr	r0, [pc, #200]	@ (80021f8 <_printf_i+0x23c>)
 8002130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	6831      	ldr	r1, [r6, #0]
 8002138:	061f      	lsls	r7, r3, #24
 800213a:	f851 5b04 	ldr.w	r5, [r1], #4
 800213e:	d402      	bmi.n	8002146 <_printf_i+0x18a>
 8002140:	065f      	lsls	r7, r3, #25
 8002142:	bf48      	it	mi
 8002144:	b2ad      	uxthmi	r5, r5
 8002146:	6031      	str	r1, [r6, #0]
 8002148:	07d9      	lsls	r1, r3, #31
 800214a:	bf44      	itt	mi
 800214c:	f043 0320 	orrmi.w	r3, r3, #32
 8002150:	6023      	strmi	r3, [r4, #0]
 8002152:	b11d      	cbz	r5, 800215c <_printf_i+0x1a0>
 8002154:	2310      	movs	r3, #16
 8002156:	e7ab      	b.n	80020b0 <_printf_i+0xf4>
 8002158:	4826      	ldr	r0, [pc, #152]	@ (80021f4 <_printf_i+0x238>)
 800215a:	e7e9      	b.n	8002130 <_printf_i+0x174>
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	f023 0320 	bic.w	r3, r3, #32
 8002162:	6023      	str	r3, [r4, #0]
 8002164:	e7f6      	b.n	8002154 <_printf_i+0x198>
 8002166:	4616      	mov	r6, r2
 8002168:	e7bd      	b.n	80020e6 <_printf_i+0x12a>
 800216a:	6833      	ldr	r3, [r6, #0]
 800216c:	6825      	ldr	r5, [r4, #0]
 800216e:	1d18      	adds	r0, r3, #4
 8002170:	6961      	ldr	r1, [r4, #20]
 8002172:	6030      	str	r0, [r6, #0]
 8002174:	062e      	lsls	r6, r5, #24
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	d501      	bpl.n	800217e <_printf_i+0x1c2>
 800217a:	6019      	str	r1, [r3, #0]
 800217c:	e002      	b.n	8002184 <_printf_i+0x1c8>
 800217e:	0668      	lsls	r0, r5, #25
 8002180:	d5fb      	bpl.n	800217a <_printf_i+0x1be>
 8002182:	8019      	strh	r1, [r3, #0]
 8002184:	2300      	movs	r3, #0
 8002186:	4616      	mov	r6, r2
 8002188:	6123      	str	r3, [r4, #16]
 800218a:	e7bc      	b.n	8002106 <_printf_i+0x14a>
 800218c:	6833      	ldr	r3, [r6, #0]
 800218e:	2100      	movs	r1, #0
 8002190:	1d1a      	adds	r2, r3, #4
 8002192:	6032      	str	r2, [r6, #0]
 8002194:	681e      	ldr	r6, [r3, #0]
 8002196:	6862      	ldr	r2, [r4, #4]
 8002198:	4630      	mov	r0, r6
 800219a:	f000 f859 	bl	8002250 <memchr>
 800219e:	b108      	cbz	r0, 80021a4 <_printf_i+0x1e8>
 80021a0:	1b80      	subs	r0, r0, r6
 80021a2:	6060      	str	r0, [r4, #4]
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	6123      	str	r3, [r4, #16]
 80021a8:	2300      	movs	r3, #0
 80021aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021ae:	e7aa      	b.n	8002106 <_printf_i+0x14a>
 80021b0:	4632      	mov	r2, r6
 80021b2:	4649      	mov	r1, r9
 80021b4:	4640      	mov	r0, r8
 80021b6:	6923      	ldr	r3, [r4, #16]
 80021b8:	47d0      	blx	sl
 80021ba:	3001      	adds	r0, #1
 80021bc:	d0ad      	beq.n	800211a <_printf_i+0x15e>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	079b      	lsls	r3, r3, #30
 80021c2:	d413      	bmi.n	80021ec <_printf_i+0x230>
 80021c4:	68e0      	ldr	r0, [r4, #12]
 80021c6:	9b03      	ldr	r3, [sp, #12]
 80021c8:	4298      	cmp	r0, r3
 80021ca:	bfb8      	it	lt
 80021cc:	4618      	movlt	r0, r3
 80021ce:	e7a6      	b.n	800211e <_printf_i+0x162>
 80021d0:	2301      	movs	r3, #1
 80021d2:	4632      	mov	r2, r6
 80021d4:	4649      	mov	r1, r9
 80021d6:	4640      	mov	r0, r8
 80021d8:	47d0      	blx	sl
 80021da:	3001      	adds	r0, #1
 80021dc:	d09d      	beq.n	800211a <_printf_i+0x15e>
 80021de:	3501      	adds	r5, #1
 80021e0:	68e3      	ldr	r3, [r4, #12]
 80021e2:	9903      	ldr	r1, [sp, #12]
 80021e4:	1a5b      	subs	r3, r3, r1
 80021e6:	42ab      	cmp	r3, r5
 80021e8:	dcf2      	bgt.n	80021d0 <_printf_i+0x214>
 80021ea:	e7eb      	b.n	80021c4 <_printf_i+0x208>
 80021ec:	2500      	movs	r5, #0
 80021ee:	f104 0619 	add.w	r6, r4, #25
 80021f2:	e7f5      	b.n	80021e0 <_printf_i+0x224>
 80021f4:	08002363 	.word	0x08002363
 80021f8:	08002374 	.word	0x08002374

080021fc <memmove>:
 80021fc:	4288      	cmp	r0, r1
 80021fe:	b510      	push	{r4, lr}
 8002200:	eb01 0402 	add.w	r4, r1, r2
 8002204:	d902      	bls.n	800220c <memmove+0x10>
 8002206:	4284      	cmp	r4, r0
 8002208:	4623      	mov	r3, r4
 800220a:	d807      	bhi.n	800221c <memmove+0x20>
 800220c:	1e43      	subs	r3, r0, #1
 800220e:	42a1      	cmp	r1, r4
 8002210:	d008      	beq.n	8002224 <memmove+0x28>
 8002212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800221a:	e7f8      	b.n	800220e <memmove+0x12>
 800221c:	4601      	mov	r1, r0
 800221e:	4402      	add	r2, r0
 8002220:	428a      	cmp	r2, r1
 8002222:	d100      	bne.n	8002226 <memmove+0x2a>
 8002224:	bd10      	pop	{r4, pc}
 8002226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800222a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800222e:	e7f7      	b.n	8002220 <memmove+0x24>

08002230 <_sbrk_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	2300      	movs	r3, #0
 8002234:	4d05      	ldr	r5, [pc, #20]	@ (800224c <_sbrk_r+0x1c>)
 8002236:	4604      	mov	r4, r0
 8002238:	4608      	mov	r0, r1
 800223a:	602b      	str	r3, [r5, #0]
 800223c:	f7fe f992 	bl	8000564 <_sbrk>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d102      	bne.n	800224a <_sbrk_r+0x1a>
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	b103      	cbz	r3, 800224a <_sbrk_r+0x1a>
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	bd38      	pop	{r3, r4, r5, pc}
 800224c:	20000284 	.word	0x20000284

08002250 <memchr>:
 8002250:	4603      	mov	r3, r0
 8002252:	b510      	push	{r4, lr}
 8002254:	b2c9      	uxtb	r1, r1
 8002256:	4402      	add	r2, r0
 8002258:	4293      	cmp	r3, r2
 800225a:	4618      	mov	r0, r3
 800225c:	d101      	bne.n	8002262 <memchr+0x12>
 800225e:	2000      	movs	r0, #0
 8002260:	e003      	b.n	800226a <memchr+0x1a>
 8002262:	7804      	ldrb	r4, [r0, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	428c      	cmp	r4, r1
 8002268:	d1f6      	bne.n	8002258 <memchr+0x8>
 800226a:	bd10      	pop	{r4, pc}

0800226c <memcpy>:
 800226c:	440a      	add	r2, r1
 800226e:	4291      	cmp	r1, r2
 8002270:	f100 33ff 	add.w	r3, r0, #4294967295
 8002274:	d100      	bne.n	8002278 <memcpy+0xc>
 8002276:	4770      	bx	lr
 8002278:	b510      	push	{r4, lr}
 800227a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800227e:	4291      	cmp	r1, r2
 8002280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002284:	d1f9      	bne.n	800227a <memcpy+0xe>
 8002286:	bd10      	pop	{r4, pc}

08002288 <_realloc_r>:
 8002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228c:	4680      	mov	r8, r0
 800228e:	4615      	mov	r5, r2
 8002290:	460c      	mov	r4, r1
 8002292:	b921      	cbnz	r1, 800229e <_realloc_r+0x16>
 8002294:	4611      	mov	r1, r2
 8002296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800229a:	f7ff bc39 	b.w	8001b10 <_malloc_r>
 800229e:	b92a      	cbnz	r2, 80022ac <_realloc_r+0x24>
 80022a0:	f7ff fbcc 	bl	8001a3c <_free_r>
 80022a4:	2400      	movs	r4, #0
 80022a6:	4620      	mov	r0, r4
 80022a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ac:	f000 f81a 	bl	80022e4 <_malloc_usable_size_r>
 80022b0:	4285      	cmp	r5, r0
 80022b2:	4606      	mov	r6, r0
 80022b4:	d802      	bhi.n	80022bc <_realloc_r+0x34>
 80022b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80022ba:	d8f4      	bhi.n	80022a6 <_realloc_r+0x1e>
 80022bc:	4629      	mov	r1, r5
 80022be:	4640      	mov	r0, r8
 80022c0:	f7ff fc26 	bl	8001b10 <_malloc_r>
 80022c4:	4607      	mov	r7, r0
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d0ec      	beq.n	80022a4 <_realloc_r+0x1c>
 80022ca:	42b5      	cmp	r5, r6
 80022cc:	462a      	mov	r2, r5
 80022ce:	4621      	mov	r1, r4
 80022d0:	bf28      	it	cs
 80022d2:	4632      	movcs	r2, r6
 80022d4:	f7ff ffca 	bl	800226c <memcpy>
 80022d8:	4621      	mov	r1, r4
 80022da:	4640      	mov	r0, r8
 80022dc:	f7ff fbae 	bl	8001a3c <_free_r>
 80022e0:	463c      	mov	r4, r7
 80022e2:	e7e0      	b.n	80022a6 <_realloc_r+0x1e>

080022e4 <_malloc_usable_size_r>:
 80022e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022e8:	1f18      	subs	r0, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bfbc      	itt	lt
 80022ee:	580b      	ldrlt	r3, [r1, r0]
 80022f0:	18c0      	addlt	r0, r0, r3
 80022f2:	4770      	bx	lr

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr
