
USR-K7-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002308  08002308  00003308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800238c  0800238c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0000338c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002390  08002390  00003390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002394  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  080023f0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080023f0  00004294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c33  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014db  00000000  00000000  0000acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c0  00000000  00000000  0000c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017161  00000000  00000000  0000cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000834e  00000000  00000000  00023e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f66  00000000  00000000  0002c14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  000ae0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000afe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022f0 	.word	0x080022f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080022f0 	.word	0x080022f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <USRK7_transmit>:

UART_HandleTypeDef *USRK7_UART;
char USRK7_BUFFER[USRK7_BUFFER_SIZE];
char USRK7_COMMAND[USRK7_COMMAND_SIZE];

static void USRK7_transmit(const char *command, int timeout) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(USRK7_UART, (uint8_t*) command, strlen(command), timeout);
 8000166:	4b08      	ldr	r3, [pc, #32]	@ (8000188 <USRK7_transmit+0x2c>)
 8000168:	681c      	ldr	r4, [r3, #0]
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f7ff ffee 	bl	800014c <strlen>
 8000170:	4603      	mov	r3, r0
 8000172:	b29a      	uxth	r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	6879      	ldr	r1, [r7, #4]
 8000178:	4620      	mov	r0, r4
 800017a:	f001 f9d3 	bl	8001524 <HAL_UART_Transmit>
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bd90      	pop	{r4, r7, pc}
 8000186:	bf00      	nop
 8000188:	20000078 	.word	0x20000078

0800018c <USRK7_receive>:

static void USRK7_receive(int timeout) {
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	sprintf(USRK7_BUFFER, "");
 8000194:	4907      	ldr	r1, [pc, #28]	@ (80001b4 <USRK7_receive+0x28>)
 8000196:	4808      	ldr	r0, [pc, #32]	@ (80001b8 <USRK7_receive+0x2c>)
 8000198:	f001 fbd6 	bl	8001948 <siprintf>
	HAL_UART_Receive(USRK7_UART, (uint8_t*) USRK7_BUFFER, USRK7_BUFFER_SIZE,
 800019c:	4b07      	ldr	r3, [pc, #28]	@ (80001bc <USRK7_receive+0x30>)
 800019e:	6818      	ldr	r0, [r3, #0]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2240      	movs	r2, #64	@ 0x40
 80001a4:	4904      	ldr	r1, [pc, #16]	@ (80001b8 <USRK7_receive+0x2c>)
 80001a6:	f001 fa40 	bl	800162a <HAL_UART_Receive>
			timeout);
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	08002308 	.word	0x08002308
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	20000078 	.word	0x20000078

080001c0 <USRK7_transmit_receive>:

static void USRK7_transmit_receive(const char *command, int tTimeout,
		int rTimeout) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	60f8      	str	r0, [r7, #12]
 80001c8:	60b9      	str	r1, [r7, #8]
 80001ca:	607a      	str	r2, [r7, #4]
	USRK7_transmit(command, tTimeout);
 80001cc:	68b9      	ldr	r1, [r7, #8]
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f7ff ffc4 	bl	800015c <USRK7_transmit>
	USRK7_receive(rTimeout);
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f7ff ffd9 	bl	800018c <USRK7_receive>
}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
	...

080001e4 <USRK7_init>:

int USRK7_init(UART_HandleTypeDef *uart) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	USRK7_UART = uart;
 80001ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000264 <USRK7_init+0x80>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6013      	str	r3, [r2, #0]

	sprintf(USRK7_COMMAND, "+++");
 80001f2:	491d      	ldr	r1, [pc, #116]	@ (8000268 <USRK7_init+0x84>)
 80001f4:	481d      	ldr	r0, [pc, #116]	@ (800026c <USRK7_init+0x88>)
 80001f6:	f001 fba7 	bl	8001948 <siprintf>
	USRK7_transmit(USRK7_COMMAND, 3000);
 80001fa:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001fe:	481b      	ldr	r0, [pc, #108]	@ (800026c <USRK7_init+0x88>)
 8000200:	f7ff ffac 	bl	800015c <USRK7_transmit>
	USRK7_receive(200);
 8000204:	20c8      	movs	r0, #200	@ 0xc8
 8000206:	f7ff ffc1 	bl	800018c <USRK7_receive>

	if (strstr(USRK7_BUFFER, "a")) {
 800020a:	2161      	movs	r1, #97	@ 0x61
 800020c:	4818      	ldr	r0, [pc, #96]	@ (8000270 <USRK7_init+0x8c>)
 800020e:	f001 fbc3 	bl	8001998 <strchr>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d01e      	beq.n	8000256 <USRK7_init+0x72>
		sprintf(USRK7_COMMAND, "a");
 8000218:	4916      	ldr	r1, [pc, #88]	@ (8000274 <USRK7_init+0x90>)
 800021a:	4814      	ldr	r0, [pc, #80]	@ (800026c <USRK7_init+0x88>)
 800021c:	f001 fb94 	bl	8001948 <siprintf>
		USRK7_transmit(USRK7_COMMAND, 1000);
 8000220:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000224:	4811      	ldr	r0, [pc, #68]	@ (800026c <USRK7_init+0x88>)
 8000226:	f7ff ff99 	bl	800015c <USRK7_transmit>

		// Step 4: Wait for '+ok' response
		USRK7_receive(3000);
 800022a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800022e:	f7ff ffad 	bl	800018c <USRK7_receive>
		if (strstr(USRK7_BUFFER, "+ok")) {
 8000232:	4911      	ldr	r1, [pc, #68]	@ (8000278 <USRK7_init+0x94>)
 8000234:	480e      	ldr	r0, [pc, #56]	@ (8000270 <USRK7_init+0x8c>)
 8000236:	f001 fbbc 	bl	80019b2 <strstr>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d00a      	beq.n	8000256 <USRK7_init+0x72>
			sprintf(USRK7_COMMAND, "AT+VER\r\n");
 8000240:	490e      	ldr	r1, [pc, #56]	@ (800027c <USRK7_init+0x98>)
 8000242:	480a      	ldr	r0, [pc, #40]	@ (800026c <USRK7_init+0x88>)
 8000244:	f001 fb80 	bl	8001948 <siprintf>
			USRK7_transmit_receive(USRK7_COMMAND, 200, 200);
 8000248:	22c8      	movs	r2, #200	@ 0xc8
 800024a:	21c8      	movs	r1, #200	@ 0xc8
 800024c:	4807      	ldr	r0, [pc, #28]	@ (800026c <USRK7_init+0x88>)
 800024e:	f7ff ffb7 	bl	80001c0 <USRK7_transmit_receive>

			return 0; // Initialization successful
 8000252:	2300      	movs	r3, #0
 8000254:	e001      	b.n	800025a <USRK7_init+0x76>
		}
	}

	return -1; // Initialization failed
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800025a:	4618      	mov	r0, r3
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000078 	.word	0x20000078
 8000268:	0800230c 	.word	0x0800230c
 800026c:	200000bc 	.word	0x200000bc
 8000270:	2000007c 	.word	0x2000007c
 8000274:	08002310 	.word	0x08002310
 8000278:	08002314 	.word	0x08002314
 800027c:	08002318 	.word	0x08002318

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 f9ce 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f816 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f87a 	bl	8000384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f84e 	bl	8000330 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USRK7_init(&huart2);
 8000294:	4806      	ldr	r0, [pc, #24]	@ (80002b0 <main+0x30>)
 8000296:	f7ff ffa5 	bl	80001e4 <USRK7_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800029a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <main+0x34>)
 80002a0:	f000 fcc6 	bl	8000c30 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80002a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002a8:	f000 fa1e 	bl	80006e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002ac:	bf00      	nop
 80002ae:	e7f4      	b.n	800029a <main+0x1a>
 80002b0:	200000fc 	.word	0x200000fc
 80002b4:	40011000 	.word	0x40011000

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fb5e 	bl	8001988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fcb8 	bl	8000c64 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fa:	f000 f883 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f000 ff26 	bl	8001168 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f86f 	bl	8000404 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	@ 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000334:	4b11      	ldr	r3, [pc, #68]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	@ (8000380 <MX_USART2_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033a:	4b10      	ldr	r3, [pc, #64]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	@ (800037c <MX_USART2_UART_Init+0x4c>)
 8000368:	f001 f88c 	bl	8001484 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f847 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000fc 	.word	0x200000fc
 8000380:	40004400 	.word	0x40004400

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_GPIO_Init+0x78>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a17      	ldr	r2, [pc, #92]	@ (80003fc <MX_GPIO_Init+0x78>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_GPIO_Init+0x78>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_GPIO_Init+0x78>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a11      	ldr	r2, [pc, #68]	@ (80003fc <MX_GPIO_Init+0x78>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_GPIO_Init+0x78>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ce:	480c      	ldr	r0, [pc, #48]	@ (8000400 <MX_GPIO_Init+0x7c>)
 80003d0:	f000 fc16 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	4804      	ldr	r0, [pc, #16]	@ (8000400 <MX_GPIO_Init+0x7c>)
 80003ee:	f000 fa83 	bl	80008f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40011000 	.word	0x40011000

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <Error_Handler+0x8>

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a14      	ldr	r2, [pc, #80]	@ (800046c <HAL_MspInit+0x5c>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b12      	ldr	r3, [pc, #72]	@ (800046c <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <HAL_MspInit+0x5c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000446:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <HAL_MspInit+0x60>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <HAL_MspInit+0x60>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a1b      	ldr	r2, [pc, #108]	@ (80004fc <HAL_UART_MspInit+0x88>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d12f      	bne.n	80004f4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000494:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	4a19      	ldr	r2, [pc, #100]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 800049a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049e:	61d3      	str	r3, [r2, #28]
 80004a0:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a13      	ldr	r2, [pc, #76]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004c4:	2304      	movs	r3, #4
 80004c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	480b      	ldr	r0, [pc, #44]	@ (8000504 <HAL_UART_MspInit+0x90>)
 80004d8:	f000 fa0e 	bl	80008f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004dc:	2308      	movs	r3, #8
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <HAL_UART_MspInit+0x90>)
 80004f0:	f000 fa02 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40004400 	.word	0x40004400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <NMI_Handler+0x4>

08000510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <MemManage_Handler+0x4>

08000520 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <UsageFault_Handler+0x4>

08000530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f8aa 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f001 fa26 	bl	80019e0 <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <_sbrk+0x64>)
 80005b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20005000 	.word	0x20005000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	20000144 	.word	0x20000144
 80005c8:	20000298 	.word	0x20000298

080005cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d8:	f7ff fff8 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005de:	490c      	ldr	r1, [pc, #48]	@ (8000610 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f4:	4c09      	ldr	r4, [pc, #36]	@ (800061c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000602:	f001 f9f3 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fe3b 	bl	8000280 <main>
  bx lr
 800060a:	4770      	bx	lr
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000614:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 8000618:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800061c:	20000294 	.word	0x20000294

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <HAL_Init+0x28>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	@ (800064c <HAL_Init+0x28>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f92b 	bl	8000890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	200f      	movs	r0, #15
 800063c:	f000 f808 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff fee6 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <HAL_InitTick+0x54>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_InitTick+0x58>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000666:	fbb3 f3f1 	udiv	r3, r3, r1
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f935 	bl	80008de <HAL_SYSTICK_Config>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e00e      	b.n	800069c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d80a      	bhi.n	800069a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000684:	2200      	movs	r2, #0
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f04f 30ff 	mov.w	r0, #4294967295
 800068c:	f000 f90b 	bl	80008a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000690:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <HAL_InitTick+0x5c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_IncTick+0x1c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <HAL_IncTick+0x20>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a03      	ldr	r2, [pc, #12]	@ (80006d0 <HAL_IncTick+0x20>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000148 	.word	0x20000148

080006d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b02      	ldr	r3, [pc, #8]	@ (80006e4 <HAL_GetTick+0x10>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000148 	.word	0x20000148

080006e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f0:	f7ff fff0 	bl	80006d4 <HAL_GetTick>
 80006f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000700:	d005      	beq.n	800070e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_Delay+0x44>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4413      	add	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800070e:	bf00      	nop
 8000710:	f7ff ffe0 	bl	80006d4 <HAL_GetTick>
 8000714:	4602      	mov	r2, r0
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8f7      	bhi.n	8000710 <HAL_Delay+0x28>
  {
  }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008

08000730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800075c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000762:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	60d3      	str	r3, [r2, #12]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <__NVIC_GetPriorityGrouping+0x18>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	f003 0307 	and.w	r3, r3, #7
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f1c3 0307 	rsb	r3, r3, #7
 8000802:	2b04      	cmp	r3, #4
 8000804:	bf28      	it	cs
 8000806:	2304      	movcs	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3304      	adds	r3, #4
 800080e:	2b06      	cmp	r3, #6
 8000810:	d902      	bls.n	8000818 <NVIC_EncodePriority+0x30>
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3b03      	subs	r3, #3
 8000816:	e000      	b.n	800081a <NVIC_EncodePriority+0x32>
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43da      	mvns	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	401a      	ands	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43d9      	mvns	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	4313      	orrs	r3, r2
         );
}
 8000842:	4618      	mov	r0, r3
 8000844:	3724      	adds	r7, #36	@ 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800085c:	d301      	bcc.n	8000862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085e:	2301      	movs	r3, #1
 8000860:	e00f      	b.n	8000882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <SysTick_Config+0x40>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086a:	210f      	movs	r1, #15
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f7ff ff90 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <SysTick_Config+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087a:	4b04      	ldr	r3, [pc, #16]	@ (800088c <SysTick_Config+0x40>)
 800087c:	2207      	movs	r2, #7
 800087e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010

08000890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff49 	bl	8000730 <__NVIC_SetPriorityGrouping>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b8:	f7ff ff5e 	bl	8000778 <__NVIC_GetPriorityGrouping>
 80008bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f7ff ff90 	bl	80007e8 <NVIC_EncodePriority>
 80008c8:	4602      	mov	r2, r0
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff5f 	bl	8000794 <__NVIC_SetPriority>
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffb0 	bl	800084c <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	@ 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e169      	b.n	8000be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800090c:	2201      	movs	r2, #1
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	429a      	cmp	r2, r3
 8000926:	f040 8158 	bne.w	8000bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d05e      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000934:	4a98      	ldr	r2, [pc, #608]	@ (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d875      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 800093a:	4a98      	ldr	r2, [pc, #608]	@ (8000b9c <HAL_GPIO_Init+0x2a4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d058      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000940:	4a96      	ldr	r2, [pc, #600]	@ (8000b9c <HAL_GPIO_Init+0x2a4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d86f      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 8000946:	4a96      	ldr	r2, [pc, #600]	@ (8000ba0 <HAL_GPIO_Init+0x2a8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d052      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 800094c:	4a94      	ldr	r2, [pc, #592]	@ (8000ba0 <HAL_GPIO_Init+0x2a8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d869      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 8000952:	4a94      	ldr	r2, [pc, #592]	@ (8000ba4 <HAL_GPIO_Init+0x2ac>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d04c      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000958:	4a92      	ldr	r2, [pc, #584]	@ (8000ba4 <HAL_GPIO_Init+0x2ac>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d863      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 800095e:	4a92      	ldr	r2, [pc, #584]	@ (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d046      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000964:	4a90      	ldr	r2, [pc, #576]	@ (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d85d      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 800096a:	2b12      	cmp	r3, #18
 800096c:	d82a      	bhi.n	80009c4 <HAL_GPIO_Init+0xcc>
 800096e:	2b12      	cmp	r3, #18
 8000970:	d859      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 8000972:	a201      	add	r2, pc, #4	@ (adr r2, 8000978 <HAL_GPIO_Init+0x80>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009f3 	.word	0x080009f3
 800097c:	080009cd 	.word	0x080009cd
 8000980:	080009df 	.word	0x080009df
 8000984:	08000a21 	.word	0x08000a21
 8000988:	08000a27 	.word	0x08000a27
 800098c:	08000a27 	.word	0x08000a27
 8000990:	08000a27 	.word	0x08000a27
 8000994:	08000a27 	.word	0x08000a27
 8000998:	08000a27 	.word	0x08000a27
 800099c:	08000a27 	.word	0x08000a27
 80009a0:	08000a27 	.word	0x08000a27
 80009a4:	08000a27 	.word	0x08000a27
 80009a8:	08000a27 	.word	0x08000a27
 80009ac:	08000a27 	.word	0x08000a27
 80009b0:	08000a27 	.word	0x08000a27
 80009b4:	08000a27 	.word	0x08000a27
 80009b8:	08000a27 	.word	0x08000a27
 80009bc:	080009d5 	.word	0x080009d5
 80009c0:	080009e9 	.word	0x080009e9
 80009c4:	4a79      	ldr	r2, [pc, #484]	@ (8000bac <HAL_GPIO_Init+0x2b4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ca:	e02c      	b.n	8000a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e029      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	3304      	adds	r3, #4
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e024      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	3308      	adds	r3, #8
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e01f      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	330c      	adds	r3, #12
 80009ee:	623b      	str	r3, [r7, #32]
          break;
 80009f0:	e01a      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fa:	2304      	movs	r3, #4
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e013      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d105      	bne.n	8000a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	611a      	str	r2, [r3, #16]
          break;
 8000a12:	e009      	b.n	8000a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a14:	2308      	movs	r3, #8
 8000a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	615a      	str	r2, [r3, #20]
          break;
 8000a1e:	e003      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          break;
 8000a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	2bff      	cmp	r3, #255	@ 0xff
 8000a2c:	d801      	bhi.n	8000a32 <HAL_GPIO_Init+0x13a>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	e001      	b.n	8000a36 <HAL_GPIO_Init+0x13e>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3304      	adds	r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d802      	bhi.n	8000a44 <HAL_GPIO_Init+0x14c>
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x152>
 8000a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a46:	3b08      	subs	r3, #8
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	210f      	movs	r1, #15
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	6a39      	ldr	r1, [r7, #32]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80b1 	beq.w	8000bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a78:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb0 <HAL_GPIO_Init+0x2b8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb0 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <HAL_GPIO_Init+0x2b8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a90:	4a48      	ldr	r2, [pc, #288]	@ (8000bb4 <HAL_GPIO_Init+0x2bc>)
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a40      	ldr	r2, [pc, #256]	@ (8000bb8 <HAL_GPIO_Init+0x2c0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d013      	beq.n	8000ae4 <HAL_GPIO_Init+0x1ec>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a3f      	ldr	r2, [pc, #252]	@ (8000bbc <HAL_GPIO_Init+0x2c4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00d      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e8>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc0 <HAL_GPIO_Init+0x2c8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x1e4>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc4 <HAL_GPIO_Init+0x2cc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_GPIO_Init+0x1e0>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	e004      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae8:	f002 0203 	and.w	r2, r2, #3
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	4093      	lsls	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af6:	492f      	ldr	r1, [pc, #188]	@ (8000bb4 <HAL_GPIO_Init+0x2bc>)
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b10:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	492c      	ldr	r1, [pc, #176]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	608b      	str	r3, [r1, #8]
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4928      	ldr	r1, [pc, #160]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b38:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	4922      	ldr	r1, [pc, #136]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60cb      	str	r3, [r1, #12]
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	491e      	ldr	r1, [pc, #120]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d006      	beq.n	8000b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	4918      	ldr	r1, [pc, #96]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4914      	ldr	r1, [pc, #80]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d021      	beq.n	8000bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	490e      	ldr	r1, [pc, #56]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
 8000b94:	e021      	b.n	8000bda <HAL_GPIO_Init+0x2e2>
 8000b96:	bf00      	nop
 8000b98:	10320000 	.word	0x10320000
 8000b9c:	10310000 	.word	0x10310000
 8000ba0:	10220000 	.word	0x10220000
 8000ba4:	10210000 	.word	0x10210000
 8000ba8:	10120000 	.word	0x10120000
 8000bac:	10110000 	.word	0x10110000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40011400 	.word	0x40011400
 8000bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_GPIO_Init+0x304>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4909      	ldr	r1, [pc, #36]	@ (8000bfc <HAL_GPIO_Init+0x304>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bdc:	3301      	adds	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f ae8e 	bne.w	800090c <HAL_GPIO_Init+0x14>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	372c      	adds	r7, #44	@ 0x2c
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	611a      	str	r2, [r3, #16]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	041a      	lsls	r2, r3, #16
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43d9      	mvns	r1, r3
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	400b      	ands	r3, r1
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e272      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8087 	beq.w	8000d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c84:	4b92      	ldr	r3, [pc, #584]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 030c 	and.w	r3, r3, #12
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d00c      	beq.n	8000caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c90:	4b8f      	ldr	r3, [pc, #572]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d112      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x5e>
 8000c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000caa:	4b89      	ldr	r3, [pc, #548]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d06c      	beq.n	8000d90 <HAL_RCC_OscConfig+0x12c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d168      	bne.n	8000d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e24c      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cca:	d106      	bne.n	8000cda <HAL_RCC_OscConfig+0x76>
 8000ccc:	4b80      	ldr	r3, [pc, #512]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e02e      	b.n	8000d38 <HAL_RCC_OscConfig+0xd4>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0x98>
 8000ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b78      	ldr	r3, [pc, #480]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a77      	ldr	r2, [pc, #476]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e01d      	b.n	8000d38 <HAL_RCC_OscConfig+0xd4>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0xbc>
 8000d06:	4b72      	ldr	r3, [pc, #456]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a71      	ldr	r2, [pc, #452]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6e      	ldr	r2, [pc, #440]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e00b      	b.n	8000d38 <HAL_RCC_OscConfig+0xd4>
 8000d20:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b68      	ldr	r3, [pc, #416]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a67      	ldr	r2, [pc, #412]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d013      	beq.n	8000d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d40:	f7ff fcc8 	bl	80006d4 <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fcc4 	bl	80006d4 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	@ 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e200      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0xe4>
 8000d66:	e014      	b.n	8000d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fcb4 	bl	80006d4 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fcb0 	bl	80006d4 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	@ 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e1ec      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d82:	4b53      	ldr	r3, [pc, #332]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x10c>
 8000d8e:	e000      	b.n	8000d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d063      	beq.n	8000e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000daa:	4b49      	ldr	r3, [pc, #292]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d11c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x18c>
 8000db6:	4b46      	ldr	r3, [pc, #280]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d116      	bne.n	8000df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_RCC_OscConfig+0x176>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d001      	beq.n	8000dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e1c0      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dda:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4939      	ldr	r1, [pc, #228]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	e03a      	b.n	8000e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d020      	beq.n	8000e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df8:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fc69 	bl	80006d4 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e06:	f7ff fc65 	bl	80006d4 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e1a1      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f0      	beq.n	8000e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	4927      	ldr	r1, [pc, #156]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	4313      	orrs	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	e015      	b.n	8000e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <HAL_RCC_OscConfig+0x270>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fc48 	bl	80006d4 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e48:	f7ff fc44 	bl	80006d4 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e180      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d03a      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d019      	beq.n	8000eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <HAL_RCC_OscConfig+0x274>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e80:	f7ff fc28 	bl	80006d4 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc24 	bl	80006d4 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e160      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f0      	beq.n	8000e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 face 	bl	8001448 <RCC_Delay>
 8000eac:	e01c      	b.n	8000ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_RCC_OscConfig+0x274>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fc0e 	bl	80006d4 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eba:	e00f      	b.n	8000edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fc0a 	bl	80006d4 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d908      	bls.n	8000edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e146      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	42420000 	.word	0x42420000
 8000ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000edc:	4b92      	ldr	r3, [pc, #584]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1e9      	bne.n	8000ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80a6 	beq.w	8001042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efa:	4b8b      	ldr	r3, [pc, #556]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10d      	bne.n	8000f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b88      	ldr	r3, [pc, #544]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a87      	ldr	r2, [pc, #540]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b85      	ldr	r3, [pc, #532]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f22:	4b82      	ldr	r3, [pc, #520]	@ (800112c <HAL_RCC_OscConfig+0x4c8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d118      	bne.n	8000f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800112c <HAL_RCC_OscConfig+0x4c8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a7e      	ldr	r2, [pc, #504]	@ (800112c <HAL_RCC_OscConfig+0x4c8>)
 8000f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fbcb 	bl	80006d4 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f42:	f7ff fbc7 	bl	80006d4 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b64      	cmp	r3, #100	@ 0x64
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e103      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f54:	4b75      	ldr	r3, [pc, #468]	@ (800112c <HAL_RCC_OscConfig+0x4c8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d106      	bne.n	8000f76 <HAL_RCC_OscConfig+0x312>
 8000f68:	4b6f      	ldr	r3, [pc, #444]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6213      	str	r3, [r2, #32]
 8000f74:	e02d      	b.n	8000fd2 <HAL_RCC_OscConfig+0x36e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x334>
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4a69      	ldr	r2, [pc, #420]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	6213      	str	r3, [r2, #32]
 8000f8a:	4b67      	ldr	r3, [pc, #412]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a66      	ldr	r2, [pc, #408]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 0304 	bic.w	r3, r3, #4
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	e01c      	b.n	8000fd2 <HAL_RCC_OscConfig+0x36e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d10c      	bne.n	8000fba <HAL_RCC_OscConfig+0x356>
 8000fa0:	4b61      	ldr	r3, [pc, #388]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4a60      	ldr	r2, [pc, #384]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6213      	str	r3, [r2, #32]
 8000fac:	4b5e      	ldr	r3, [pc, #376]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6213      	str	r3, [r2, #32]
 8000fb8:	e00b      	b.n	8000fd2 <HAL_RCC_OscConfig+0x36e>
 8000fba:	4b5b      	ldr	r3, [pc, #364]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	4b58      	ldr	r3, [pc, #352]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a57      	ldr	r2, [pc, #348]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb7b 	bl	80006d4 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb77 	bl	80006d4 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e0b1      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0ee      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x37e>
 8001004:	e014      	b.n	8001030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001006:	f7ff fb65 	bl	80006d4 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100c:	e00a      	b.n	8001024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100e:	f7ff fb61 	bl	80006d4 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800101c:	4293      	cmp	r3, r2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e09b      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001024:	4b40      	ldr	r3, [pc, #256]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ee      	bne.n	800100e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d105      	bne.n	8001042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001036:	4b3c      	ldr	r3, [pc, #240]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a3b      	ldr	r2, [pc, #236]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8087 	beq.w	800115a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	d061      	beq.n	800111c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d146      	bne.n	80010ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001060:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <HAL_RCC_OscConfig+0x4cc>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fb35 	bl	80006d4 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106e:	f7ff fb31 	bl	80006d4 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e06d      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001080:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f0      	bne.n	800106e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001094:	d108      	bne.n	80010a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	4921      	ldr	r1, [pc, #132]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a19      	ldr	r1, [r3, #32]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	430b      	orrs	r3, r1
 80010ba:	491b      	ldr	r1, [pc, #108]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <HAL_RCC_OscConfig+0x4cc>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb05 	bl	80006d4 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fb01 	bl	80006d4 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e03d      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x46a>
 80010ec:	e035      	b.n	800115a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_RCC_OscConfig+0x4cc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff faee 	bl	80006d4 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff faea 	bl	80006d4 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e026      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x498>
 800111a:	e01e      	b.n	800115a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d107      	bne.n	8001134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e019      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
 8001128:	40021000 	.word	0x40021000
 800112c:	40007000 	.word	0x40007000
 8001130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_RCC_OscConfig+0x500>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	429a      	cmp	r2, r3
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001152:	429a      	cmp	r2, r3
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0d0      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800117c:	4b6a      	ldr	r3, [pc, #424]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d910      	bls.n	80011ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b67      	ldr	r3, [pc, #412]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0207 	bic.w	r2, r3, #7
 8001192:	4965      	ldr	r1, [pc, #404]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119a:	4b63      	ldr	r3, [pc, #396]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0b8      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d020      	beq.n	80011fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c4:	4b59      	ldr	r3, [pc, #356]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a58      	ldr	r2, [pc, #352]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011dc:	4b53      	ldr	r3, [pc, #332]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a52      	ldr	r2, [pc, #328]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e8:	4b50      	ldr	r3, [pc, #320]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	494d      	ldr	r1, [pc, #308]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d040      	beq.n	8001288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d115      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e07f      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	4b41      	ldr	r3, [pc, #260]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d109      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e073      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	4b3d      	ldr	r3, [pc, #244]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e06b      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f023 0203 	bic.w	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4936      	ldr	r1, [pc, #216]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001258:	f7ff fa3c 	bl	80006d4 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	e00a      	b.n	8001276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001260:	f7ff fa38 	bl	80006d4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e053      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 020c 	and.w	r2, r3, #12
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	429a      	cmp	r2, r3
 8001286:	d1eb      	bne.n	8001260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d210      	bcs.n	80012b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 0207 	bic.w	r2, r3, #7
 800129e:	4922      	ldr	r1, [pc, #136]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e032      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4916      	ldr	r1, [pc, #88]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	490e      	ldr	r1, [pc, #56]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012f6:	f000 f821 	bl	800133c <HAL_RCC_GetSysClockFreq>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	490a      	ldr	r1, [pc, #40]	@ (8001330 <HAL_RCC_ClockConfig+0x1c8>)
 8001308:	5ccb      	ldrb	r3, [r1, r3]
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_RCC_ClockConfig+0x1cc>)
 8001310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_RCC_ClockConfig+0x1d0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f99a 	bl	8000650 <HAL_InitTick>

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40022000 	.word	0x40022000
 800132c:	40021000 	.word	0x40021000
 8001330:	08002324 	.word	0x08002324
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d002      	beq.n	800136c <HAL_RCC_GetSysClockFreq+0x30>
 8001366:	2b08      	cmp	r3, #8
 8001368:	d003      	beq.n	8001372 <HAL_RCC_GetSysClockFreq+0x36>
 800136a:	e027      	b.n	80013bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800136e:	613b      	str	r3, [r7, #16]
      break;
 8001370:	e027      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	0c9b      	lsrs	r3, r3, #18
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	0c5b      	lsrs	r3, r3, #17
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800139e:	fb03 f202 	mul.w	r2, r3, r2
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e004      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a0c      	ldr	r2, [pc, #48]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	613b      	str	r3, [r7, #16]
      break;
 80013ba:	e002      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80013be:	613b      	str	r3, [r7, #16]
      break;
 80013c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013c2:	693b      	ldr	r3, [r7, #16]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	007a1200 	.word	0x007a1200
 80013d8:	0800233c 	.word	0x0800233c
 80013dc:	0800234c 	.word	0x0800234c
 80013e0:	003d0900 	.word	0x003d0900

080013e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e8:	4b02      	ldr	r3, [pc, #8]	@ (80013f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000000 	.word	0x20000000

080013f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013fc:	f7ff fff2 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	4903      	ldr	r1, [pc, #12]	@ (800141c <HAL_RCC_GetPCLK1Freq+0x24>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	08002334 	.word	0x08002334

08001420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001424:	f7ff ffde 	bl	80013e4 <HAL_RCC_GetHCLKFreq>
 8001428:	4602      	mov	r2, r0
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	0adb      	lsrs	r3, r3, #11
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	4903      	ldr	r1, [pc, #12]	@ (8001444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	08002334 	.word	0x08002334

08001448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <RCC_Delay+0x34>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <RCC_Delay+0x38>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0a5b      	lsrs	r3, r3, #9
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001464:	bf00      	nop
  }
  while (Delay --);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	60fa      	str	r2, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f9      	bne.n	8001464 <RCC_Delay+0x1c>
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000
 8001480:	10624dd3 	.word	0x10624dd3

08001484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e042      	b.n	800151c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe ffe2 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f9af 	bl	800182c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2220      	movs	r2, #32
 8001510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b20      	cmp	r3, #32
 8001542:	d16d      	bne.n	8001620 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_UART_Transmit+0x2c>
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e066      	b.n	8001622 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2221      	movs	r2, #33	@ 0x21
 800155e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001562:	f7ff f8b7 	bl	80006d4 <HAL_GetTick>
 8001566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800157c:	d108      	bne.n	8001590 <HAL_UART_Transmit+0x6c>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	e003      	b.n	8001598 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001598:	e02a      	b.n	80015f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2200      	movs	r2, #0
 80015a2:	2180      	movs	r1, #128	@ 0x80
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 f8d2 	bl	800174e <UART_WaitOnFlagUntilTimeout>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e036      	b.n	8001622 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10b      	bne.n	80015d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3302      	adds	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	e007      	b.n	80015e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	3301      	adds	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1cf      	bne.n	800159a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2200      	movs	r2, #0
 8001602:	2140      	movs	r1, #64	@ 0x40
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f8a2 	bl	800174e <UART_WaitOnFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e006      	b.n	8001622 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	e000      	b.n	8001622 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001620:	2302      	movs	r3, #2
  }
}
 8001622:	4618      	mov	r0, r3
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b08a      	sub	sp, #40	@ 0x28
 800162e:	af02      	add	r7, sp, #8
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4613      	mov	r3, r2
 8001638:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b20      	cmp	r3, #32
 8001648:	d17c      	bne.n	8001744 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_UART_Receive+0x2c>
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e075      	b.n	8001746 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2222      	movs	r2, #34	@ 0x22
 8001664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800166e:	f7ff f831 	bl	80006d4 <HAL_GetTick>
 8001672:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	88fa      	ldrh	r2, [r7, #6]
 8001678:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	88fa      	ldrh	r2, [r7, #6]
 800167e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001688:	d108      	bne.n	800169c <HAL_UART_Receive+0x72>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d104      	bne.n	800169c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	e003      	b.n	80016a4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80016a4:	e043      	b.n	800172e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f84c 	bl	800174e <UART_WaitOnFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e042      	b.n	8001746 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	3302      	adds	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	e01f      	b.n	8001720 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016e8:	d007      	beq.n	80016fa <HAL_UART_Receive+0xd0>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10a      	bne.n	8001708 <HAL_UART_Receive+0xde>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e008      	b.n	800171a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001714:	b2da      	uxtb	r2, r3
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3301      	adds	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001724:	b29b      	uxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1b6      	bne.n	80016a6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2220      	movs	r2, #32
 800173c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
  }
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b090      	sub	sp, #64	@ 0x40
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4613      	mov	r3, r2
 800175c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800175e:	e050      	b.n	8001802 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001766:	d04c      	beq.n	8001802 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <UART_WaitOnFlagUntilTimeout+0x30>
 800176e:	f7fe ffb1 	bl	80006d4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800177a:	429a      	cmp	r2, r3
 800177c:	d241      	bcs.n	8001802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	330c      	adds	r3, #12
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	e853 3f00 	ldrex	r3, [r3]
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	330c      	adds	r3, #12
 800179c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800179e:	637a      	str	r2, [r7, #52]	@ 0x34
 80017a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017a6:	e841 2300 	strex	r3, r2, [r1]
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e5      	bne.n	800177e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3314      	adds	r3, #20
 80017b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	e853 3f00 	ldrex	r3, [r3]
 80017c0:	613b      	str	r3, [r7, #16]
   return(result);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3314      	adds	r3, #20
 80017d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017d2:	623a      	str	r2, [r7, #32]
 80017d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017d6:	69f9      	ldr	r1, [r7, #28]
 80017d8:	6a3a      	ldr	r2, [r7, #32]
 80017da:	e841 2300 	strex	r3, r2, [r1]
 80017de:	61bb      	str	r3, [r7, #24]
   return(result);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e5      	bne.n	80017b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e00f      	b.n	8001822 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	429a      	cmp	r2, r3
 800181e:	d09f      	beq.n	8001760 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3740      	adds	r7, #64	@ 0x40
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001866:	f023 030c 	bic.w	r3, r3, #12
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	430b      	orrs	r3, r1
 8001872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a2c      	ldr	r2, [pc, #176]	@ (8001940 <UART_SetConfig+0x114>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d103      	bne.n	800189c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001894:	f7ff fdc4 	bl	8001420 <HAL_RCC_GetPCLK2Freq>
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	e002      	b.n	80018a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800189c:	f7ff fdac 	bl	80013f8 <HAL_RCC_GetPCLK1Freq>
 80018a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	009a      	lsls	r2, r3, #2
 80018ac:	441a      	add	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <UART_SetConfig+0x118>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	0119      	lsls	r1, r3, #4
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009a      	lsls	r2, r3, #2
 80018cc:	441a      	add	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <UART_SetConfig+0x118>)
 80018da:	fba3 0302 	umull	r0, r3, r3, r2
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2064      	movs	r0, #100	@ 0x64
 80018e2:	fb00 f303 	mul.w	r3, r0, r3
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	3332      	adds	r3, #50	@ 0x32
 80018ec:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <UART_SetConfig+0x118>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f8:	4419      	add	r1, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	009a      	lsls	r2, r3, #2
 8001904:	441a      	add	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <UART_SetConfig+0x118>)
 8001912:	fba3 0302 	umull	r0, r3, r3, r2
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2064      	movs	r0, #100	@ 0x64
 800191a:	fb00 f303 	mul.w	r3, r0, r3
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	3332      	adds	r3, #50	@ 0x32
 8001924:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <UART_SetConfig+0x118>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	f003 020f 	and.w	r2, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	440a      	add	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40013800 	.word	0x40013800
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <siprintf>:
 8001948:	b40e      	push	{r1, r2, r3}
 800194a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800194e:	b500      	push	{lr}
 8001950:	b09c      	sub	sp, #112	@ 0x70
 8001952:	ab1d      	add	r3, sp, #116	@ 0x74
 8001954:	9002      	str	r0, [sp, #8]
 8001956:	9006      	str	r0, [sp, #24]
 8001958:	9107      	str	r1, [sp, #28]
 800195a:	9104      	str	r1, [sp, #16]
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <siprintf+0x38>)
 800195e:	4909      	ldr	r1, [pc, #36]	@ (8001984 <siprintf+0x3c>)
 8001960:	f853 2b04 	ldr.w	r2, [r3], #4
 8001964:	9105      	str	r1, [sp, #20]
 8001966:	6800      	ldr	r0, [r0, #0]
 8001968:	a902      	add	r1, sp, #8
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	f000 f9b6 	bl	8001cdc <_svfiprintf_r>
 8001970:	2200      	movs	r2, #0
 8001972:	9b02      	ldr	r3, [sp, #8]
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	b01c      	add	sp, #112	@ 0x70
 8001978:	f85d eb04 	ldr.w	lr, [sp], #4
 800197c:	b003      	add	sp, #12
 800197e:	4770      	bx	lr
 8001980:	2000000c 	.word	0x2000000c
 8001984:	ffff0208 	.word	0xffff0208

08001988 <memset>:
 8001988:	4603      	mov	r3, r0
 800198a:	4402      	add	r2, r0
 800198c:	4293      	cmp	r3, r2
 800198e:	d100      	bne.n	8001992 <memset+0xa>
 8001990:	4770      	bx	lr
 8001992:	f803 1b01 	strb.w	r1, [r3], #1
 8001996:	e7f9      	b.n	800198c <memset+0x4>

08001998 <strchr>:
 8001998:	4603      	mov	r3, r0
 800199a:	b2c9      	uxtb	r1, r1
 800199c:	4618      	mov	r0, r3
 800199e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019a2:	b112      	cbz	r2, 80019aa <strchr+0x12>
 80019a4:	428a      	cmp	r2, r1
 80019a6:	d1f9      	bne.n	800199c <strchr+0x4>
 80019a8:	4770      	bx	lr
 80019aa:	2900      	cmp	r1, #0
 80019ac:	bf18      	it	ne
 80019ae:	2000      	movne	r0, #0
 80019b0:	4770      	bx	lr

080019b2 <strstr>:
 80019b2:	780a      	ldrb	r2, [r1, #0]
 80019b4:	b570      	push	{r4, r5, r6, lr}
 80019b6:	b96a      	cbnz	r2, 80019d4 <strstr+0x22>
 80019b8:	bd70      	pop	{r4, r5, r6, pc}
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d109      	bne.n	80019d2 <strstr+0x20>
 80019be:	460c      	mov	r4, r1
 80019c0:	4605      	mov	r5, r0
 80019c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f6      	beq.n	80019b8 <strstr+0x6>
 80019ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80019ce:	429e      	cmp	r6, r3
 80019d0:	d0f7      	beq.n	80019c2 <strstr+0x10>
 80019d2:	3001      	adds	r0, #1
 80019d4:	7803      	ldrb	r3, [r0, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ef      	bne.n	80019ba <strstr+0x8>
 80019da:	4618      	mov	r0, r3
 80019dc:	e7ec      	b.n	80019b8 <strstr+0x6>
	...

080019e0 <__errno>:
 80019e0:	4b01      	ldr	r3, [pc, #4]	@ (80019e8 <__errno+0x8>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2600      	movs	r6, #0
 80019f0:	4d0c      	ldr	r5, [pc, #48]	@ (8001a24 <__libc_init_array+0x38>)
 80019f2:	4c0d      	ldr	r4, [pc, #52]	@ (8001a28 <__libc_init_array+0x3c>)
 80019f4:	1b64      	subs	r4, r4, r5
 80019f6:	10a4      	asrs	r4, r4, #2
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	f000 fc78 	bl	80022f0 <_init>
 8001a00:	2600      	movs	r6, #0
 8001a02:	4d0a      	ldr	r5, [pc, #40]	@ (8001a2c <__libc_init_array+0x40>)
 8001a04:	4c0a      	ldr	r4, [pc, #40]	@ (8001a30 <__libc_init_array+0x44>)
 8001a06:	1b64      	subs	r4, r4, r5
 8001a08:	10a4      	asrs	r4, r4, #2
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	0800238c 	.word	0x0800238c
 8001a28:	0800238c 	.word	0x0800238c
 8001a2c:	0800238c 	.word	0x0800238c
 8001a30:	08002390 	.word	0x08002390

08001a34 <__retarget_lock_acquire_recursive>:
 8001a34:	4770      	bx	lr

08001a36 <__retarget_lock_release_recursive>:
 8001a36:	4770      	bx	lr

08001a38 <_free_r>:
 8001a38:	b538      	push	{r3, r4, r5, lr}
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	2900      	cmp	r1, #0
 8001a3e:	d040      	beq.n	8001ac2 <_free_r+0x8a>
 8001a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a44:	1f0c      	subs	r4, r1, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	bfb8      	it	lt
 8001a4a:	18e4      	addlt	r4, r4, r3
 8001a4c:	f000 f8de 	bl	8001c0c <__malloc_lock>
 8001a50:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <_free_r+0x8c>)
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	b933      	cbnz	r3, 8001a64 <_free_r+0x2c>
 8001a56:	6063      	str	r3, [r4, #4]
 8001a58:	6014      	str	r4, [r2, #0]
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a60:	f000 b8da 	b.w	8001c18 <__malloc_unlock>
 8001a64:	42a3      	cmp	r3, r4
 8001a66:	d908      	bls.n	8001a7a <_free_r+0x42>
 8001a68:	6820      	ldr	r0, [r4, #0]
 8001a6a:	1821      	adds	r1, r4, r0
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	bf01      	itttt	eq
 8001a70:	6819      	ldreq	r1, [r3, #0]
 8001a72:	685b      	ldreq	r3, [r3, #4]
 8001a74:	1809      	addeq	r1, r1, r0
 8001a76:	6021      	streq	r1, [r4, #0]
 8001a78:	e7ed      	b.n	8001a56 <_free_r+0x1e>
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	b10b      	cbz	r3, 8001a84 <_free_r+0x4c>
 8001a80:	42a3      	cmp	r3, r4
 8001a82:	d9fa      	bls.n	8001a7a <_free_r+0x42>
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	1850      	adds	r0, r2, r1
 8001a88:	42a0      	cmp	r0, r4
 8001a8a:	d10b      	bne.n	8001aa4 <_free_r+0x6c>
 8001a8c:	6820      	ldr	r0, [r4, #0]
 8001a8e:	4401      	add	r1, r0
 8001a90:	1850      	adds	r0, r2, r1
 8001a92:	4283      	cmp	r3, r0
 8001a94:	6011      	str	r1, [r2, #0]
 8001a96:	d1e0      	bne.n	8001a5a <_free_r+0x22>
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4408      	add	r0, r1
 8001a9e:	6010      	str	r0, [r2, #0]
 8001aa0:	6053      	str	r3, [r2, #4]
 8001aa2:	e7da      	b.n	8001a5a <_free_r+0x22>
 8001aa4:	d902      	bls.n	8001aac <_free_r+0x74>
 8001aa6:	230c      	movs	r3, #12
 8001aa8:	602b      	str	r3, [r5, #0]
 8001aaa:	e7d6      	b.n	8001a5a <_free_r+0x22>
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	1821      	adds	r1, r4, r0
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	bf01      	itttt	eq
 8001ab4:	6819      	ldreq	r1, [r3, #0]
 8001ab6:	685b      	ldreq	r3, [r3, #4]
 8001ab8:	1809      	addeq	r1, r1, r0
 8001aba:	6021      	streq	r1, [r4, #0]
 8001abc:	6063      	str	r3, [r4, #4]
 8001abe:	6054      	str	r4, [r2, #4]
 8001ac0:	e7cb      	b.n	8001a5a <_free_r+0x22>
 8001ac2:	bd38      	pop	{r3, r4, r5, pc}
 8001ac4:	20000290 	.word	0x20000290

08001ac8 <sbrk_aligned>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4e0f      	ldr	r6, [pc, #60]	@ (8001b08 <sbrk_aligned+0x40>)
 8001acc:	460c      	mov	r4, r1
 8001ace:	6831      	ldr	r1, [r6, #0]
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	b911      	cbnz	r1, 8001ada <sbrk_aligned+0x12>
 8001ad4:	f000 fbaa 	bl	800222c <_sbrk_r>
 8001ad8:	6030      	str	r0, [r6, #0]
 8001ada:	4621      	mov	r1, r4
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 fba5 	bl	800222c <_sbrk_r>
 8001ae2:	1c43      	adds	r3, r0, #1
 8001ae4:	d103      	bne.n	8001aee <sbrk_aligned+0x26>
 8001ae6:	f04f 34ff 	mov.w	r4, #4294967295
 8001aea:	4620      	mov	r0, r4
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
 8001aee:	1cc4      	adds	r4, r0, #3
 8001af0:	f024 0403 	bic.w	r4, r4, #3
 8001af4:	42a0      	cmp	r0, r4
 8001af6:	d0f8      	beq.n	8001aea <sbrk_aligned+0x22>
 8001af8:	1a21      	subs	r1, r4, r0
 8001afa:	4628      	mov	r0, r5
 8001afc:	f000 fb96 	bl	800222c <_sbrk_r>
 8001b00:	3001      	adds	r0, #1
 8001b02:	d1f2      	bne.n	8001aea <sbrk_aligned+0x22>
 8001b04:	e7ef      	b.n	8001ae6 <sbrk_aligned+0x1e>
 8001b06:	bf00      	nop
 8001b08:	2000028c 	.word	0x2000028c

08001b0c <_malloc_r>:
 8001b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b10:	1ccd      	adds	r5, r1, #3
 8001b12:	f025 0503 	bic.w	r5, r5, #3
 8001b16:	3508      	adds	r5, #8
 8001b18:	2d0c      	cmp	r5, #12
 8001b1a:	bf38      	it	cc
 8001b1c:	250c      	movcc	r5, #12
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	4606      	mov	r6, r0
 8001b22:	db01      	blt.n	8001b28 <_malloc_r+0x1c>
 8001b24:	42a9      	cmp	r1, r5
 8001b26:	d904      	bls.n	8001b32 <_malloc_r+0x26>
 8001b28:	230c      	movs	r3, #12
 8001b2a:	6033      	str	r3, [r6, #0]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c08 <_malloc_r+0xfc>
 8001b36:	f000 f869 	bl	8001c0c <__malloc_lock>
 8001b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b3e:	461c      	mov	r4, r3
 8001b40:	bb44      	cbnz	r4, 8001b94 <_malloc_r+0x88>
 8001b42:	4629      	mov	r1, r5
 8001b44:	4630      	mov	r0, r6
 8001b46:	f7ff ffbf 	bl	8001ac8 <sbrk_aligned>
 8001b4a:	1c43      	adds	r3, r0, #1
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	d158      	bne.n	8001c02 <_malloc_r+0xf6>
 8001b50:	f8d8 4000 	ldr.w	r4, [r8]
 8001b54:	4627      	mov	r7, r4
 8001b56:	2f00      	cmp	r7, #0
 8001b58:	d143      	bne.n	8001be2 <_malloc_r+0xd6>
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d04b      	beq.n	8001bf6 <_malloc_r+0xea>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	4639      	mov	r1, r7
 8001b62:	4630      	mov	r0, r6
 8001b64:	eb04 0903 	add.w	r9, r4, r3
 8001b68:	f000 fb60 	bl	800222c <_sbrk_r>
 8001b6c:	4581      	cmp	r9, r0
 8001b6e:	d142      	bne.n	8001bf6 <_malloc_r+0xea>
 8001b70:	6821      	ldr	r1, [r4, #0]
 8001b72:	4630      	mov	r0, r6
 8001b74:	1a6d      	subs	r5, r5, r1
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7ff ffa6 	bl	8001ac8 <sbrk_aligned>
 8001b7c:	3001      	adds	r0, #1
 8001b7e:	d03a      	beq.n	8001bf6 <_malloc_r+0xea>
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	442b      	add	r3, r5
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	f8d8 3000 	ldr.w	r3, [r8]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	bb62      	cbnz	r2, 8001be8 <_malloc_r+0xdc>
 8001b8e:	f8c8 7000 	str.w	r7, [r8]
 8001b92:	e00f      	b.n	8001bb4 <_malloc_r+0xa8>
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	1b52      	subs	r2, r2, r5
 8001b98:	d420      	bmi.n	8001bdc <_malloc_r+0xd0>
 8001b9a:	2a0b      	cmp	r2, #11
 8001b9c:	d917      	bls.n	8001bce <_malloc_r+0xc2>
 8001b9e:	1961      	adds	r1, r4, r5
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	6025      	str	r5, [r4, #0]
 8001ba4:	bf18      	it	ne
 8001ba6:	6059      	strne	r1, [r3, #4]
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	bf08      	it	eq
 8001bac:	f8c8 1000 	streq.w	r1, [r8]
 8001bb0:	5162      	str	r2, [r4, r5]
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f000 f82f 	bl	8001c18 <__malloc_unlock>
 8001bba:	f104 000b 	add.w	r0, r4, #11
 8001bbe:	1d23      	adds	r3, r4, #4
 8001bc0:	f020 0007 	bic.w	r0, r0, #7
 8001bc4:	1ac2      	subs	r2, r0, r3
 8001bc6:	bf1c      	itt	ne
 8001bc8:	1a1b      	subne	r3, r3, r0
 8001bca:	50a3      	strne	r3, [r4, r2]
 8001bcc:	e7af      	b.n	8001b2e <_malloc_r+0x22>
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	bf0c      	ite	eq
 8001bd4:	f8c8 2000 	streq.w	r2, [r8]
 8001bd8:	605a      	strne	r2, [r3, #4]
 8001bda:	e7eb      	b.n	8001bb4 <_malloc_r+0xa8>
 8001bdc:	4623      	mov	r3, r4
 8001bde:	6864      	ldr	r4, [r4, #4]
 8001be0:	e7ae      	b.n	8001b40 <_malloc_r+0x34>
 8001be2:	463c      	mov	r4, r7
 8001be4:	687f      	ldr	r7, [r7, #4]
 8001be6:	e7b6      	b.n	8001b56 <_malloc_r+0x4a>
 8001be8:	461a      	mov	r2, r3
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d1fb      	bne.n	8001be8 <_malloc_r+0xdc>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6053      	str	r3, [r2, #4]
 8001bf4:	e7de      	b.n	8001bb4 <_malloc_r+0xa8>
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	6033      	str	r3, [r6, #0]
 8001bfc:	f000 f80c 	bl	8001c18 <__malloc_unlock>
 8001c00:	e794      	b.n	8001b2c <_malloc_r+0x20>
 8001c02:	6005      	str	r5, [r0, #0]
 8001c04:	e7d6      	b.n	8001bb4 <_malloc_r+0xa8>
 8001c06:	bf00      	nop
 8001c08:	20000290 	.word	0x20000290

08001c0c <__malloc_lock>:
 8001c0c:	4801      	ldr	r0, [pc, #4]	@ (8001c14 <__malloc_lock+0x8>)
 8001c0e:	f7ff bf11 	b.w	8001a34 <__retarget_lock_acquire_recursive>
 8001c12:	bf00      	nop
 8001c14:	20000288 	.word	0x20000288

08001c18 <__malloc_unlock>:
 8001c18:	4801      	ldr	r0, [pc, #4]	@ (8001c20 <__malloc_unlock+0x8>)
 8001c1a:	f7ff bf0c 	b.w	8001a36 <__retarget_lock_release_recursive>
 8001c1e:	bf00      	nop
 8001c20:	20000288 	.word	0x20000288

08001c24 <__ssputs_r>:
 8001c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c28:	461f      	mov	r7, r3
 8001c2a:	688e      	ldr	r6, [r1, #8]
 8001c2c:	4682      	mov	sl, r0
 8001c2e:	42be      	cmp	r6, r7
 8001c30:	460c      	mov	r4, r1
 8001c32:	4690      	mov	r8, r2
 8001c34:	680b      	ldr	r3, [r1, #0]
 8001c36:	d82d      	bhi.n	8001c94 <__ssputs_r+0x70>
 8001c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001c40:	d026      	beq.n	8001c90 <__ssputs_r+0x6c>
 8001c42:	6965      	ldr	r5, [r4, #20]
 8001c44:	6909      	ldr	r1, [r1, #16]
 8001c46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c4a:	eba3 0901 	sub.w	r9, r3, r1
 8001c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c52:	1c7b      	adds	r3, r7, #1
 8001c54:	444b      	add	r3, r9
 8001c56:	106d      	asrs	r5, r5, #1
 8001c58:	429d      	cmp	r5, r3
 8001c5a:	bf38      	it	cc
 8001c5c:	461d      	movcc	r5, r3
 8001c5e:	0553      	lsls	r3, r2, #21
 8001c60:	d527      	bpl.n	8001cb2 <__ssputs_r+0x8e>
 8001c62:	4629      	mov	r1, r5
 8001c64:	f7ff ff52 	bl	8001b0c <_malloc_r>
 8001c68:	4606      	mov	r6, r0
 8001c6a:	b360      	cbz	r0, 8001cc6 <__ssputs_r+0xa2>
 8001c6c:	464a      	mov	r2, r9
 8001c6e:	6921      	ldr	r1, [r4, #16]
 8001c70:	f000 fafa 	bl	8002268 <memcpy>
 8001c74:	89a3      	ldrh	r3, [r4, #12]
 8001c76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7e:	81a3      	strh	r3, [r4, #12]
 8001c80:	6126      	str	r6, [r4, #16]
 8001c82:	444e      	add	r6, r9
 8001c84:	6026      	str	r6, [r4, #0]
 8001c86:	463e      	mov	r6, r7
 8001c88:	6165      	str	r5, [r4, #20]
 8001c8a:	eba5 0509 	sub.w	r5, r5, r9
 8001c8e:	60a5      	str	r5, [r4, #8]
 8001c90:	42be      	cmp	r6, r7
 8001c92:	d900      	bls.n	8001c96 <__ssputs_r+0x72>
 8001c94:	463e      	mov	r6, r7
 8001c96:	4632      	mov	r2, r6
 8001c98:	4641      	mov	r1, r8
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	f000 faac 	bl	80021f8 <memmove>
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	68a3      	ldr	r3, [r4, #8]
 8001ca4:	1b9b      	subs	r3, r3, r6
 8001ca6:	60a3      	str	r3, [r4, #8]
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	4433      	add	r3, r6
 8001cac:	6023      	str	r3, [r4, #0]
 8001cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb2:	462a      	mov	r2, r5
 8001cb4:	f000 fae6 	bl	8002284 <_realloc_r>
 8001cb8:	4606      	mov	r6, r0
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d1e0      	bne.n	8001c80 <__ssputs_r+0x5c>
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	6921      	ldr	r1, [r4, #16]
 8001cc2:	f7ff feb9 	bl	8001a38 <_free_r>
 8001cc6:	230c      	movs	r3, #12
 8001cc8:	f8ca 3000 	str.w	r3, [sl]
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd6:	81a3      	strh	r3, [r4, #12]
 8001cd8:	e7e9      	b.n	8001cae <__ssputs_r+0x8a>
	...

08001cdc <_svfiprintf_r>:
 8001cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce0:	4698      	mov	r8, r3
 8001ce2:	898b      	ldrh	r3, [r1, #12]
 8001ce4:	4607      	mov	r7, r0
 8001ce6:	061b      	lsls	r3, r3, #24
 8001ce8:	460d      	mov	r5, r1
 8001cea:	4614      	mov	r4, r2
 8001cec:	b09d      	sub	sp, #116	@ 0x74
 8001cee:	d510      	bpl.n	8001d12 <_svfiprintf_r+0x36>
 8001cf0:	690b      	ldr	r3, [r1, #16]
 8001cf2:	b973      	cbnz	r3, 8001d12 <_svfiprintf_r+0x36>
 8001cf4:	2140      	movs	r1, #64	@ 0x40
 8001cf6:	f7ff ff09 	bl	8001b0c <_malloc_r>
 8001cfa:	6028      	str	r0, [r5, #0]
 8001cfc:	6128      	str	r0, [r5, #16]
 8001cfe:	b930      	cbnz	r0, 8001d0e <_svfiprintf_r+0x32>
 8001d00:	230c      	movs	r3, #12
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	b01d      	add	sp, #116	@ 0x74
 8001d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d0e:	2340      	movs	r3, #64	@ 0x40
 8001d10:	616b      	str	r3, [r5, #20]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d16:	2320      	movs	r3, #32
 8001d18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d1c:	2330      	movs	r3, #48	@ 0x30
 8001d1e:	f04f 0901 	mov.w	r9, #1
 8001d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d26:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001ec0 <_svfiprintf_r+0x1e4>
 8001d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d2e:	4623      	mov	r3, r4
 8001d30:	469a      	mov	sl, r3
 8001d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d36:	b10a      	cbz	r2, 8001d3c <_svfiprintf_r+0x60>
 8001d38:	2a25      	cmp	r2, #37	@ 0x25
 8001d3a:	d1f9      	bne.n	8001d30 <_svfiprintf_r+0x54>
 8001d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8001d40:	d00b      	beq.n	8001d5a <_svfiprintf_r+0x7e>
 8001d42:	465b      	mov	r3, fp
 8001d44:	4622      	mov	r2, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	4638      	mov	r0, r7
 8001d4a:	f7ff ff6b 	bl	8001c24 <__ssputs_r>
 8001d4e:	3001      	adds	r0, #1
 8001d50:	f000 80a7 	beq.w	8001ea2 <_svfiprintf_r+0x1c6>
 8001d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d56:	445a      	add	r2, fp
 8001d58:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 809f 	beq.w	8001ea2 <_svfiprintf_r+0x1c6>
 8001d64:	2300      	movs	r3, #0
 8001d66:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d6e:	f10a 0a01 	add.w	sl, sl, #1
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	9307      	str	r3, [sp, #28]
 8001d76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d7c:	4654      	mov	r4, sl
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d84:	484e      	ldr	r0, [pc, #312]	@ (8001ec0 <_svfiprintf_r+0x1e4>)
 8001d86:	f000 fa61 	bl	800224c <memchr>
 8001d8a:	9a04      	ldr	r2, [sp, #16]
 8001d8c:	b9d8      	cbnz	r0, 8001dc6 <_svfiprintf_r+0xea>
 8001d8e:	06d0      	lsls	r0, r2, #27
 8001d90:	bf44      	itt	mi
 8001d92:	2320      	movmi	r3, #32
 8001d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d98:	0711      	lsls	r1, r2, #28
 8001d9a:	bf44      	itt	mi
 8001d9c:	232b      	movmi	r3, #43	@ 0x2b
 8001d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001da2:	f89a 3000 	ldrb.w	r3, [sl]
 8001da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001da8:	d015      	beq.n	8001dd6 <_svfiprintf_r+0xfa>
 8001daa:	4654      	mov	r4, sl
 8001dac:	2000      	movs	r0, #0
 8001dae:	f04f 0c0a 	mov.w	ip, #10
 8001db2:	9a07      	ldr	r2, [sp, #28]
 8001db4:	4621      	mov	r1, r4
 8001db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dba:	3b30      	subs	r3, #48	@ 0x30
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d94b      	bls.n	8001e58 <_svfiprintf_r+0x17c>
 8001dc0:	b1b0      	cbz	r0, 8001df0 <_svfiprintf_r+0x114>
 8001dc2:	9207      	str	r2, [sp, #28]
 8001dc4:	e014      	b.n	8001df0 <_svfiprintf_r+0x114>
 8001dc6:	eba0 0308 	sub.w	r3, r0, r8
 8001dca:	fa09 f303 	lsl.w	r3, r9, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	46a2      	mov	sl, r4
 8001dd2:	9304      	str	r3, [sp, #16]
 8001dd4:	e7d2      	b.n	8001d7c <_svfiprintf_r+0xa0>
 8001dd6:	9b03      	ldr	r3, [sp, #12]
 8001dd8:	1d19      	adds	r1, r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfbb      	ittet	lt
 8001de2:	425b      	neglt	r3, r3
 8001de4:	f042 0202 	orrlt.w	r2, r2, #2
 8001de8:	9307      	strge	r3, [sp, #28]
 8001dea:	9307      	strlt	r3, [sp, #28]
 8001dec:	bfb8      	it	lt
 8001dee:	9204      	strlt	r2, [sp, #16]
 8001df0:	7823      	ldrb	r3, [r4, #0]
 8001df2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001df4:	d10a      	bne.n	8001e0c <_svfiprintf_r+0x130>
 8001df6:	7863      	ldrb	r3, [r4, #1]
 8001df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dfa:	d132      	bne.n	8001e62 <_svfiprintf_r+0x186>
 8001dfc:	9b03      	ldr	r3, [sp, #12]
 8001dfe:	3402      	adds	r4, #2
 8001e00:	1d1a      	adds	r2, r3, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	9203      	str	r2, [sp, #12]
 8001e06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e0a:	9305      	str	r3, [sp, #20]
 8001e0c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001ec4 <_svfiprintf_r+0x1e8>
 8001e10:	2203      	movs	r2, #3
 8001e12:	4650      	mov	r0, sl
 8001e14:	7821      	ldrb	r1, [r4, #0]
 8001e16:	f000 fa19 	bl	800224c <memchr>
 8001e1a:	b138      	cbz	r0, 8001e2c <_svfiprintf_r+0x150>
 8001e1c:	2240      	movs	r2, #64	@ 0x40
 8001e1e:	9b04      	ldr	r3, [sp, #16]
 8001e20:	eba0 000a 	sub.w	r0, r0, sl
 8001e24:	4082      	lsls	r2, r0
 8001e26:	4313      	orrs	r3, r2
 8001e28:	3401      	adds	r4, #1
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e30:	2206      	movs	r2, #6
 8001e32:	4825      	ldr	r0, [pc, #148]	@ (8001ec8 <_svfiprintf_r+0x1ec>)
 8001e34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e38:	f000 fa08 	bl	800224c <memchr>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d036      	beq.n	8001eae <_svfiprintf_r+0x1d2>
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <_svfiprintf_r+0x1f0>)
 8001e42:	bb1b      	cbnz	r3, 8001e8c <_svfiprintf_r+0x1b0>
 8001e44:	9b03      	ldr	r3, [sp, #12]
 8001e46:	3307      	adds	r3, #7
 8001e48:	f023 0307 	bic.w	r3, r3, #7
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	9303      	str	r3, [sp, #12]
 8001e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e52:	4433      	add	r3, r6
 8001e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e56:	e76a      	b.n	8001d2e <_svfiprintf_r+0x52>
 8001e58:	460c      	mov	r4, r1
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e60:	e7a8      	b.n	8001db4 <_svfiprintf_r+0xd8>
 8001e62:	2300      	movs	r3, #0
 8001e64:	f04f 0c0a 	mov.w	ip, #10
 8001e68:	4619      	mov	r1, r3
 8001e6a:	3401      	adds	r4, #1
 8001e6c:	9305      	str	r3, [sp, #20]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e74:	3a30      	subs	r2, #48	@ 0x30
 8001e76:	2a09      	cmp	r2, #9
 8001e78:	d903      	bls.n	8001e82 <_svfiprintf_r+0x1a6>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0c6      	beq.n	8001e0c <_svfiprintf_r+0x130>
 8001e7e:	9105      	str	r1, [sp, #20]
 8001e80:	e7c4      	b.n	8001e0c <_svfiprintf_r+0x130>
 8001e82:	4604      	mov	r4, r0
 8001e84:	2301      	movs	r3, #1
 8001e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e8a:	e7f0      	b.n	8001e6e <_svfiprintf_r+0x192>
 8001e8c:	ab03      	add	r3, sp, #12
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	462a      	mov	r2, r5
 8001e92:	4638      	mov	r0, r7
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <_svfiprintf_r+0x1f4>)
 8001e96:	a904      	add	r1, sp, #16
 8001e98:	f3af 8000 	nop.w
 8001e9c:	1c42      	adds	r2, r0, #1
 8001e9e:	4606      	mov	r6, r0
 8001ea0:	d1d6      	bne.n	8001e50 <_svfiprintf_r+0x174>
 8001ea2:	89ab      	ldrh	r3, [r5, #12]
 8001ea4:	065b      	lsls	r3, r3, #25
 8001ea6:	f53f af2d 	bmi.w	8001d04 <_svfiprintf_r+0x28>
 8001eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001eac:	e72c      	b.n	8001d08 <_svfiprintf_r+0x2c>
 8001eae:	ab03      	add	r3, sp, #12
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	462a      	mov	r2, r5
 8001eb4:	4638      	mov	r0, r7
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <_svfiprintf_r+0x1f4>)
 8001eb8:	a904      	add	r1, sp, #16
 8001eba:	f000 f87d 	bl	8001fb8 <_printf_i>
 8001ebe:	e7ed      	b.n	8001e9c <_svfiprintf_r+0x1c0>
 8001ec0:	0800234e 	.word	0x0800234e
 8001ec4:	08002354 	.word	0x08002354
 8001ec8:	08002358 	.word	0x08002358
 8001ecc:	00000000 	.word	0x00000000
 8001ed0:	08001c25 	.word	0x08001c25

08001ed4 <_printf_common>:
 8001ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	4616      	mov	r6, r2
 8001eda:	4698      	mov	r8, r3
 8001edc:	688a      	ldr	r2, [r1, #8]
 8001ede:	690b      	ldr	r3, [r1, #16]
 8001ee0:	4607      	mov	r7, r0
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	bfb8      	it	lt
 8001ee6:	4613      	movlt	r3, r2
 8001ee8:	6033      	str	r3, [r6, #0]
 8001eea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001eee:	460c      	mov	r4, r1
 8001ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ef4:	b10a      	cbz	r2, 8001efa <_printf_common+0x26>
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	6033      	str	r3, [r6, #0]
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	0699      	lsls	r1, r3, #26
 8001efe:	bf42      	ittt	mi
 8001f00:	6833      	ldrmi	r3, [r6, #0]
 8001f02:	3302      	addmi	r3, #2
 8001f04:	6033      	strmi	r3, [r6, #0]
 8001f06:	6825      	ldr	r5, [r4, #0]
 8001f08:	f015 0506 	ands.w	r5, r5, #6
 8001f0c:	d106      	bne.n	8001f1c <_printf_common+0x48>
 8001f0e:	f104 0a19 	add.w	sl, r4, #25
 8001f12:	68e3      	ldr	r3, [r4, #12]
 8001f14:	6832      	ldr	r2, [r6, #0]
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	42ab      	cmp	r3, r5
 8001f1a:	dc2b      	bgt.n	8001f74 <_printf_common+0xa0>
 8001f1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f20:	6822      	ldr	r2, [r4, #0]
 8001f22:	3b00      	subs	r3, #0
 8001f24:	bf18      	it	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	0692      	lsls	r2, r2, #26
 8001f2a:	d430      	bmi.n	8001f8e <_printf_common+0xba>
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	4638      	mov	r0, r7
 8001f30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f34:	47c8      	blx	r9
 8001f36:	3001      	adds	r0, #1
 8001f38:	d023      	beq.n	8001f82 <_printf_common+0xae>
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	6922      	ldr	r2, [r4, #16]
 8001f3e:	f003 0306 	and.w	r3, r3, #6
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf14      	ite	ne
 8001f46:	2500      	movne	r5, #0
 8001f48:	6833      	ldreq	r3, [r6, #0]
 8001f4a:	f04f 0600 	mov.w	r6, #0
 8001f4e:	bf08      	it	eq
 8001f50:	68e5      	ldreq	r5, [r4, #12]
 8001f52:	f104 041a 	add.w	r4, r4, #26
 8001f56:	bf08      	it	eq
 8001f58:	1aed      	subeq	r5, r5, r3
 8001f5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001f5e:	bf08      	it	eq
 8001f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bfc4      	itt	gt
 8001f68:	1a9b      	subgt	r3, r3, r2
 8001f6a:	18ed      	addgt	r5, r5, r3
 8001f6c:	42b5      	cmp	r5, r6
 8001f6e:	d11a      	bne.n	8001fa6 <_printf_common+0xd2>
 8001f70:	2000      	movs	r0, #0
 8001f72:	e008      	b.n	8001f86 <_printf_common+0xb2>
 8001f74:	2301      	movs	r3, #1
 8001f76:	4652      	mov	r2, sl
 8001f78:	4641      	mov	r1, r8
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	47c8      	blx	r9
 8001f7e:	3001      	adds	r0, #1
 8001f80:	d103      	bne.n	8001f8a <_printf_common+0xb6>
 8001f82:	f04f 30ff 	mov.w	r0, #4294967295
 8001f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f8a:	3501      	adds	r5, #1
 8001f8c:	e7c1      	b.n	8001f12 <_printf_common+0x3e>
 8001f8e:	2030      	movs	r0, #48	@ 0x30
 8001f90:	18e1      	adds	r1, r4, r3
 8001f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f9c:	4422      	add	r2, r4
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fa4:	e7c2      	b.n	8001f2c <_printf_common+0x58>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4622      	mov	r2, r4
 8001faa:	4641      	mov	r1, r8
 8001fac:	4638      	mov	r0, r7
 8001fae:	47c8      	blx	r9
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	d0e6      	beq.n	8001f82 <_printf_common+0xae>
 8001fb4:	3601      	adds	r6, #1
 8001fb6:	e7d9      	b.n	8001f6c <_printf_common+0x98>

08001fb8 <_printf_i>:
 8001fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fbc:	7e0f      	ldrb	r7, [r1, #24]
 8001fbe:	4691      	mov	r9, r2
 8001fc0:	2f78      	cmp	r7, #120	@ 0x78
 8001fc2:	4680      	mov	r8, r0
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fce:	d807      	bhi.n	8001fe0 <_printf_i+0x28>
 8001fd0:	2f62      	cmp	r7, #98	@ 0x62
 8001fd2:	d80a      	bhi.n	8001fea <_printf_i+0x32>
 8001fd4:	2f00      	cmp	r7, #0
 8001fd6:	f000 80d3 	beq.w	8002180 <_printf_i+0x1c8>
 8001fda:	2f58      	cmp	r7, #88	@ 0x58
 8001fdc:	f000 80ba 	beq.w	8002154 <_printf_i+0x19c>
 8001fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fe8:	e03a      	b.n	8002060 <_printf_i+0xa8>
 8001fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fee:	2b15      	cmp	r3, #21
 8001ff0:	d8f6      	bhi.n	8001fe0 <_printf_i+0x28>
 8001ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8001ff8 <_printf_i+0x40>)
 8001ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ff8:	08002051 	.word	0x08002051
 8001ffc:	08002065 	.word	0x08002065
 8002000:	08001fe1 	.word	0x08001fe1
 8002004:	08001fe1 	.word	0x08001fe1
 8002008:	08001fe1 	.word	0x08001fe1
 800200c:	08001fe1 	.word	0x08001fe1
 8002010:	08002065 	.word	0x08002065
 8002014:	08001fe1 	.word	0x08001fe1
 8002018:	08001fe1 	.word	0x08001fe1
 800201c:	08001fe1 	.word	0x08001fe1
 8002020:	08001fe1 	.word	0x08001fe1
 8002024:	08002167 	.word	0x08002167
 8002028:	0800208f 	.word	0x0800208f
 800202c:	08002121 	.word	0x08002121
 8002030:	08001fe1 	.word	0x08001fe1
 8002034:	08001fe1 	.word	0x08001fe1
 8002038:	08002189 	.word	0x08002189
 800203c:	08001fe1 	.word	0x08001fe1
 8002040:	0800208f 	.word	0x0800208f
 8002044:	08001fe1 	.word	0x08001fe1
 8002048:	08001fe1 	.word	0x08001fe1
 800204c:	08002129 	.word	0x08002129
 8002050:	6833      	ldr	r3, [r6, #0]
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6032      	str	r2, [r6, #0]
 8002058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800205c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002060:	2301      	movs	r3, #1
 8002062:	e09e      	b.n	80021a2 <_printf_i+0x1ea>
 8002064:	6833      	ldr	r3, [r6, #0]
 8002066:	6820      	ldr	r0, [r4, #0]
 8002068:	1d19      	adds	r1, r3, #4
 800206a:	6031      	str	r1, [r6, #0]
 800206c:	0606      	lsls	r6, r0, #24
 800206e:	d501      	bpl.n	8002074 <_printf_i+0xbc>
 8002070:	681d      	ldr	r5, [r3, #0]
 8002072:	e003      	b.n	800207c <_printf_i+0xc4>
 8002074:	0645      	lsls	r5, r0, #25
 8002076:	d5fb      	bpl.n	8002070 <_printf_i+0xb8>
 8002078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800207c:	2d00      	cmp	r5, #0
 800207e:	da03      	bge.n	8002088 <_printf_i+0xd0>
 8002080:	232d      	movs	r3, #45	@ 0x2d
 8002082:	426d      	negs	r5, r5
 8002084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002088:	230a      	movs	r3, #10
 800208a:	4859      	ldr	r0, [pc, #356]	@ (80021f0 <_printf_i+0x238>)
 800208c:	e011      	b.n	80020b2 <_printf_i+0xfa>
 800208e:	6821      	ldr	r1, [r4, #0]
 8002090:	6833      	ldr	r3, [r6, #0]
 8002092:	0608      	lsls	r0, r1, #24
 8002094:	f853 5b04 	ldr.w	r5, [r3], #4
 8002098:	d402      	bmi.n	80020a0 <_printf_i+0xe8>
 800209a:	0649      	lsls	r1, r1, #25
 800209c:	bf48      	it	mi
 800209e:	b2ad      	uxthmi	r5, r5
 80020a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80020a2:	6033      	str	r3, [r6, #0]
 80020a4:	bf14      	ite	ne
 80020a6:	230a      	movne	r3, #10
 80020a8:	2308      	moveq	r3, #8
 80020aa:	4851      	ldr	r0, [pc, #324]	@ (80021f0 <_printf_i+0x238>)
 80020ac:	2100      	movs	r1, #0
 80020ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020b2:	6866      	ldr	r6, [r4, #4]
 80020b4:	2e00      	cmp	r6, #0
 80020b6:	bfa8      	it	ge
 80020b8:	6821      	ldrge	r1, [r4, #0]
 80020ba:	60a6      	str	r6, [r4, #8]
 80020bc:	bfa4      	itt	ge
 80020be:	f021 0104 	bicge.w	r1, r1, #4
 80020c2:	6021      	strge	r1, [r4, #0]
 80020c4:	b90d      	cbnz	r5, 80020ca <_printf_i+0x112>
 80020c6:	2e00      	cmp	r6, #0
 80020c8:	d04b      	beq.n	8002162 <_printf_i+0x1aa>
 80020ca:	4616      	mov	r6, r2
 80020cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80020d0:	fb03 5711 	mls	r7, r3, r1, r5
 80020d4:	5dc7      	ldrb	r7, [r0, r7]
 80020d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020da:	462f      	mov	r7, r5
 80020dc:	42bb      	cmp	r3, r7
 80020de:	460d      	mov	r5, r1
 80020e0:	d9f4      	bls.n	80020cc <_printf_i+0x114>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d10b      	bne.n	80020fe <_printf_i+0x146>
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	07df      	lsls	r7, r3, #31
 80020ea:	d508      	bpl.n	80020fe <_printf_i+0x146>
 80020ec:	6923      	ldr	r3, [r4, #16]
 80020ee:	6861      	ldr	r1, [r4, #4]
 80020f0:	4299      	cmp	r1, r3
 80020f2:	bfde      	ittt	le
 80020f4:	2330      	movle	r3, #48	@ 0x30
 80020f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020fe:	1b92      	subs	r2, r2, r6
 8002100:	6122      	str	r2, [r4, #16]
 8002102:	464b      	mov	r3, r9
 8002104:	4621      	mov	r1, r4
 8002106:	4640      	mov	r0, r8
 8002108:	f8cd a000 	str.w	sl, [sp]
 800210c:	aa03      	add	r2, sp, #12
 800210e:	f7ff fee1 	bl	8001ed4 <_printf_common>
 8002112:	3001      	adds	r0, #1
 8002114:	d14a      	bne.n	80021ac <_printf_i+0x1f4>
 8002116:	f04f 30ff 	mov.w	r0, #4294967295
 800211a:	b004      	add	sp, #16
 800211c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6023      	str	r3, [r4, #0]
 8002128:	2778      	movs	r7, #120	@ 0x78
 800212a:	4832      	ldr	r0, [pc, #200]	@ (80021f4 <_printf_i+0x23c>)
 800212c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	6831      	ldr	r1, [r6, #0]
 8002134:	061f      	lsls	r7, r3, #24
 8002136:	f851 5b04 	ldr.w	r5, [r1], #4
 800213a:	d402      	bmi.n	8002142 <_printf_i+0x18a>
 800213c:	065f      	lsls	r7, r3, #25
 800213e:	bf48      	it	mi
 8002140:	b2ad      	uxthmi	r5, r5
 8002142:	6031      	str	r1, [r6, #0]
 8002144:	07d9      	lsls	r1, r3, #31
 8002146:	bf44      	itt	mi
 8002148:	f043 0320 	orrmi.w	r3, r3, #32
 800214c:	6023      	strmi	r3, [r4, #0]
 800214e:	b11d      	cbz	r5, 8002158 <_printf_i+0x1a0>
 8002150:	2310      	movs	r3, #16
 8002152:	e7ab      	b.n	80020ac <_printf_i+0xf4>
 8002154:	4826      	ldr	r0, [pc, #152]	@ (80021f0 <_printf_i+0x238>)
 8002156:	e7e9      	b.n	800212c <_printf_i+0x174>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	f023 0320 	bic.w	r3, r3, #32
 800215e:	6023      	str	r3, [r4, #0]
 8002160:	e7f6      	b.n	8002150 <_printf_i+0x198>
 8002162:	4616      	mov	r6, r2
 8002164:	e7bd      	b.n	80020e2 <_printf_i+0x12a>
 8002166:	6833      	ldr	r3, [r6, #0]
 8002168:	6825      	ldr	r5, [r4, #0]
 800216a:	1d18      	adds	r0, r3, #4
 800216c:	6961      	ldr	r1, [r4, #20]
 800216e:	6030      	str	r0, [r6, #0]
 8002170:	062e      	lsls	r6, r5, #24
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	d501      	bpl.n	800217a <_printf_i+0x1c2>
 8002176:	6019      	str	r1, [r3, #0]
 8002178:	e002      	b.n	8002180 <_printf_i+0x1c8>
 800217a:	0668      	lsls	r0, r5, #25
 800217c:	d5fb      	bpl.n	8002176 <_printf_i+0x1be>
 800217e:	8019      	strh	r1, [r3, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	4616      	mov	r6, r2
 8002184:	6123      	str	r3, [r4, #16]
 8002186:	e7bc      	b.n	8002102 <_printf_i+0x14a>
 8002188:	6833      	ldr	r3, [r6, #0]
 800218a:	2100      	movs	r1, #0
 800218c:	1d1a      	adds	r2, r3, #4
 800218e:	6032      	str	r2, [r6, #0]
 8002190:	681e      	ldr	r6, [r3, #0]
 8002192:	6862      	ldr	r2, [r4, #4]
 8002194:	4630      	mov	r0, r6
 8002196:	f000 f859 	bl	800224c <memchr>
 800219a:	b108      	cbz	r0, 80021a0 <_printf_i+0x1e8>
 800219c:	1b80      	subs	r0, r0, r6
 800219e:	6060      	str	r0, [r4, #4]
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	6123      	str	r3, [r4, #16]
 80021a4:	2300      	movs	r3, #0
 80021a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021aa:	e7aa      	b.n	8002102 <_printf_i+0x14a>
 80021ac:	4632      	mov	r2, r6
 80021ae:	4649      	mov	r1, r9
 80021b0:	4640      	mov	r0, r8
 80021b2:	6923      	ldr	r3, [r4, #16]
 80021b4:	47d0      	blx	sl
 80021b6:	3001      	adds	r0, #1
 80021b8:	d0ad      	beq.n	8002116 <_printf_i+0x15e>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	079b      	lsls	r3, r3, #30
 80021be:	d413      	bmi.n	80021e8 <_printf_i+0x230>
 80021c0:	68e0      	ldr	r0, [r4, #12]
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	4298      	cmp	r0, r3
 80021c6:	bfb8      	it	lt
 80021c8:	4618      	movlt	r0, r3
 80021ca:	e7a6      	b.n	800211a <_printf_i+0x162>
 80021cc:	2301      	movs	r3, #1
 80021ce:	4632      	mov	r2, r6
 80021d0:	4649      	mov	r1, r9
 80021d2:	4640      	mov	r0, r8
 80021d4:	47d0      	blx	sl
 80021d6:	3001      	adds	r0, #1
 80021d8:	d09d      	beq.n	8002116 <_printf_i+0x15e>
 80021da:	3501      	adds	r5, #1
 80021dc:	68e3      	ldr	r3, [r4, #12]
 80021de:	9903      	ldr	r1, [sp, #12]
 80021e0:	1a5b      	subs	r3, r3, r1
 80021e2:	42ab      	cmp	r3, r5
 80021e4:	dcf2      	bgt.n	80021cc <_printf_i+0x214>
 80021e6:	e7eb      	b.n	80021c0 <_printf_i+0x208>
 80021e8:	2500      	movs	r5, #0
 80021ea:	f104 0619 	add.w	r6, r4, #25
 80021ee:	e7f5      	b.n	80021dc <_printf_i+0x224>
 80021f0:	0800235f 	.word	0x0800235f
 80021f4:	08002370 	.word	0x08002370

080021f8 <memmove>:
 80021f8:	4288      	cmp	r0, r1
 80021fa:	b510      	push	{r4, lr}
 80021fc:	eb01 0402 	add.w	r4, r1, r2
 8002200:	d902      	bls.n	8002208 <memmove+0x10>
 8002202:	4284      	cmp	r4, r0
 8002204:	4623      	mov	r3, r4
 8002206:	d807      	bhi.n	8002218 <memmove+0x20>
 8002208:	1e43      	subs	r3, r0, #1
 800220a:	42a1      	cmp	r1, r4
 800220c:	d008      	beq.n	8002220 <memmove+0x28>
 800220e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002216:	e7f8      	b.n	800220a <memmove+0x12>
 8002218:	4601      	mov	r1, r0
 800221a:	4402      	add	r2, r0
 800221c:	428a      	cmp	r2, r1
 800221e:	d100      	bne.n	8002222 <memmove+0x2a>
 8002220:	bd10      	pop	{r4, pc}
 8002222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800222a:	e7f7      	b.n	800221c <memmove+0x24>

0800222c <_sbrk_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	2300      	movs	r3, #0
 8002230:	4d05      	ldr	r5, [pc, #20]	@ (8002248 <_sbrk_r+0x1c>)
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7fe f992 	bl	8000560 <_sbrk>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_sbrk_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_sbrk_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000284 	.word	0x20000284

0800224c <memchr>:
 800224c:	4603      	mov	r3, r0
 800224e:	b510      	push	{r4, lr}
 8002250:	b2c9      	uxtb	r1, r1
 8002252:	4402      	add	r2, r0
 8002254:	4293      	cmp	r3, r2
 8002256:	4618      	mov	r0, r3
 8002258:	d101      	bne.n	800225e <memchr+0x12>
 800225a:	2000      	movs	r0, #0
 800225c:	e003      	b.n	8002266 <memchr+0x1a>
 800225e:	7804      	ldrb	r4, [r0, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	428c      	cmp	r4, r1
 8002264:	d1f6      	bne.n	8002254 <memchr+0x8>
 8002266:	bd10      	pop	{r4, pc}

08002268 <memcpy>:
 8002268:	440a      	add	r2, r1
 800226a:	4291      	cmp	r1, r2
 800226c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002270:	d100      	bne.n	8002274 <memcpy+0xc>
 8002272:	4770      	bx	lr
 8002274:	b510      	push	{r4, lr}
 8002276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800227a:	4291      	cmp	r1, r2
 800227c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002280:	d1f9      	bne.n	8002276 <memcpy+0xe>
 8002282:	bd10      	pop	{r4, pc}

08002284 <_realloc_r>:
 8002284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002288:	4680      	mov	r8, r0
 800228a:	4615      	mov	r5, r2
 800228c:	460c      	mov	r4, r1
 800228e:	b921      	cbnz	r1, 800229a <_realloc_r+0x16>
 8002290:	4611      	mov	r1, r2
 8002292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002296:	f7ff bc39 	b.w	8001b0c <_malloc_r>
 800229a:	b92a      	cbnz	r2, 80022a8 <_realloc_r+0x24>
 800229c:	f7ff fbcc 	bl	8001a38 <_free_r>
 80022a0:	2400      	movs	r4, #0
 80022a2:	4620      	mov	r0, r4
 80022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a8:	f000 f81a 	bl	80022e0 <_malloc_usable_size_r>
 80022ac:	4285      	cmp	r5, r0
 80022ae:	4606      	mov	r6, r0
 80022b0:	d802      	bhi.n	80022b8 <_realloc_r+0x34>
 80022b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80022b6:	d8f4      	bhi.n	80022a2 <_realloc_r+0x1e>
 80022b8:	4629      	mov	r1, r5
 80022ba:	4640      	mov	r0, r8
 80022bc:	f7ff fc26 	bl	8001b0c <_malloc_r>
 80022c0:	4607      	mov	r7, r0
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d0ec      	beq.n	80022a0 <_realloc_r+0x1c>
 80022c6:	42b5      	cmp	r5, r6
 80022c8:	462a      	mov	r2, r5
 80022ca:	4621      	mov	r1, r4
 80022cc:	bf28      	it	cs
 80022ce:	4632      	movcs	r2, r6
 80022d0:	f7ff ffca 	bl	8002268 <memcpy>
 80022d4:	4621      	mov	r1, r4
 80022d6:	4640      	mov	r0, r8
 80022d8:	f7ff fbae 	bl	8001a38 <_free_r>
 80022dc:	463c      	mov	r4, r7
 80022de:	e7e0      	b.n	80022a2 <_realloc_r+0x1e>

080022e0 <_malloc_usable_size_r>:
 80022e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022e4:	1f18      	subs	r0, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bfbc      	itt	lt
 80022ea:	580b      	ldrlt	r3, [r1, r0]
 80022ec:	18c0      	addlt	r0, r0, r3
 80022ee:	4770      	bx	lr

080022f0 <_init>:
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f2:	bf00      	nop
 80022f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f6:	bc08      	pop	{r3}
 80022f8:	469e      	mov	lr, r3
 80022fa:	4770      	bx	lr

080022fc <_fini>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	bf00      	nop
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr
