
USR-K7-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002370  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800247c  0800247c  0000347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800257c  0800257c  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002584  08002584  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002584  08002584  00003584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002588  08002588  00003588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800258c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000005c  080025e8  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  080025e8  00004614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d66  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001507  00000000  00000000  0000adeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c0  00000000  00000000  0000c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017173  00000000  00000000  0000ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083e0  00000000  00000000  00023f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ff7  00000000  00000000  0002c353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae34a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d60  00000000  00000000  000ae390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b00f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002464 	.word	0x08002464

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002464 	.word	0x08002464

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <USRK7_transmit>:

UART_HandleTypeDef *USRK7_UART;
char USRK7_BUFFER[USRK7_BUFFER_SIZE];
char USRK7_COMMAND[USRK7_COMMAND_SIZE];

HAL_StatusTypeDef USRK7_transmit(const char *command, int timeout) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(USRK7_UART, (uint8_t*) command, strlen(command),
 8000166:	4b08      	ldr	r3, [pc, #32]	@ (8000188 <USRK7_transmit+0x2c>)
 8000168:	681c      	ldr	r4, [r3, #0]
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f7ff ffee 	bl	800014c <strlen>
 8000170:	4603      	mov	r3, r0
 8000172:	b29a      	uxth	r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	6879      	ldr	r1, [r7, #4]
 8000178:	4620      	mov	r0, r4
 800017a:	f001 fa8d 	bl	8001698 <HAL_UART_Transmit>
 800017e:	4603      	mov	r3, r0
			timeout);
}
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bd90      	pop	{r4, r7, pc}
 8000188:	20000078 	.word	0x20000078

0800018c <USRK7_receive>:

USRK7_Status USRK7_receive(int attempt, int timeout) {
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]
	memset(USRK7_BUFFER, 0, USRK7_BUFFER_SIZE);
 8000196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800019a:	2100      	movs	r1, #0
 800019c:	480f      	ldr	r0, [pc, #60]	@ (80001dc <USRK7_receive+0x50>)
 800019e:	f001 fcad 	bl	8001afc <memset>

	for (int i = 0; i < attempt; i++) {
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	e010      	b.n	80001ca <USRK7_receive+0x3e>
		HAL_UART_Receive(USRK7_UART, (uint8_t*) USRK7_BUFFER, USRK7_BUFFER_SIZE,
 80001a8:	4b0d      	ldr	r3, [pc, #52]	@ (80001e0 <USRK7_receive+0x54>)
 80001aa:	6818      	ldr	r0, [r3, #0]
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80001b2:	490a      	ldr	r1, [pc, #40]	@ (80001dc <USRK7_receive+0x50>)
 80001b4:	f001 faf3 	bl	800179e <HAL_UART_Receive>
				timeout);

		if (strlen(USRK7_BUFFER) >= 1) {
 80001b8:	4b08      	ldr	r3, [pc, #32]	@ (80001dc <USRK7_receive+0x50>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <USRK7_receive+0x38>
			return USRK7_OK;
 80001c0:	2300      	movs	r3, #0
 80001c2:	e007      	b.n	80001d4 <USRK7_receive+0x48>
	for (int i = 0; i < attempt; i++) {
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	3301      	adds	r3, #1
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	68fa      	ldr	r2, [r7, #12]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	dbea      	blt.n	80001a8 <USRK7_receive+0x1c>
		}
	}

	return USRK7_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	20000078 	.word	0x20000078

080001e4 <USRK7_transmit_receive>:

USRK7_Status USRK7_transmit_receive(const char *command, int tTimeout,
		int rTimeout, int attempt) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
 80001f0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef transmitResult = USRK7_transmit(command, tTimeout);
 80001f2:	68b9      	ldr	r1, [r7, #8]
 80001f4:	68f8      	ldr	r0, [r7, #12]
 80001f6:	f7ff ffb1 	bl	800015c <USRK7_transmit>
 80001fa:	4603      	mov	r3, r0
 80001fc:	75fb      	strb	r3, [r7, #23]

	if (transmitResult != HAL_OK) {
 80001fe:	7dfb      	ldrb	r3, [r7, #23]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <USRK7_transmit_receive+0x24>
		return USRK7_ERROR;
 8000204:	2301      	movs	r3, #1
 8000206:	e004      	b.n	8000212 <USRK7_transmit_receive+0x2e>
	}

	return USRK7_receive(attempt, rTimeout);
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	6838      	ldr	r0, [r7, #0]
 800020c:	f7ff ffbe 	bl	800018c <USRK7_receive>
 8000210:	4603      	mov	r3, r0
}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <USRK7_init>:

int USRK7_init(UART_HandleTypeDef *uart) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
	USRK7_UART = uart;
 8000224:	4a5b      	ldr	r2, [pc, #364]	@ (8000394 <USRK7_init+0x178>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	6013      	str	r3, [r2, #0]

	USRK7_Status status = USRK7_OK;
 800022a:	2300      	movs	r3, #0
 800022c:	73fb      	strb	r3, [r7, #15]

	sprintf(USRK7_COMMAND, "AT+ENTM\r\n");
 800022e:	495a      	ldr	r1, [pc, #360]	@ (8000398 <USRK7_init+0x17c>)
 8000230:	485a      	ldr	r0, [pc, #360]	@ (800039c <USRK7_init+0x180>)
 8000232:	f001 fc43 	bl	8001abc <siprintf>
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 8000236:	230a      	movs	r3, #10
 8000238:	2296      	movs	r2, #150	@ 0x96
 800023a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800023e:	4857      	ldr	r0, [pc, #348]	@ (800039c <USRK7_init+0x180>)
 8000240:	f7ff ffd0 	bl	80001e4 <USRK7_transmit_receive>
 8000244:	4603      	mov	r3, r0
 8000246:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <USRK7_init+0x36>
		return status;
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	e09b      	b.n	800038a <USRK7_init+0x16e>
	}

	sprintf(USRK7_COMMAND, "+++");
 8000252:	4953      	ldr	r1, [pc, #332]	@ (80003a0 <USRK7_init+0x184>)
 8000254:	4851      	ldr	r0, [pc, #324]	@ (800039c <USRK7_init+0x180>)
 8000256:	f001 fc31 	bl	8001abc <siprintf>
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 800025a:	230a      	movs	r3, #10
 800025c:	2296      	movs	r2, #150	@ 0x96
 800025e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000262:	484e      	ldr	r0, [pc, #312]	@ (800039c <USRK7_init+0x180>)
 8000264:	f7ff ffbe 	bl	80001e4 <USRK7_transmit_receive>
 8000268:	4603      	mov	r3, r0
 800026a:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <USRK7_init+0x5a>
		return status;
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	e089      	b.n	800038a <USRK7_init+0x16e>
	}

	if (!strstr(USRK7_BUFFER, "a")) {
 8000276:	2161      	movs	r1, #97	@ 0x61
 8000278:	484a      	ldr	r0, [pc, #296]	@ (80003a4 <USRK7_init+0x188>)
 800027a:	f001 fc47 	bl	8001b0c <strchr>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d101      	bne.n	8000288 <USRK7_init+0x6c>
		return USRK7_ERROR;
 8000284:	2301      	movs	r3, #1
 8000286:	e080      	b.n	800038a <USRK7_init+0x16e>
	}

	HAL_Delay(130);
 8000288:	2082      	movs	r0, #130	@ 0x82
 800028a:	f000 fae7 	bl	800085c <HAL_Delay>
	sprintf(USRK7_COMMAND, "a");
 800028e:	4946      	ldr	r1, [pc, #280]	@ (80003a8 <USRK7_init+0x18c>)
 8000290:	4842      	ldr	r0, [pc, #264]	@ (800039c <USRK7_init+0x180>)
 8000292:	f001 fc13 	bl	8001abc <siprintf>
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 8000296:	230a      	movs	r3, #10
 8000298:	2296      	movs	r2, #150	@ 0x96
 800029a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800029e:	483f      	ldr	r0, [pc, #252]	@ (800039c <USRK7_init+0x180>)
 80002a0:	f7ff ffa0 	bl	80001e4 <USRK7_transmit_receive>
 80002a4:	4603      	mov	r3, r0
 80002a6:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <USRK7_init+0x96>
		return status;
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	e06b      	b.n	800038a <USRK7_init+0x16e>
	}

	if (!strstr(USRK7_BUFFER, "+ok")) {
 80002b2:	493e      	ldr	r1, [pc, #248]	@ (80003ac <USRK7_init+0x190>)
 80002b4:	483b      	ldr	r0, [pc, #236]	@ (80003a4 <USRK7_init+0x188>)
 80002b6:	f001 fc36 	bl	8001b26 <strstr>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d101      	bne.n	80002c4 <USRK7_init+0xa8>
		return USRK7_ERROR;
 80002c0:	2301      	movs	r3, #1
 80002c2:	e062      	b.n	800038a <USRK7_init+0x16e>
	}

	sprintf(USRK7_COMMAND, "AT+WANN=static,%s,%s,%s\r\n", USRK7_IP,
 80002c4:	4b3a      	ldr	r3, [pc, #232]	@ (80003b0 <USRK7_init+0x194>)
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	4b3a      	ldr	r3, [pc, #232]	@ (80003b4 <USRK7_init+0x198>)
 80002ca:	4a3a      	ldr	r2, [pc, #232]	@ (80003b4 <USRK7_init+0x198>)
 80002cc:	493a      	ldr	r1, [pc, #232]	@ (80003b8 <USRK7_init+0x19c>)
 80002ce:	4833      	ldr	r0, [pc, #204]	@ (800039c <USRK7_init+0x180>)
 80002d0:	f001 fbf4 	bl	8001abc <siprintf>
	USRK7_SUBMASK, USRK7_GATEWAY);
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 80002d4:	230a      	movs	r3, #10
 80002d6:	2296      	movs	r2, #150	@ 0x96
 80002d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002dc:	482f      	ldr	r0, [pc, #188]	@ (800039c <USRK7_init+0x180>)
 80002de:	f7ff ff81 	bl	80001e4 <USRK7_transmit_receive>
 80002e2:	4603      	mov	r3, r0
 80002e4:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <USRK7_init+0xd4>
		return status;
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
 80002ee:	e04c      	b.n	800038a <USRK7_init+0x16e>
	}

	sprintf(USRK7_COMMAND, "AT+SOCKA1=UDPC,%s,%d\r\n", USRK7_SERVER_IP,
 80002f0:	f640 5347 	movw	r3, #3399	@ 0xd47
 80002f4:	4a31      	ldr	r2, [pc, #196]	@ (80003bc <USRK7_init+0x1a0>)
 80002f6:	4932      	ldr	r1, [pc, #200]	@ (80003c0 <USRK7_init+0x1a4>)
 80002f8:	4828      	ldr	r0, [pc, #160]	@ (800039c <USRK7_init+0x180>)
 80002fa:	f001 fbdf 	bl	8001abc <siprintf>
	USRK7_SERVER_PORT);
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 80002fe:	230a      	movs	r3, #10
 8000300:	2296      	movs	r2, #150	@ 0x96
 8000302:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000306:	4825      	ldr	r0, [pc, #148]	@ (800039c <USRK7_init+0x180>)
 8000308:	f7ff ff6c 	bl	80001e4 <USRK7_transmit_receive>
 800030c:	4603      	mov	r3, r0
 800030e:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <USRK7_init+0xfe>
		return status;
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	e037      	b.n	800038a <USRK7_init+0x16e>
	}

	sprintf(USRK7_COMMAND, "AT+DNS=%s\r\n", USRK7_DNS);
 800031a:	4a2a      	ldr	r2, [pc, #168]	@ (80003c4 <USRK7_init+0x1a8>)
 800031c:	492a      	ldr	r1, [pc, #168]	@ (80003c8 <USRK7_init+0x1ac>)
 800031e:	481f      	ldr	r0, [pc, #124]	@ (800039c <USRK7_init+0x180>)
 8000320:	f001 fbcc 	bl	8001abc <siprintf>
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 8000324:	230a      	movs	r3, #10
 8000326:	2296      	movs	r2, #150	@ 0x96
 8000328:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800032c:	481b      	ldr	r0, [pc, #108]	@ (800039c <USRK7_init+0x180>)
 800032e:	f7ff ff59 	bl	80001e4 <USRK7_transmit_receive>
 8000332:	4603      	mov	r3, r0
 8000334:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <USRK7_init+0x124>
		return status;
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	e024      	b.n	800038a <USRK7_init+0x16e>
	}

	sprintf(USRK7_COMMAND, "AT+Z\r\n");
 8000340:	4922      	ldr	r1, [pc, #136]	@ (80003cc <USRK7_init+0x1b0>)
 8000342:	4816      	ldr	r0, [pc, #88]	@ (800039c <USRK7_init+0x180>)
 8000344:	f001 fbba 	bl	8001abc <siprintf>
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 8000348:	230a      	movs	r3, #10
 800034a:	2296      	movs	r2, #150	@ 0x96
 800034c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000350:	4812      	ldr	r0, [pc, #72]	@ (800039c <USRK7_init+0x180>)
 8000352:	f7ff ff47 	bl	80001e4 <USRK7_transmit_receive>
 8000356:	4603      	mov	r3, r0
 8000358:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <USRK7_init+0x148>
		return status;
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	e012      	b.n	800038a <USRK7_init+0x16e>
	}

	sprintf(USRK7_COMMAND, "AT+ENTM\r\n");
 8000364:	490c      	ldr	r1, [pc, #48]	@ (8000398 <USRK7_init+0x17c>)
 8000366:	480d      	ldr	r0, [pc, #52]	@ (800039c <USRK7_init+0x180>)
 8000368:	f001 fba8 	bl	8001abc <siprintf>
	status = USRK7_transmit_receive(USRK7_COMMAND, 1000, 150, 10);
 800036c:	230a      	movs	r3, #10
 800036e:	2296      	movs	r2, #150	@ 0x96
 8000370:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000374:	4809      	ldr	r0, [pc, #36]	@ (800039c <USRK7_init+0x180>)
 8000376:	f7ff ff35 	bl	80001e4 <USRK7_transmit_receive>
 800037a:	4603      	mov	r3, r0
 800037c:	73fb      	strb	r3, [r7, #15]
	if (status != USRK7_OK) {
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <USRK7_init+0x16c>
		return status;
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	e000      	b.n	800038a <USRK7_init+0x16e>
	}

	return 0;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000078 	.word	0x20000078
 8000398:	0800247c 	.word	0x0800247c
 800039c:	2000027c 	.word	0x2000027c
 80003a0:	08002488 	.word	0x08002488
 80003a4:	2000007c 	.word	0x2000007c
 80003a8:	0800248c 	.word	0x0800248c
 80003ac:	08002490 	.word	0x08002490
 80003b0:	080024bc 	.word	0x080024bc
 80003b4:	08002494 	.word	0x08002494
 80003b8:	080024a0 	.word	0x080024a0
 80003bc:	080024c8 	.word	0x080024c8
 80003c0:	080024d8 	.word	0x080024d8
 80003c4:	080024f0 	.word	0x080024f0
 80003c8:	080024f8 	.word	0x080024f8
 80003cc:	08002504 	.word	0x08002504

080003d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003d6:	f000 f9df 	bl	8000798 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003da:	f000 f827 	bl	800042c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003de:	f000 f88b 	bl	80004f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80003e2:	f000 f85f 	bl	80004a4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	USRK7_Status status = USRK7_init(&huart2);
 80003e6:	480e      	ldr	r0, [pc, #56]	@ (8000420 <main+0x50>)
 80003e8:	f7ff ff18 	bl	800021c <USRK7_init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	71fb      	strb	r3, [r7, #7]
	if (status == USRK7_OK) {
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d108      	bne.n	8000408 <main+0x38>
		USRK7_transmit("This is message", 1000);
 80003f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003fa:	480a      	ldr	r0, [pc, #40]	@ (8000424 <main+0x54>)
 80003fc:	f7ff feae 	bl	800015c <USRK7_transmit>
		USRK7_receive(10, 150);
 8000400:	2196      	movs	r1, #150	@ 0x96
 8000402:	200a      	movs	r0, #10
 8000404:	f7ff fec2 	bl	800018c <USRK7_receive>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040c:	4806      	ldr	r0, [pc, #24]	@ (8000428 <main+0x58>)
 800040e:	f000 fcc9 	bl	8000da4 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000412:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000416:	f000 fa21 	bl	800085c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800041a:	bf00      	nop
 800041c:	e7f4      	b.n	8000408 <main+0x38>
 800041e:	bf00      	nop
 8000420:	2000047c 	.word	0x2000047c
 8000424:	0800250c 	.word	0x0800250c
 8000428:	40011000 	.word	0x40011000

0800042c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b090      	sub	sp, #64	@ 0x40
 8000430:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	2228      	movs	r2, #40	@ 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fb5e 	bl	8001afc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000452:	2301      	movs	r3, #1
 8000454:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000456:	2310      	movs	r3, #16
 8000458:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045a:	2300      	movs	r3, #0
 800045c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fcb8 	bl	8000dd8 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x46>
		Error_Handler();
 800046e:	f000 f883 	bl	8000578 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000472:	230f      	movs	r3, #15
 8000474:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f000 ff26 	bl	80012dc <HAL_RCC_ClockConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x6e>
		Error_Handler();
 8000496:	f000 f86f 	bl	8000578 <Error_Handler>
	}
}
 800049a:	bf00      	nop
 800049c:	3740      	adds	r7, #64	@ 0x40
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <MX_USART2_UART_Init+0x50>)
 80004ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004ca:	220c      	movs	r2, #12
 80004cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_USART2_UART_Init+0x4c>)
 80004dc:	f001 f88c 	bl	80015f8 <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80004e6:	f000 f847 	bl	8000578 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000047c 	.word	0x2000047c
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <MX_GPIO_Init+0x78>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <MX_GPIO_Init+0x78>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_GPIO_Init+0x78>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0310 	and.w	r3, r3, #16
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_GPIO_Init+0x78>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <MX_GPIO_Init+0x78>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_GPIO_Init+0x78>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000542:	480c      	ldr	r0, [pc, #48]	@ (8000574 <MX_GPIO_Init+0x7c>)
 8000544:	f000 fc16 	bl	8000d74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000548:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800054c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	4619      	mov	r1, r3
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <MX_GPIO_Init+0x7c>)
 8000562:	f000 fa83 	bl	8000a6c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	40011000 	.word	0x40011000

08000578 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <HAL_MspInit+0x5c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <HAL_MspInit+0x5c>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <HAL_MspInit+0x60>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <HAL_MspInit+0x60>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <HAL_UART_MspInit+0x88>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d12f      	bne.n	8000668 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000612:	61d3      	str	r3, [r2, #28]
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000638:	2304      	movs	r3, #4
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <HAL_UART_MspInit+0x90>)
 800064c:	f000 fa0e 	bl	8000a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000650:	2308      	movs	r3, #8
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_UART_MspInit+0x90>)
 8000664:	f000 fa02 	bl	8000a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40004400 	.word	0x40004400
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <MemManage_Handler+0x4>

08000694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f8aa 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006dc:	4a14      	ldr	r2, [pc, #80]	@ (8000730 <_sbrk+0x5c>)
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <_sbrk+0x60>)
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <_sbrk+0x64>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <_sbrk+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	429a      	cmp	r2, r3
 8000702:	d207      	bcs.n	8000714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000704:	f001 fa26 	bl	8001b54 <__errno>
 8000708:	4603      	mov	r3, r0
 800070a:	220c      	movs	r2, #12
 800070c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	e009      	b.n	8000728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071a:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <_sbrk+0x64>)
 8000724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20005000 	.word	0x20005000
 8000734:	00000400 	.word	0x00000400
 8000738:	200004c4 	.word	0x200004c4
 800073c:	20000618 	.word	0x20000618

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800074c:	f7ff fff8 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000752:	490c      	ldr	r1, [pc, #48]	@ (8000784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000754:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a09      	ldr	r2, [pc, #36]	@ (800078c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000768:	4c09      	ldr	r4, [pc, #36]	@ (8000790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000776:	f001 f9f3 	bl	8001b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fe29 	bl	80003d0 <main>
  bx lr
 800077e:	4770      	bx	lr
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000788:	0800258c 	.word	0x0800258c
  ldr r2, =_sbss
 800078c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000790:	20000614 	.word	0x20000614

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <HAL_Init+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a07      	ldr	r2, [pc, #28]	@ (80007c0 <HAL_Init+0x28>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f92b 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	200f      	movs	r0, #15
 80007b0:	f000 f808 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff fee6 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_InitTick+0x54>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_InitTick+0x58>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f935 	bl	8000a52 <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00e      	b.n	8000810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d80a      	bhi.n	800080e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f000 f90b 	bl	8000a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000804:	4a06      	ldr	r2, [pc, #24]	@ (8000820 <HAL_InitTick+0x5c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	e000      	b.n	8000810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000000 	.word	0x20000000
 800081c:	20000008 	.word	0x20000008
 8000820:	20000004 	.word	0x20000004

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_IncTick+0x1c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_IncTick+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a03      	ldr	r2, [pc, #12]	@ (8000844 <HAL_IncTick+0x20>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000008 	.word	0x20000008
 8000844:	200004c8 	.word	0x200004c8

08000848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b02      	ldr	r3, [pc, #8]	@ (8000858 <HAL_GetTick+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200004c8 	.word	0x200004c8

0800085c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff fff0 	bl	8000848 <HAL_GetTick>
 8000868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000874:	d005      	beq.n	8000882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <HAL_Delay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000882:	bf00      	nop
 8000884:	f7ff ffe0 	bl	8000848 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d8f7      	bhi.n	8000884 <HAL_Delay+0x28>
  {
  }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	@ (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	@ (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	@ 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	@ 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff90 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff49 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff5e 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff90 	bl	800095c <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5f 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffb0 	bl	80009c0 <SysTick_Config>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e169      	b.n	8000d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a80:	2201      	movs	r2, #1
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	f040 8158 	bne.w	8000d4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d0c <HAL_GPIO_Init+0x2a0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d05e      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a98      	ldr	r2, [pc, #608]	@ (8000d0c <HAL_GPIO_Init+0x2a0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d875      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000aae:	4a98      	ldr	r2, [pc, #608]	@ (8000d10 <HAL_GPIO_Init+0x2a4>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d058      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a96      	ldr	r2, [pc, #600]	@ (8000d10 <HAL_GPIO_Init+0x2a4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d86f      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000aba:	4a96      	ldr	r2, [pc, #600]	@ (8000d14 <HAL_GPIO_Init+0x2a8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d052      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000ac0:	4a94      	ldr	r2, [pc, #592]	@ (8000d14 <HAL_GPIO_Init+0x2a8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d869      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ac6:	4a94      	ldr	r2, [pc, #592]	@ (8000d18 <HAL_GPIO_Init+0x2ac>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d04c      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000acc:	4a92      	ldr	r2, [pc, #584]	@ (8000d18 <HAL_GPIO_Init+0x2ac>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d863      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ad2:	4a92      	ldr	r2, [pc, #584]	@ (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d046      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a90      	ldr	r2, [pc, #576]	@ (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d85d      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d82a      	bhi.n	8000b38 <HAL_GPIO_Init+0xcc>
 8000ae2:	2b12      	cmp	r3, #18
 8000ae4:	d859      	bhi.n	8000b9a <HAL_GPIO_Init+0x12e>
 8000ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aec <HAL_GPIO_Init+0x80>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b67 	.word	0x08000b67
 8000af0:	08000b41 	.word	0x08000b41
 8000af4:	08000b53 	.word	0x08000b53
 8000af8:	08000b95 	.word	0x08000b95
 8000afc:	08000b9b 	.word	0x08000b9b
 8000b00:	08000b9b 	.word	0x08000b9b
 8000b04:	08000b9b 	.word	0x08000b9b
 8000b08:	08000b9b 	.word	0x08000b9b
 8000b0c:	08000b9b 	.word	0x08000b9b
 8000b10:	08000b9b 	.word	0x08000b9b
 8000b14:	08000b9b 	.word	0x08000b9b
 8000b18:	08000b9b 	.word	0x08000b9b
 8000b1c:	08000b9b 	.word	0x08000b9b
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b9b 	.word	0x08000b9b
 8000b28:	08000b9b 	.word	0x08000b9b
 8000b2c:	08000b9b 	.word	0x08000b9b
 8000b30:	08000b49 	.word	0x08000b49
 8000b34:	08000b5d 	.word	0x08000b5d
 8000b38:	4a79      	ldr	r2, [pc, #484]	@ (8000d20 <HAL_GPIO_Init+0x2b4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d013      	beq.n	8000b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3e:	e02c      	b.n	8000b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	623b      	str	r3, [r7, #32]
          break;
 8000b46:	e029      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e024      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	3308      	adds	r3, #8
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e01f      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	330c      	adds	r3, #12
 8000b62:	623b      	str	r3, [r7, #32]
          break;
 8000b64:	e01a      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	623b      	str	r3, [r7, #32]
          break;
 8000b72:	e013      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d105      	bne.n	8000b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	611a      	str	r2, [r3, #16]
          break;
 8000b86:	e009      	b.n	8000b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	615a      	str	r2, [r3, #20]
          break;
 8000b92:	e003      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e000      	b.n	8000b9c <HAL_GPIO_Init+0x130>
          break;
 8000b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2bff      	cmp	r3, #255	@ 0xff
 8000ba0:	d801      	bhi.n	8000ba6 <HAL_GPIO_Init+0x13a>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	e001      	b.n	8000baa <HAL_GPIO_Init+0x13e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	2bff      	cmp	r3, #255	@ 0xff
 8000bb0:	d802      	bhi.n	8000bb8 <HAL_GPIO_Init+0x14c>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	e002      	b.n	8000bbe <HAL_GPIO_Init+0x152>
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bba:	3b08      	subs	r3, #8
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	6a39      	ldr	r1, [r7, #32]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bec:	4b4d      	ldr	r3, [pc, #308]	@ (8000d24 <HAL_GPIO_Init+0x2b8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d24 <HAL_GPIO_Init+0x2b8>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <HAL_GPIO_Init+0x2b8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c04:	4a48      	ldr	r2, [pc, #288]	@ (8000d28 <HAL_GPIO_Init+0x2bc>)
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a40      	ldr	r2, [pc, #256]	@ (8000d2c <HAL_GPIO_Init+0x2c0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1ec>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3f      	ldr	r2, [pc, #252]	@ (8000d30 <HAL_GPIO_Init+0x2c4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1e8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1e4>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a3d      	ldr	r2, [pc, #244]	@ (8000d38 <HAL_GPIO_Init+0x2cc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1e0>
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e006      	b.n	8000c5a <HAL_GPIO_Init+0x1ee>
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	e004      	b.n	8000c5a <HAL_GPIO_Init+0x1ee>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e002      	b.n	8000c5a <HAL_GPIO_Init+0x1ee>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <HAL_GPIO_Init+0x1ee>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c5c:	f002 0203 	and.w	r2, r2, #3
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	4093      	lsls	r3, r2
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c6a:	492f      	ldr	r1, [pc, #188]	@ (8000d28 <HAL_GPIO_Init+0x2bc>)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3302      	adds	r3, #2
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	492c      	ldr	r1, [pc, #176]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	608b      	str	r3, [r1, #8]
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	4928      	ldr	r1, [pc, #160]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cac:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	4922      	ldr	r1, [pc, #136]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60cb      	str	r3, [r1, #12]
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	491e      	ldr	r1, [pc, #120]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4918      	ldr	r1, [pc, #96]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4914      	ldr	r1, [pc, #80]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d021      	beq.n	8000d40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	490e      	ldr	r1, [pc, #56]	@ (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
 8000d08:	e021      	b.n	8000d4e <HAL_GPIO_Init+0x2e2>
 8000d0a:	bf00      	nop
 8000d0c:	10320000 	.word	0x10320000
 8000d10:	10310000 	.word	0x10310000
 8000d14:	10220000 	.word	0x10220000
 8000d18:	10210000 	.word	0x10210000
 8000d1c:	10120000 	.word	0x10120000
 8000d20:	10110000 	.word	0x10110000
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	40011000 	.word	0x40011000
 8000d38:	40011400 	.word	0x40011400
 8000d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_GPIO_Init+0x304>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	4909      	ldr	r1, [pc, #36]	@ (8000d70 <HAL_GPIO_Init+0x304>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	3301      	adds	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f47f ae8e 	bne.w	8000a80 <HAL_GPIO_Init+0x14>
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	372c      	adds	r7, #44	@ 0x2c
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
 8000d80:	4613      	mov	r3, r2
 8000d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d84:	787b      	ldrb	r3, [r7, #1]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d90:	e003      	b.n	8000d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	041a      	lsls	r2, r3, #16
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	611a      	str	r2, [r3, #16]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	041a      	lsls	r2, r3, #16
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43d9      	mvns	r1, r3
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	611a      	str	r2, [r3, #16]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e272      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 8087 	beq.w	8000f06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df8:	4b92      	ldr	r3, [pc, #584]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 030c 	and.w	r3, r3, #12
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d00c      	beq.n	8000e1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e04:	4b8f      	ldr	r3, [pc, #572]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d112      	bne.n	8000e36 <HAL_RCC_OscConfig+0x5e>
 8000e10:	4b8c      	ldr	r3, [pc, #560]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1c:	d10b      	bne.n	8000e36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1e:	4b89      	ldr	r3, [pc, #548]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d06c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x12c>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d168      	bne.n	8000f04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e24c      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e3e:	d106      	bne.n	8000e4e <HAL_RCC_OscConfig+0x76>
 8000e40:	4b80      	ldr	r3, [pc, #512]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a7f      	ldr	r2, [pc, #508]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e02e      	b.n	8000eac <HAL_RCC_OscConfig+0xd4>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x98>
 8000e56:	4b7b      	ldr	r3, [pc, #492]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b78      	ldr	r3, [pc, #480]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a77      	ldr	r2, [pc, #476]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e01d      	b.n	8000eac <HAL_RCC_OscConfig+0xd4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0xbc>
 8000e7a:	4b72      	ldr	r3, [pc, #456]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a71      	ldr	r2, [pc, #452]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b6f      	ldr	r3, [pc, #444]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e00b      	b.n	8000eac <HAL_RCC_OscConfig+0xd4>
 8000e94:	4b6b      	ldr	r3, [pc, #428]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a6a      	ldr	r2, [pc, #424]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b68      	ldr	r3, [pc, #416]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a67      	ldr	r2, [pc, #412]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d013      	beq.n	8000edc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fcc8 	bl	8000848 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fcc4 	bl	8000848 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	@ 0x64
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e200      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	4b5d      	ldr	r3, [pc, #372]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0xe4>
 8000eda:	e014      	b.n	8000f06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fcb4 	bl	8000848 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fcb0 	bl	8000848 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	@ 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e1ec      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef6:	4b53      	ldr	r3, [pc, #332]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x10c>
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d063      	beq.n	8000fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f12:	4b4c      	ldr	r3, [pc, #304]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f1e:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d11c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x18c>
 8000f2a:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d116      	bne.n	8000f64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f36:	4b43      	ldr	r3, [pc, #268]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <HAL_RCC_OscConfig+0x176>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d001      	beq.n	8000f4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e1c0      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	4939      	ldr	r1, [pc, #228]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f62:	e03a      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d020      	beq.n	8000fae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6c:	4b36      	ldr	r3, [pc, #216]	@ (8001048 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fc69 	bl	8000848 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fc65 	bl	8000848 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e1a1      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4927      	ldr	r1, [pc, #156]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
 8000fac:	e015      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc48 	bl	8000848 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc44 	bl	8000848 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e180      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d03a      	beq.n	800105c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d019      	beq.n	8001022 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_RCC_OscConfig+0x274>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff4:	f7ff fc28 	bl	8000848 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fc24 	bl	8000848 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e160      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <HAL_RCC_OscConfig+0x26c>)
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 face 	bl	80015bc <RCC_Delay>
 8001020:	e01c      	b.n	800105c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_RCC_OscConfig+0x274>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001028:	f7ff fc0e 	bl	8000848 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102e:	e00f      	b.n	8001050 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fc0a 	bl	8000848 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d908      	bls.n	8001050 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e146      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	42420000 	.word	0x42420000
 800104c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	4b92      	ldr	r3, [pc, #584]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e9      	bne.n	8001030 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a6 	beq.w	80011b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106e:	4b8b      	ldr	r3, [pc, #556]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10d      	bne.n	8001096 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b88      	ldr	r3, [pc, #544]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a87      	ldr	r2, [pc, #540]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b85      	ldr	r3, [pc, #532]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001092:	2301      	movs	r3, #1
 8001094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	4b82      	ldr	r3, [pc, #520]	@ (80012a0 <HAL_RCC_OscConfig+0x4c8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d118      	bne.n	80010d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a2:	4b7f      	ldr	r3, [pc, #508]	@ (80012a0 <HAL_RCC_OscConfig+0x4c8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a7e      	ldr	r2, [pc, #504]	@ (80012a0 <HAL_RCC_OscConfig+0x4c8>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fbcb 	bl	8000848 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b6:	f7ff fbc7 	bl	8000848 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b64      	cmp	r3, #100	@ 0x64
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e103      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	4b75      	ldr	r3, [pc, #468]	@ (80012a0 <HAL_RCC_OscConfig+0x4c8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x312>
 80010dc:	4b6f      	ldr	r3, [pc, #444]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a6e      	ldr	r2, [pc, #440]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	e02d      	b.n	8001146 <HAL_RCC_OscConfig+0x36e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x334>
 80010f2:	4b6a      	ldr	r3, [pc, #424]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a69      	ldr	r2, [pc, #420]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6213      	str	r3, [r2, #32]
 80010fe:	4b67      	ldr	r3, [pc, #412]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a66      	ldr	r2, [pc, #408]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	e01c      	b.n	8001146 <HAL_RCC_OscConfig+0x36e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d10c      	bne.n	800112e <HAL_RCC_OscConfig+0x356>
 8001114:	4b61      	ldr	r3, [pc, #388]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a60      	ldr	r2, [pc, #384]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6213      	str	r3, [r2, #32]
 8001120:	4b5e      	ldr	r3, [pc, #376]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a5d      	ldr	r2, [pc, #372]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	e00b      	b.n	8001146 <HAL_RCC_OscConfig+0x36e>
 800112e:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b58      	ldr	r3, [pc, #352]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a57      	ldr	r2, [pc, #348]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 0304 	bic.w	r3, r3, #4
 8001144:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d015      	beq.n	800117a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb7b 	bl	8000848 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fb77 	bl	8000848 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0b1      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116c:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ee      	beq.n	8001156 <HAL_RCC_OscConfig+0x37e>
 8001178:	e014      	b.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fb65 	bl	8000848 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001180:	e00a      	b.n	8001198 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff fb61 	bl	8000848 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001190:	4293      	cmp	r3, r2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e09b      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001198:	4b40      	ldr	r3, [pc, #256]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ee      	bne.n	8001182 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011aa:	4b3c      	ldr	r3, [pc, #240]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a3b      	ldr	r2, [pc, #236]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8087 	beq.w	80012ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d061      	beq.n	8001290 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d146      	bne.n	8001262 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d4:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fb35 	bl	8000848 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e2:	f7ff fb31 	bl	8000848 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e06d      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f4:	4b29      	ldr	r3, [pc, #164]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001208:	d108      	bne.n	800121c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	4921      	ldr	r1, [pc, #132]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a19      	ldr	r1, [r3, #32]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122c:	430b      	orrs	r3, r1
 800122e:	491b      	ldr	r1, [pc, #108]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fb05 	bl	8000848 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fb01 	bl	8000848 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e03d      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x46a>
 8001260:	e035      	b.n	80012ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_RCC_OscConfig+0x4cc>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff faee 	bl	8000848 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff faea 	bl	8000848 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e026      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_RCC_OscConfig+0x4c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x498>
 800128e:	e01e      	b.n	80012ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e019      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
 800129c:	40021000 	.word	0x40021000
 80012a0:	40007000 	.word	0x40007000
 80012a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_RCC_OscConfig+0x500>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0d0      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f0:	4b6a      	ldr	r3, [pc, #424]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d910      	bls.n	8001320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b67      	ldr	r3, [pc, #412]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 0207 	bic.w	r2, r3, #7
 8001306:	4965      	ldr	r1, [pc, #404]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d001      	beq.n	8001320 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0b8      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001338:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001342:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001350:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800135a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135c:	4b50      	ldr	r3, [pc, #320]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	494d      	ldr	r1, [pc, #308]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d040      	beq.n	80013fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d115      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e07f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139a:	4b41      	ldr	r3, [pc, #260]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e073      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	4b3d      	ldr	r3, [pc, #244]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06b      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ba:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f023 0203 	bic.w	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4936      	ldr	r1, [pc, #216]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fa3c 	bl	8000848 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d4:	f7ff fa38 	bl	8000848 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e053      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 020c 	and.w	r2, r3, #12
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1eb      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b27      	ldr	r3, [pc, #156]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d210      	bcs.n	800142c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0207 	bic.w	r2, r3, #7
 8001412:	4922      	ldr	r1, [pc, #136]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e032      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4916      	ldr	r1, [pc, #88]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	490e      	ldr	r1, [pc, #56]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146a:	f000 f821 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	490a      	ldr	r1, [pc, #40]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 800147c:	5ccb      	ldrb	r3, [r1, r3]
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_RCC_ClockConfig+0x1d0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f99a 	bl	80007c4 <HAL_InitTick>

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40022000 	.word	0x40022000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	0800251c 	.word	0x0800251c
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x94>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d002      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x30>
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x36>
 80014de:	e027      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e0:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x98>)
 80014e2:	613b      	str	r3, [r7, #16]
      break;
 80014e4:	e027      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d010      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x94>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0c5b      	lsrs	r3, r3, #17
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_RCC_GetSysClockFreq+0xa0>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x98>)
 8001512:	fb03 f202 	mul.w	r2, r3, r2
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e004      	b.n	800152a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a0c      	ldr	r2, [pc, #48]	@ (8001554 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	613b      	str	r3, [r7, #16]
      break;
 800152e:	e002      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x98>)
 8001532:	613b      	str	r3, [r7, #16]
      break;
 8001534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001536:	693b      	ldr	r3, [r7, #16]
}
 8001538:	4618      	mov	r0, r3
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	007a1200 	.word	0x007a1200
 800154c:	08002534 	.word	0x08002534
 8001550:	08002544 	.word	0x08002544
 8001554:	003d0900 	.word	0x003d0900

08001558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800155c:	4b02      	ldr	r3, [pc, #8]	@ (8001568 <HAL_RCC_GetHCLKFreq+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000000 	.word	0x20000000

0800156c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001570:	f7ff fff2 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	4903      	ldr	r1, [pc, #12]	@ (8001590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	0800252c 	.word	0x0800252c

08001594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001598:	f7ff ffde 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0adb      	lsrs	r3, r3, #11
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	4903      	ldr	r1, [pc, #12]	@ (80015b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	0800252c 	.word	0x0800252c

080015bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c4:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <RCC_Delay+0x34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <RCC_Delay+0x38>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0a5b      	lsrs	r3, r3, #9
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015d8:	bf00      	nop
  }
  while (Delay --);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	60fa      	str	r2, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f9      	bne.n	80015d8 <RCC_Delay+0x1c>
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000000 	.word	0x20000000
 80015f4:	10624dd3 	.word	0x10624dd3

080015f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e042      	b.n	8001690 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7fe ffe2 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	@ 0x24
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800163a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f9af 	bl	80019a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d16d      	bne.n	8001794 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <HAL_UART_Transmit+0x2c>
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e066      	b.n	8001796 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2221      	movs	r2, #33	@ 0x21
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016d6:	f7ff f8b7 	bl	8000848 <HAL_GetTick>
 80016da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f0:	d108      	bne.n	8001704 <HAL_UART_Transmit+0x6c>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d104      	bne.n	8001704 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	e003      	b.n	800170c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800170c:	e02a      	b.n	8001764 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2200      	movs	r2, #0
 8001716:	2180      	movs	r1, #128	@ 0x80
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f8d2 	bl	80018c2 <UART_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e036      	b.n	8001796 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10b      	bne.n	8001746 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800173c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	3302      	adds	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	e007      	b.n	8001756 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3301      	adds	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001768:	b29b      	uxth	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1cf      	bne.n	800170e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2200      	movs	r2, #0
 8001776:	2140      	movs	r1, #64	@ 0x40
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 f8a2 	bl	80018c2 <UART_WaitOnFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e006      	b.n	8001796 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2220      	movs	r2, #32
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	e000      	b.n	8001796 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001794:	2302      	movs	r3, #2
  }
}
 8001796:	4618      	mov	r0, r3
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b08a      	sub	sp, #40	@ 0x28
 80017a2:	af02      	add	r7, sp, #8
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d17c      	bne.n	80018b8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_UART_Receive+0x2c>
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e075      	b.n	80018ba <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2222      	movs	r2, #34	@ 0x22
 80017d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017e2:	f7ff f831 	bl	8000848 <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	88fa      	ldrh	r2, [r7, #6]
 80017ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017fc:	d108      	bne.n	8001810 <HAL_UART_Receive+0x72>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d104      	bne.n	8001810 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	e003      	b.n	8001818 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001818:	e043      	b.n	80018a2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	2120      	movs	r1, #32
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f84c 	bl	80018c2 <UART_WaitOnFlagUntilTimeout>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e042      	b.n	80018ba <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001846:	b29a      	uxth	r2, r3
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	3302      	adds	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	e01f      	b.n	8001894 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800185c:	d007      	beq.n	800186e <HAL_UART_Receive+0xd0>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <HAL_UART_Receive+0xde>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e008      	b.n	800188e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001888:	b2da      	uxtb	r2, r3
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1b6      	bne.n	800181a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018b8:	2302      	movs	r3, #2
  }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b090      	sub	sp, #64	@ 0x40
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018d2:	e050      	b.n	8001976 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d04c      	beq.n	8001976 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80018e2:	f7fe ffb1 	bl	8000848 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d241      	bcs.n	8001976 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	330c      	adds	r3, #12
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	330c      	adds	r3, #12
 8001910:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001912:	637a      	str	r2, [r7, #52]	@ 0x34
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800191a:	e841 2300 	strex	r3, r2, [r1]
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e5      	bne.n	80018f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3314      	adds	r3, #20
 800192c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	e853 3f00 	ldrex	r3, [r3]
 8001934:	613b      	str	r3, [r7, #16]
   return(result);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3314      	adds	r3, #20
 8001944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001946:	623a      	str	r2, [r7, #32]
 8001948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800194a:	69f9      	ldr	r1, [r7, #28]
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	e841 2300 	strex	r3, r2, [r1]
 8001952:	61bb      	str	r3, [r7, #24]
   return(result);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1e5      	bne.n	8001926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2220      	movs	r2, #32
 8001966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e00f      	b.n	8001996 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4013      	ands	r3, r2
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	429a      	cmp	r2, r3
 8001984:	bf0c      	ite	eq
 8001986:	2301      	moveq	r3, #1
 8001988:	2300      	movne	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	429a      	cmp	r2, r3
 8001992:	d09f      	beq.n	80018d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3740      	adds	r7, #64	@ 0x40
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80019da:	f023 030c 	bic.w	r3, r3, #12
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab4 <UART_SetConfig+0x114>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d103      	bne.n	8001a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a08:	f7ff fdc4 	bl	8001594 <HAL_RCC_GetPCLK2Freq>
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	e002      	b.n	8001a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a10:	f7ff fdac 	bl	800156c <HAL_RCC_GetPCLK1Freq>
 8001a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009a      	lsls	r2, r3, #2
 8001a20:	441a      	add	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	4a22      	ldr	r2, [pc, #136]	@ (8001ab8 <UART_SetConfig+0x118>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	0119      	lsls	r1, r3, #4
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009a      	lsls	r2, r3, #2
 8001a40:	441a      	add	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <UART_SetConfig+0x118>)
 8001a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2064      	movs	r0, #100	@ 0x64
 8001a56:	fb00 f303 	mul.w	r3, r0, r3
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	3332      	adds	r3, #50	@ 0x32
 8001a60:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <UART_SetConfig+0x118>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a6c:	4419      	add	r1, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009a      	lsls	r2, r3, #2
 8001a78:	441a      	add	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <UART_SetConfig+0x118>)
 8001a86:	fba3 0302 	umull	r0, r3, r3, r2
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2064      	movs	r0, #100	@ 0x64
 8001a8e:	fb00 f303 	mul.w	r3, r0, r3
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	3332      	adds	r3, #50	@ 0x32
 8001a98:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <UART_SetConfig+0x118>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	51eb851f 	.word	0x51eb851f

08001abc <siprintf>:
 8001abc:	b40e      	push	{r1, r2, r3}
 8001abe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001ac2:	b500      	push	{lr}
 8001ac4:	b09c      	sub	sp, #112	@ 0x70
 8001ac6:	ab1d      	add	r3, sp, #116	@ 0x74
 8001ac8:	9002      	str	r0, [sp, #8]
 8001aca:	9006      	str	r0, [sp, #24]
 8001acc:	9107      	str	r1, [sp, #28]
 8001ace:	9104      	str	r1, [sp, #16]
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <siprintf+0x38>)
 8001ad2:	4909      	ldr	r1, [pc, #36]	@ (8001af8 <siprintf+0x3c>)
 8001ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ad8:	9105      	str	r1, [sp, #20]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	a902      	add	r1, sp, #8
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	f000 f9b6 	bl	8001e50 <_svfiprintf_r>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	9b02      	ldr	r3, [sp, #8]
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	b01c      	add	sp, #112	@ 0x70
 8001aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8001af0:	b003      	add	sp, #12
 8001af2:	4770      	bx	lr
 8001af4:	2000000c 	.word	0x2000000c
 8001af8:	ffff0208 	.word	0xffff0208

08001afc <memset>:
 8001afc:	4603      	mov	r3, r0
 8001afe:	4402      	add	r2, r0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memset+0xa>
 8001b04:	4770      	bx	lr
 8001b06:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0a:	e7f9      	b.n	8001b00 <memset+0x4>

08001b0c <strchr>:
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b2c9      	uxtb	r1, r1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b16:	b112      	cbz	r2, 8001b1e <strchr+0x12>
 8001b18:	428a      	cmp	r2, r1
 8001b1a:	d1f9      	bne.n	8001b10 <strchr+0x4>
 8001b1c:	4770      	bx	lr
 8001b1e:	2900      	cmp	r1, #0
 8001b20:	bf18      	it	ne
 8001b22:	2000      	movne	r0, #0
 8001b24:	4770      	bx	lr

08001b26 <strstr>:
 8001b26:	780a      	ldrb	r2, [r1, #0]
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	b96a      	cbnz	r2, 8001b48 <strstr+0x22>
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d109      	bne.n	8001b46 <strstr+0x20>
 8001b32:	460c      	mov	r4, r1
 8001b34:	4605      	mov	r5, r0
 8001b36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f6      	beq.n	8001b2c <strstr+0x6>
 8001b3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001b42:	429e      	cmp	r6, r3
 8001b44:	d0f7      	beq.n	8001b36 <strstr+0x10>
 8001b46:	3001      	adds	r0, #1
 8001b48:	7803      	ldrb	r3, [r0, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ef      	bne.n	8001b2e <strstr+0x8>
 8001b4e:	4618      	mov	r0, r3
 8001b50:	e7ec      	b.n	8001b2c <strstr+0x6>
	...

08001b54 <__errno>:
 8001b54:	4b01      	ldr	r3, [pc, #4]	@ (8001b5c <__errno+0x8>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <__libc_init_array>:
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	2600      	movs	r6, #0
 8001b64:	4d0c      	ldr	r5, [pc, #48]	@ (8001b98 <__libc_init_array+0x38>)
 8001b66:	4c0d      	ldr	r4, [pc, #52]	@ (8001b9c <__libc_init_array+0x3c>)
 8001b68:	1b64      	subs	r4, r4, r5
 8001b6a:	10a4      	asrs	r4, r4, #2
 8001b6c:	42a6      	cmp	r6, r4
 8001b6e:	d109      	bne.n	8001b84 <__libc_init_array+0x24>
 8001b70:	f000 fc78 	bl	8002464 <_init>
 8001b74:	2600      	movs	r6, #0
 8001b76:	4d0a      	ldr	r5, [pc, #40]	@ (8001ba0 <__libc_init_array+0x40>)
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <__libc_init_array+0x44>)
 8001b7a:	1b64      	subs	r4, r4, r5
 8001b7c:	10a4      	asrs	r4, r4, #2
 8001b7e:	42a6      	cmp	r6, r4
 8001b80:	d105      	bne.n	8001b8e <__libc_init_array+0x2e>
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b88:	4798      	blx	r3
 8001b8a:	3601      	adds	r6, #1
 8001b8c:	e7ee      	b.n	8001b6c <__libc_init_array+0xc>
 8001b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b92:	4798      	blx	r3
 8001b94:	3601      	adds	r6, #1
 8001b96:	e7f2      	b.n	8001b7e <__libc_init_array+0x1e>
 8001b98:	08002584 	.word	0x08002584
 8001b9c:	08002584 	.word	0x08002584
 8001ba0:	08002584 	.word	0x08002584
 8001ba4:	08002588 	.word	0x08002588

08001ba8 <__retarget_lock_acquire_recursive>:
 8001ba8:	4770      	bx	lr

08001baa <__retarget_lock_release_recursive>:
 8001baa:	4770      	bx	lr

08001bac <_free_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4605      	mov	r5, r0
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d040      	beq.n	8001c36 <_free_r+0x8a>
 8001bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb8:	1f0c      	subs	r4, r1, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bfb8      	it	lt
 8001bbe:	18e4      	addlt	r4, r4, r3
 8001bc0:	f000 f8de 	bl	8001d80 <__malloc_lock>
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <_free_r+0x8c>)
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	b933      	cbnz	r3, 8001bd8 <_free_r+0x2c>
 8001bca:	6063      	str	r3, [r4, #4]
 8001bcc:	6014      	str	r4, [r2, #0]
 8001bce:	4628      	mov	r0, r5
 8001bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bd4:	f000 b8da 	b.w	8001d8c <__malloc_unlock>
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	d908      	bls.n	8001bee <_free_r+0x42>
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	1821      	adds	r1, r4, r0
 8001be0:	428b      	cmp	r3, r1
 8001be2:	bf01      	itttt	eq
 8001be4:	6819      	ldreq	r1, [r3, #0]
 8001be6:	685b      	ldreq	r3, [r3, #4]
 8001be8:	1809      	addeq	r1, r1, r0
 8001bea:	6021      	streq	r1, [r4, #0]
 8001bec:	e7ed      	b.n	8001bca <_free_r+0x1e>
 8001bee:	461a      	mov	r2, r3
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	b10b      	cbz	r3, 8001bf8 <_free_r+0x4c>
 8001bf4:	42a3      	cmp	r3, r4
 8001bf6:	d9fa      	bls.n	8001bee <_free_r+0x42>
 8001bf8:	6811      	ldr	r1, [r2, #0]
 8001bfa:	1850      	adds	r0, r2, r1
 8001bfc:	42a0      	cmp	r0, r4
 8001bfe:	d10b      	bne.n	8001c18 <_free_r+0x6c>
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	4401      	add	r1, r0
 8001c04:	1850      	adds	r0, r2, r1
 8001c06:	4283      	cmp	r3, r0
 8001c08:	6011      	str	r1, [r2, #0]
 8001c0a:	d1e0      	bne.n	8001bce <_free_r+0x22>
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4408      	add	r0, r1
 8001c12:	6010      	str	r0, [r2, #0]
 8001c14:	6053      	str	r3, [r2, #4]
 8001c16:	e7da      	b.n	8001bce <_free_r+0x22>
 8001c18:	d902      	bls.n	8001c20 <_free_r+0x74>
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	602b      	str	r3, [r5, #0]
 8001c1e:	e7d6      	b.n	8001bce <_free_r+0x22>
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	1821      	adds	r1, r4, r0
 8001c24:	428b      	cmp	r3, r1
 8001c26:	bf01      	itttt	eq
 8001c28:	6819      	ldreq	r1, [r3, #0]
 8001c2a:	685b      	ldreq	r3, [r3, #4]
 8001c2c:	1809      	addeq	r1, r1, r0
 8001c2e:	6021      	streq	r1, [r4, #0]
 8001c30:	6063      	str	r3, [r4, #4]
 8001c32:	6054      	str	r4, [r2, #4]
 8001c34:	e7cb      	b.n	8001bce <_free_r+0x22>
 8001c36:	bd38      	pop	{r3, r4, r5, pc}
 8001c38:	20000610 	.word	0x20000610

08001c3c <sbrk_aligned>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8001c7c <sbrk_aligned+0x40>)
 8001c40:	460c      	mov	r4, r1
 8001c42:	6831      	ldr	r1, [r6, #0]
 8001c44:	4605      	mov	r5, r0
 8001c46:	b911      	cbnz	r1, 8001c4e <sbrk_aligned+0x12>
 8001c48:	f000 fbaa 	bl	80023a0 <_sbrk_r>
 8001c4c:	6030      	str	r0, [r6, #0]
 8001c4e:	4621      	mov	r1, r4
 8001c50:	4628      	mov	r0, r5
 8001c52:	f000 fba5 	bl	80023a0 <_sbrk_r>
 8001c56:	1c43      	adds	r3, r0, #1
 8001c58:	d103      	bne.n	8001c62 <sbrk_aligned+0x26>
 8001c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8001c5e:	4620      	mov	r0, r4
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
 8001c62:	1cc4      	adds	r4, r0, #3
 8001c64:	f024 0403 	bic.w	r4, r4, #3
 8001c68:	42a0      	cmp	r0, r4
 8001c6a:	d0f8      	beq.n	8001c5e <sbrk_aligned+0x22>
 8001c6c:	1a21      	subs	r1, r4, r0
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f000 fb96 	bl	80023a0 <_sbrk_r>
 8001c74:	3001      	adds	r0, #1
 8001c76:	d1f2      	bne.n	8001c5e <sbrk_aligned+0x22>
 8001c78:	e7ef      	b.n	8001c5a <sbrk_aligned+0x1e>
 8001c7a:	bf00      	nop
 8001c7c:	2000060c 	.word	0x2000060c

08001c80 <_malloc_r>:
 8001c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c84:	1ccd      	adds	r5, r1, #3
 8001c86:	f025 0503 	bic.w	r5, r5, #3
 8001c8a:	3508      	adds	r5, #8
 8001c8c:	2d0c      	cmp	r5, #12
 8001c8e:	bf38      	it	cc
 8001c90:	250c      	movcc	r5, #12
 8001c92:	2d00      	cmp	r5, #0
 8001c94:	4606      	mov	r6, r0
 8001c96:	db01      	blt.n	8001c9c <_malloc_r+0x1c>
 8001c98:	42a9      	cmp	r1, r5
 8001c9a:	d904      	bls.n	8001ca6 <_malloc_r+0x26>
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	6033      	str	r3, [r6, #0]
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d7c <_malloc_r+0xfc>
 8001caa:	f000 f869 	bl	8001d80 <__malloc_lock>
 8001cae:	f8d8 3000 	ldr.w	r3, [r8]
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	bb44      	cbnz	r4, 8001d08 <_malloc_r+0x88>
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f7ff ffbf 	bl	8001c3c <sbrk_aligned>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	d158      	bne.n	8001d76 <_malloc_r+0xf6>
 8001cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8001cc8:	4627      	mov	r7, r4
 8001cca:	2f00      	cmp	r7, #0
 8001ccc:	d143      	bne.n	8001d56 <_malloc_r+0xd6>
 8001cce:	2c00      	cmp	r4, #0
 8001cd0:	d04b      	beq.n	8001d6a <_malloc_r+0xea>
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	4639      	mov	r1, r7
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	eb04 0903 	add.w	r9, r4, r3
 8001cdc:	f000 fb60 	bl	80023a0 <_sbrk_r>
 8001ce0:	4581      	cmp	r9, r0
 8001ce2:	d142      	bne.n	8001d6a <_malloc_r+0xea>
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	1a6d      	subs	r5, r5, r1
 8001cea:	4629      	mov	r1, r5
 8001cec:	f7ff ffa6 	bl	8001c3c <sbrk_aligned>
 8001cf0:	3001      	adds	r0, #1
 8001cf2:	d03a      	beq.n	8001d6a <_malloc_r+0xea>
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	442b      	add	r3, r5
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	bb62      	cbnz	r2, 8001d5c <_malloc_r+0xdc>
 8001d02:	f8c8 7000 	str.w	r7, [r8]
 8001d06:	e00f      	b.n	8001d28 <_malloc_r+0xa8>
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	1b52      	subs	r2, r2, r5
 8001d0c:	d420      	bmi.n	8001d50 <_malloc_r+0xd0>
 8001d0e:	2a0b      	cmp	r2, #11
 8001d10:	d917      	bls.n	8001d42 <_malloc_r+0xc2>
 8001d12:	1961      	adds	r1, r4, r5
 8001d14:	42a3      	cmp	r3, r4
 8001d16:	6025      	str	r5, [r4, #0]
 8001d18:	bf18      	it	ne
 8001d1a:	6059      	strne	r1, [r3, #4]
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	bf08      	it	eq
 8001d20:	f8c8 1000 	streq.w	r1, [r8]
 8001d24:	5162      	str	r2, [r4, r5]
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f000 f82f 	bl	8001d8c <__malloc_unlock>
 8001d2e:	f104 000b 	add.w	r0, r4, #11
 8001d32:	1d23      	adds	r3, r4, #4
 8001d34:	f020 0007 	bic.w	r0, r0, #7
 8001d38:	1ac2      	subs	r2, r0, r3
 8001d3a:	bf1c      	itt	ne
 8001d3c:	1a1b      	subne	r3, r3, r0
 8001d3e:	50a3      	strne	r3, [r4, r2]
 8001d40:	e7af      	b.n	8001ca2 <_malloc_r+0x22>
 8001d42:	6862      	ldr	r2, [r4, #4]
 8001d44:	42a3      	cmp	r3, r4
 8001d46:	bf0c      	ite	eq
 8001d48:	f8c8 2000 	streq.w	r2, [r8]
 8001d4c:	605a      	strne	r2, [r3, #4]
 8001d4e:	e7eb      	b.n	8001d28 <_malloc_r+0xa8>
 8001d50:	4623      	mov	r3, r4
 8001d52:	6864      	ldr	r4, [r4, #4]
 8001d54:	e7ae      	b.n	8001cb4 <_malloc_r+0x34>
 8001d56:	463c      	mov	r4, r7
 8001d58:	687f      	ldr	r7, [r7, #4]
 8001d5a:	e7b6      	b.n	8001cca <_malloc_r+0x4a>
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	42a3      	cmp	r3, r4
 8001d62:	d1fb      	bne.n	8001d5c <_malloc_r+0xdc>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6053      	str	r3, [r2, #4]
 8001d68:	e7de      	b.n	8001d28 <_malloc_r+0xa8>
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	4630      	mov	r0, r6
 8001d6e:	6033      	str	r3, [r6, #0]
 8001d70:	f000 f80c 	bl	8001d8c <__malloc_unlock>
 8001d74:	e794      	b.n	8001ca0 <_malloc_r+0x20>
 8001d76:	6005      	str	r5, [r0, #0]
 8001d78:	e7d6      	b.n	8001d28 <_malloc_r+0xa8>
 8001d7a:	bf00      	nop
 8001d7c:	20000610 	.word	0x20000610

08001d80 <__malloc_lock>:
 8001d80:	4801      	ldr	r0, [pc, #4]	@ (8001d88 <__malloc_lock+0x8>)
 8001d82:	f7ff bf11 	b.w	8001ba8 <__retarget_lock_acquire_recursive>
 8001d86:	bf00      	nop
 8001d88:	20000608 	.word	0x20000608

08001d8c <__malloc_unlock>:
 8001d8c:	4801      	ldr	r0, [pc, #4]	@ (8001d94 <__malloc_unlock+0x8>)
 8001d8e:	f7ff bf0c 	b.w	8001baa <__retarget_lock_release_recursive>
 8001d92:	bf00      	nop
 8001d94:	20000608 	.word	0x20000608

08001d98 <__ssputs_r>:
 8001d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d9c:	461f      	mov	r7, r3
 8001d9e:	688e      	ldr	r6, [r1, #8]
 8001da0:	4682      	mov	sl, r0
 8001da2:	42be      	cmp	r6, r7
 8001da4:	460c      	mov	r4, r1
 8001da6:	4690      	mov	r8, r2
 8001da8:	680b      	ldr	r3, [r1, #0]
 8001daa:	d82d      	bhi.n	8001e08 <__ssputs_r+0x70>
 8001dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001db0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001db4:	d026      	beq.n	8001e04 <__ssputs_r+0x6c>
 8001db6:	6965      	ldr	r5, [r4, #20]
 8001db8:	6909      	ldr	r1, [r1, #16]
 8001dba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dbe:	eba3 0901 	sub.w	r9, r3, r1
 8001dc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001dc6:	1c7b      	adds	r3, r7, #1
 8001dc8:	444b      	add	r3, r9
 8001dca:	106d      	asrs	r5, r5, #1
 8001dcc:	429d      	cmp	r5, r3
 8001dce:	bf38      	it	cc
 8001dd0:	461d      	movcc	r5, r3
 8001dd2:	0553      	lsls	r3, r2, #21
 8001dd4:	d527      	bpl.n	8001e26 <__ssputs_r+0x8e>
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	f7ff ff52 	bl	8001c80 <_malloc_r>
 8001ddc:	4606      	mov	r6, r0
 8001dde:	b360      	cbz	r0, 8001e3a <__ssputs_r+0xa2>
 8001de0:	464a      	mov	r2, r9
 8001de2:	6921      	ldr	r1, [r4, #16]
 8001de4:	f000 fafa 	bl	80023dc <memcpy>
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	6126      	str	r6, [r4, #16]
 8001df6:	444e      	add	r6, r9
 8001df8:	6026      	str	r6, [r4, #0]
 8001dfa:	463e      	mov	r6, r7
 8001dfc:	6165      	str	r5, [r4, #20]
 8001dfe:	eba5 0509 	sub.w	r5, r5, r9
 8001e02:	60a5      	str	r5, [r4, #8]
 8001e04:	42be      	cmp	r6, r7
 8001e06:	d900      	bls.n	8001e0a <__ssputs_r+0x72>
 8001e08:	463e      	mov	r6, r7
 8001e0a:	4632      	mov	r2, r6
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	6820      	ldr	r0, [r4, #0]
 8001e10:	f000 faac 	bl	800236c <memmove>
 8001e14:	2000      	movs	r0, #0
 8001e16:	68a3      	ldr	r3, [r4, #8]
 8001e18:	1b9b      	subs	r3, r3, r6
 8001e1a:	60a3      	str	r3, [r4, #8]
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	4433      	add	r3, r6
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e26:	462a      	mov	r2, r5
 8001e28:	f000 fae6 	bl	80023f8 <_realloc_r>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d1e0      	bne.n	8001df4 <__ssputs_r+0x5c>
 8001e32:	4650      	mov	r0, sl
 8001e34:	6921      	ldr	r1, [r4, #16]
 8001e36:	f7ff feb9 	bl	8001bac <_free_r>
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	f8ca 3000 	str.w	r3, [sl]
 8001e40:	89a3      	ldrh	r3, [r4, #12]
 8001e42:	f04f 30ff 	mov.w	r0, #4294967295
 8001e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e4a:	81a3      	strh	r3, [r4, #12]
 8001e4c:	e7e9      	b.n	8001e22 <__ssputs_r+0x8a>
	...

08001e50 <_svfiprintf_r>:
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	4698      	mov	r8, r3
 8001e56:	898b      	ldrh	r3, [r1, #12]
 8001e58:	4607      	mov	r7, r0
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	460d      	mov	r5, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	b09d      	sub	sp, #116	@ 0x74
 8001e62:	d510      	bpl.n	8001e86 <_svfiprintf_r+0x36>
 8001e64:	690b      	ldr	r3, [r1, #16]
 8001e66:	b973      	cbnz	r3, 8001e86 <_svfiprintf_r+0x36>
 8001e68:	2140      	movs	r1, #64	@ 0x40
 8001e6a:	f7ff ff09 	bl	8001c80 <_malloc_r>
 8001e6e:	6028      	str	r0, [r5, #0]
 8001e70:	6128      	str	r0, [r5, #16]
 8001e72:	b930      	cbnz	r0, 8001e82 <_svfiprintf_r+0x32>
 8001e74:	230c      	movs	r3, #12
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	b01d      	add	sp, #116	@ 0x74
 8001e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e82:	2340      	movs	r3, #64	@ 0x40
 8001e84:	616b      	str	r3, [r5, #20]
 8001e86:	2300      	movs	r3, #0
 8001e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e90:	2330      	movs	r3, #48	@ 0x30
 8001e92:	f04f 0901 	mov.w	r9, #1
 8001e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002034 <_svfiprintf_r+0x1e4>
 8001e9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001eaa:	b10a      	cbz	r2, 8001eb0 <_svfiprintf_r+0x60>
 8001eac:	2a25      	cmp	r2, #37	@ 0x25
 8001eae:	d1f9      	bne.n	8001ea4 <_svfiprintf_r+0x54>
 8001eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8001eb4:	d00b      	beq.n	8001ece <_svfiprintf_r+0x7e>
 8001eb6:	465b      	mov	r3, fp
 8001eb8:	4622      	mov	r2, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	f7ff ff6b 	bl	8001d98 <__ssputs_r>
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	f000 80a7 	beq.w	8002016 <_svfiprintf_r+0x1c6>
 8001ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001eca:	445a      	add	r2, fp
 8001ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ece:	f89a 3000 	ldrb.w	r3, [sl]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 809f 	beq.w	8002016 <_svfiprintf_r+0x1c6>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f04f 32ff 	mov.w	r2, #4294967295
 8001ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ee2:	f10a 0a01 	add.w	sl, sl, #1
 8001ee6:	9304      	str	r3, [sp, #16]
 8001ee8:	9307      	str	r3, [sp, #28]
 8001eea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001eee:	931a      	str	r3, [sp, #104]	@ 0x68
 8001ef0:	4654      	mov	r4, sl
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ef8:	484e      	ldr	r0, [pc, #312]	@ (8002034 <_svfiprintf_r+0x1e4>)
 8001efa:	f000 fa61 	bl	80023c0 <memchr>
 8001efe:	9a04      	ldr	r2, [sp, #16]
 8001f00:	b9d8      	cbnz	r0, 8001f3a <_svfiprintf_r+0xea>
 8001f02:	06d0      	lsls	r0, r2, #27
 8001f04:	bf44      	itt	mi
 8001f06:	2320      	movmi	r3, #32
 8001f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f0c:	0711      	lsls	r1, r2, #28
 8001f0e:	bf44      	itt	mi
 8001f10:	232b      	movmi	r3, #43	@ 0x2b
 8001f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f16:	f89a 3000 	ldrb.w	r3, [sl]
 8001f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f1c:	d015      	beq.n	8001f4a <_svfiprintf_r+0xfa>
 8001f1e:	4654      	mov	r4, sl
 8001f20:	2000      	movs	r0, #0
 8001f22:	f04f 0c0a 	mov.w	ip, #10
 8001f26:	9a07      	ldr	r2, [sp, #28]
 8001f28:	4621      	mov	r1, r4
 8001f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f2e:	3b30      	subs	r3, #48	@ 0x30
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d94b      	bls.n	8001fcc <_svfiprintf_r+0x17c>
 8001f34:	b1b0      	cbz	r0, 8001f64 <_svfiprintf_r+0x114>
 8001f36:	9207      	str	r2, [sp, #28]
 8001f38:	e014      	b.n	8001f64 <_svfiprintf_r+0x114>
 8001f3a:	eba0 0308 	sub.w	r3, r0, r8
 8001f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	46a2      	mov	sl, r4
 8001f46:	9304      	str	r3, [sp, #16]
 8001f48:	e7d2      	b.n	8001ef0 <_svfiprintf_r+0xa0>
 8001f4a:	9b03      	ldr	r3, [sp, #12]
 8001f4c:	1d19      	adds	r1, r3, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	9103      	str	r1, [sp, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bfbb      	ittet	lt
 8001f56:	425b      	neglt	r3, r3
 8001f58:	f042 0202 	orrlt.w	r2, r2, #2
 8001f5c:	9307      	strge	r3, [sp, #28]
 8001f5e:	9307      	strlt	r3, [sp, #28]
 8001f60:	bfb8      	it	lt
 8001f62:	9204      	strlt	r2, [sp, #16]
 8001f64:	7823      	ldrb	r3, [r4, #0]
 8001f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f68:	d10a      	bne.n	8001f80 <_svfiprintf_r+0x130>
 8001f6a:	7863      	ldrb	r3, [r4, #1]
 8001f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f6e:	d132      	bne.n	8001fd6 <_svfiprintf_r+0x186>
 8001f70:	9b03      	ldr	r3, [sp, #12]
 8001f72:	3402      	adds	r4, #2
 8001f74:	1d1a      	adds	r2, r3, #4
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	9203      	str	r2, [sp, #12]
 8001f7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f7e:	9305      	str	r3, [sp, #20]
 8001f80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002038 <_svfiprintf_r+0x1e8>
 8001f84:	2203      	movs	r2, #3
 8001f86:	4650      	mov	r0, sl
 8001f88:	7821      	ldrb	r1, [r4, #0]
 8001f8a:	f000 fa19 	bl	80023c0 <memchr>
 8001f8e:	b138      	cbz	r0, 8001fa0 <_svfiprintf_r+0x150>
 8001f90:	2240      	movs	r2, #64	@ 0x40
 8001f92:	9b04      	ldr	r3, [sp, #16]
 8001f94:	eba0 000a 	sub.w	r0, r0, sl
 8001f98:	4082      	lsls	r2, r0
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	3401      	adds	r4, #1
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa4:	2206      	movs	r2, #6
 8001fa6:	4825      	ldr	r0, [pc, #148]	@ (800203c <_svfiprintf_r+0x1ec>)
 8001fa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001fac:	f000 fa08 	bl	80023c0 <memchr>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d036      	beq.n	8002022 <_svfiprintf_r+0x1d2>
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <_svfiprintf_r+0x1f0>)
 8001fb6:	bb1b      	cbnz	r3, 8002000 <_svfiprintf_r+0x1b0>
 8001fb8:	9b03      	ldr	r3, [sp, #12]
 8001fba:	3307      	adds	r3, #7
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	9303      	str	r3, [sp, #12]
 8001fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fc6:	4433      	add	r3, r6
 8001fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fca:	e76a      	b.n	8001ea2 <_svfiprintf_r+0x52>
 8001fcc:	460c      	mov	r4, r1
 8001fce:	2001      	movs	r0, #1
 8001fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fd4:	e7a8      	b.n	8001f28 <_svfiprintf_r+0xd8>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f04f 0c0a 	mov.w	ip, #10
 8001fdc:	4619      	mov	r1, r3
 8001fde:	3401      	adds	r4, #1
 8001fe0:	9305      	str	r3, [sp, #20]
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fe8:	3a30      	subs	r2, #48	@ 0x30
 8001fea:	2a09      	cmp	r2, #9
 8001fec:	d903      	bls.n	8001ff6 <_svfiprintf_r+0x1a6>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0c6      	beq.n	8001f80 <_svfiprintf_r+0x130>
 8001ff2:	9105      	str	r1, [sp, #20]
 8001ff4:	e7c4      	b.n	8001f80 <_svfiprintf_r+0x130>
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ffe:	e7f0      	b.n	8001fe2 <_svfiprintf_r+0x192>
 8002000:	ab03      	add	r3, sp, #12
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	462a      	mov	r2, r5
 8002006:	4638      	mov	r0, r7
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <_svfiprintf_r+0x1f4>)
 800200a:	a904      	add	r1, sp, #16
 800200c:	f3af 8000 	nop.w
 8002010:	1c42      	adds	r2, r0, #1
 8002012:	4606      	mov	r6, r0
 8002014:	d1d6      	bne.n	8001fc4 <_svfiprintf_r+0x174>
 8002016:	89ab      	ldrh	r3, [r5, #12]
 8002018:	065b      	lsls	r3, r3, #25
 800201a:	f53f af2d 	bmi.w	8001e78 <_svfiprintf_r+0x28>
 800201e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002020:	e72c      	b.n	8001e7c <_svfiprintf_r+0x2c>
 8002022:	ab03      	add	r3, sp, #12
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	462a      	mov	r2, r5
 8002028:	4638      	mov	r0, r7
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <_svfiprintf_r+0x1f4>)
 800202c:	a904      	add	r1, sp, #16
 800202e:	f000 f87d 	bl	800212c <_printf_i>
 8002032:	e7ed      	b.n	8002010 <_svfiprintf_r+0x1c0>
 8002034:	08002546 	.word	0x08002546
 8002038:	0800254c 	.word	0x0800254c
 800203c:	08002550 	.word	0x08002550
 8002040:	00000000 	.word	0x00000000
 8002044:	08001d99 	.word	0x08001d99

08002048 <_printf_common>:
 8002048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800204c:	4616      	mov	r6, r2
 800204e:	4698      	mov	r8, r3
 8002050:	688a      	ldr	r2, [r1, #8]
 8002052:	690b      	ldr	r3, [r1, #16]
 8002054:	4607      	mov	r7, r0
 8002056:	4293      	cmp	r3, r2
 8002058:	bfb8      	it	lt
 800205a:	4613      	movlt	r3, r2
 800205c:	6033      	str	r3, [r6, #0]
 800205e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002062:	460c      	mov	r4, r1
 8002064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002068:	b10a      	cbz	r2, 800206e <_printf_common+0x26>
 800206a:	3301      	adds	r3, #1
 800206c:	6033      	str	r3, [r6, #0]
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	0699      	lsls	r1, r3, #26
 8002072:	bf42      	ittt	mi
 8002074:	6833      	ldrmi	r3, [r6, #0]
 8002076:	3302      	addmi	r3, #2
 8002078:	6033      	strmi	r3, [r6, #0]
 800207a:	6825      	ldr	r5, [r4, #0]
 800207c:	f015 0506 	ands.w	r5, r5, #6
 8002080:	d106      	bne.n	8002090 <_printf_common+0x48>
 8002082:	f104 0a19 	add.w	sl, r4, #25
 8002086:	68e3      	ldr	r3, [r4, #12]
 8002088:	6832      	ldr	r2, [r6, #0]
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	42ab      	cmp	r3, r5
 800208e:	dc2b      	bgt.n	80020e8 <_printf_common+0xa0>
 8002090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	3b00      	subs	r3, #0
 8002098:	bf18      	it	ne
 800209a:	2301      	movne	r3, #1
 800209c:	0692      	lsls	r2, r2, #26
 800209e:	d430      	bmi.n	8002102 <_printf_common+0xba>
 80020a0:	4641      	mov	r1, r8
 80020a2:	4638      	mov	r0, r7
 80020a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80020a8:	47c8      	blx	r9
 80020aa:	3001      	adds	r0, #1
 80020ac:	d023      	beq.n	80020f6 <_printf_common+0xae>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	6922      	ldr	r2, [r4, #16]
 80020b2:	f003 0306 	and.w	r3, r3, #6
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf14      	ite	ne
 80020ba:	2500      	movne	r5, #0
 80020bc:	6833      	ldreq	r3, [r6, #0]
 80020be:	f04f 0600 	mov.w	r6, #0
 80020c2:	bf08      	it	eq
 80020c4:	68e5      	ldreq	r5, [r4, #12]
 80020c6:	f104 041a 	add.w	r4, r4, #26
 80020ca:	bf08      	it	eq
 80020cc:	1aed      	subeq	r5, r5, r3
 80020ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80020d2:	bf08      	it	eq
 80020d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020d8:	4293      	cmp	r3, r2
 80020da:	bfc4      	itt	gt
 80020dc:	1a9b      	subgt	r3, r3, r2
 80020de:	18ed      	addgt	r5, r5, r3
 80020e0:	42b5      	cmp	r5, r6
 80020e2:	d11a      	bne.n	800211a <_printf_common+0xd2>
 80020e4:	2000      	movs	r0, #0
 80020e6:	e008      	b.n	80020fa <_printf_common+0xb2>
 80020e8:	2301      	movs	r3, #1
 80020ea:	4652      	mov	r2, sl
 80020ec:	4641      	mov	r1, r8
 80020ee:	4638      	mov	r0, r7
 80020f0:	47c8      	blx	r9
 80020f2:	3001      	adds	r0, #1
 80020f4:	d103      	bne.n	80020fe <_printf_common+0xb6>
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295
 80020fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fe:	3501      	adds	r5, #1
 8002100:	e7c1      	b.n	8002086 <_printf_common+0x3e>
 8002102:	2030      	movs	r0, #48	@ 0x30
 8002104:	18e1      	adds	r1, r4, r3
 8002106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002110:	4422      	add	r2, r4
 8002112:	3302      	adds	r3, #2
 8002114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002118:	e7c2      	b.n	80020a0 <_printf_common+0x58>
 800211a:	2301      	movs	r3, #1
 800211c:	4622      	mov	r2, r4
 800211e:	4641      	mov	r1, r8
 8002120:	4638      	mov	r0, r7
 8002122:	47c8      	blx	r9
 8002124:	3001      	adds	r0, #1
 8002126:	d0e6      	beq.n	80020f6 <_printf_common+0xae>
 8002128:	3601      	adds	r6, #1
 800212a:	e7d9      	b.n	80020e0 <_printf_common+0x98>

0800212c <_printf_i>:
 800212c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002130:	7e0f      	ldrb	r7, [r1, #24]
 8002132:	4691      	mov	r9, r2
 8002134:	2f78      	cmp	r7, #120	@ 0x78
 8002136:	4680      	mov	r8, r0
 8002138:	460c      	mov	r4, r1
 800213a:	469a      	mov	sl, r3
 800213c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800213e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002142:	d807      	bhi.n	8002154 <_printf_i+0x28>
 8002144:	2f62      	cmp	r7, #98	@ 0x62
 8002146:	d80a      	bhi.n	800215e <_printf_i+0x32>
 8002148:	2f00      	cmp	r7, #0
 800214a:	f000 80d3 	beq.w	80022f4 <_printf_i+0x1c8>
 800214e:	2f58      	cmp	r7, #88	@ 0x58
 8002150:	f000 80ba 	beq.w	80022c8 <_printf_i+0x19c>
 8002154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800215c:	e03a      	b.n	80021d4 <_printf_i+0xa8>
 800215e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002162:	2b15      	cmp	r3, #21
 8002164:	d8f6      	bhi.n	8002154 <_printf_i+0x28>
 8002166:	a101      	add	r1, pc, #4	@ (adr r1, 800216c <_printf_i+0x40>)
 8002168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800216c:	080021c5 	.word	0x080021c5
 8002170:	080021d9 	.word	0x080021d9
 8002174:	08002155 	.word	0x08002155
 8002178:	08002155 	.word	0x08002155
 800217c:	08002155 	.word	0x08002155
 8002180:	08002155 	.word	0x08002155
 8002184:	080021d9 	.word	0x080021d9
 8002188:	08002155 	.word	0x08002155
 800218c:	08002155 	.word	0x08002155
 8002190:	08002155 	.word	0x08002155
 8002194:	08002155 	.word	0x08002155
 8002198:	080022db 	.word	0x080022db
 800219c:	08002203 	.word	0x08002203
 80021a0:	08002295 	.word	0x08002295
 80021a4:	08002155 	.word	0x08002155
 80021a8:	08002155 	.word	0x08002155
 80021ac:	080022fd 	.word	0x080022fd
 80021b0:	08002155 	.word	0x08002155
 80021b4:	08002203 	.word	0x08002203
 80021b8:	08002155 	.word	0x08002155
 80021bc:	08002155 	.word	0x08002155
 80021c0:	0800229d 	.word	0x0800229d
 80021c4:	6833      	ldr	r3, [r6, #0]
 80021c6:	1d1a      	adds	r2, r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6032      	str	r2, [r6, #0]
 80021cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021d4:	2301      	movs	r3, #1
 80021d6:	e09e      	b.n	8002316 <_printf_i+0x1ea>
 80021d8:	6833      	ldr	r3, [r6, #0]
 80021da:	6820      	ldr	r0, [r4, #0]
 80021dc:	1d19      	adds	r1, r3, #4
 80021de:	6031      	str	r1, [r6, #0]
 80021e0:	0606      	lsls	r6, r0, #24
 80021e2:	d501      	bpl.n	80021e8 <_printf_i+0xbc>
 80021e4:	681d      	ldr	r5, [r3, #0]
 80021e6:	e003      	b.n	80021f0 <_printf_i+0xc4>
 80021e8:	0645      	lsls	r5, r0, #25
 80021ea:	d5fb      	bpl.n	80021e4 <_printf_i+0xb8>
 80021ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021f0:	2d00      	cmp	r5, #0
 80021f2:	da03      	bge.n	80021fc <_printf_i+0xd0>
 80021f4:	232d      	movs	r3, #45	@ 0x2d
 80021f6:	426d      	negs	r5, r5
 80021f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021fc:	230a      	movs	r3, #10
 80021fe:	4859      	ldr	r0, [pc, #356]	@ (8002364 <_printf_i+0x238>)
 8002200:	e011      	b.n	8002226 <_printf_i+0xfa>
 8002202:	6821      	ldr	r1, [r4, #0]
 8002204:	6833      	ldr	r3, [r6, #0]
 8002206:	0608      	lsls	r0, r1, #24
 8002208:	f853 5b04 	ldr.w	r5, [r3], #4
 800220c:	d402      	bmi.n	8002214 <_printf_i+0xe8>
 800220e:	0649      	lsls	r1, r1, #25
 8002210:	bf48      	it	mi
 8002212:	b2ad      	uxthmi	r5, r5
 8002214:	2f6f      	cmp	r7, #111	@ 0x6f
 8002216:	6033      	str	r3, [r6, #0]
 8002218:	bf14      	ite	ne
 800221a:	230a      	movne	r3, #10
 800221c:	2308      	moveq	r3, #8
 800221e:	4851      	ldr	r0, [pc, #324]	@ (8002364 <_printf_i+0x238>)
 8002220:	2100      	movs	r1, #0
 8002222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002226:	6866      	ldr	r6, [r4, #4]
 8002228:	2e00      	cmp	r6, #0
 800222a:	bfa8      	it	ge
 800222c:	6821      	ldrge	r1, [r4, #0]
 800222e:	60a6      	str	r6, [r4, #8]
 8002230:	bfa4      	itt	ge
 8002232:	f021 0104 	bicge.w	r1, r1, #4
 8002236:	6021      	strge	r1, [r4, #0]
 8002238:	b90d      	cbnz	r5, 800223e <_printf_i+0x112>
 800223a:	2e00      	cmp	r6, #0
 800223c:	d04b      	beq.n	80022d6 <_printf_i+0x1aa>
 800223e:	4616      	mov	r6, r2
 8002240:	fbb5 f1f3 	udiv	r1, r5, r3
 8002244:	fb03 5711 	mls	r7, r3, r1, r5
 8002248:	5dc7      	ldrb	r7, [r0, r7]
 800224a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800224e:	462f      	mov	r7, r5
 8002250:	42bb      	cmp	r3, r7
 8002252:	460d      	mov	r5, r1
 8002254:	d9f4      	bls.n	8002240 <_printf_i+0x114>
 8002256:	2b08      	cmp	r3, #8
 8002258:	d10b      	bne.n	8002272 <_printf_i+0x146>
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	07df      	lsls	r7, r3, #31
 800225e:	d508      	bpl.n	8002272 <_printf_i+0x146>
 8002260:	6923      	ldr	r3, [r4, #16]
 8002262:	6861      	ldr	r1, [r4, #4]
 8002264:	4299      	cmp	r1, r3
 8002266:	bfde      	ittt	le
 8002268:	2330      	movle	r3, #48	@ 0x30
 800226a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800226e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002272:	1b92      	subs	r2, r2, r6
 8002274:	6122      	str	r2, [r4, #16]
 8002276:	464b      	mov	r3, r9
 8002278:	4621      	mov	r1, r4
 800227a:	4640      	mov	r0, r8
 800227c:	f8cd a000 	str.w	sl, [sp]
 8002280:	aa03      	add	r2, sp, #12
 8002282:	f7ff fee1 	bl	8002048 <_printf_common>
 8002286:	3001      	adds	r0, #1
 8002288:	d14a      	bne.n	8002320 <_printf_i+0x1f4>
 800228a:	f04f 30ff 	mov.w	r0, #4294967295
 800228e:	b004      	add	sp, #16
 8002290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	2778      	movs	r7, #120	@ 0x78
 800229e:	4832      	ldr	r0, [pc, #200]	@ (8002368 <_printf_i+0x23c>)
 80022a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	6831      	ldr	r1, [r6, #0]
 80022a8:	061f      	lsls	r7, r3, #24
 80022aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80022ae:	d402      	bmi.n	80022b6 <_printf_i+0x18a>
 80022b0:	065f      	lsls	r7, r3, #25
 80022b2:	bf48      	it	mi
 80022b4:	b2ad      	uxthmi	r5, r5
 80022b6:	6031      	str	r1, [r6, #0]
 80022b8:	07d9      	lsls	r1, r3, #31
 80022ba:	bf44      	itt	mi
 80022bc:	f043 0320 	orrmi.w	r3, r3, #32
 80022c0:	6023      	strmi	r3, [r4, #0]
 80022c2:	b11d      	cbz	r5, 80022cc <_printf_i+0x1a0>
 80022c4:	2310      	movs	r3, #16
 80022c6:	e7ab      	b.n	8002220 <_printf_i+0xf4>
 80022c8:	4826      	ldr	r0, [pc, #152]	@ (8002364 <_printf_i+0x238>)
 80022ca:	e7e9      	b.n	80022a0 <_printf_i+0x174>
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f023 0320 	bic.w	r3, r3, #32
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	e7f6      	b.n	80022c4 <_printf_i+0x198>
 80022d6:	4616      	mov	r6, r2
 80022d8:	e7bd      	b.n	8002256 <_printf_i+0x12a>
 80022da:	6833      	ldr	r3, [r6, #0]
 80022dc:	6825      	ldr	r5, [r4, #0]
 80022de:	1d18      	adds	r0, r3, #4
 80022e0:	6961      	ldr	r1, [r4, #20]
 80022e2:	6030      	str	r0, [r6, #0]
 80022e4:	062e      	lsls	r6, r5, #24
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	d501      	bpl.n	80022ee <_printf_i+0x1c2>
 80022ea:	6019      	str	r1, [r3, #0]
 80022ec:	e002      	b.n	80022f4 <_printf_i+0x1c8>
 80022ee:	0668      	lsls	r0, r5, #25
 80022f0:	d5fb      	bpl.n	80022ea <_printf_i+0x1be>
 80022f2:	8019      	strh	r1, [r3, #0]
 80022f4:	2300      	movs	r3, #0
 80022f6:	4616      	mov	r6, r2
 80022f8:	6123      	str	r3, [r4, #16]
 80022fa:	e7bc      	b.n	8002276 <_printf_i+0x14a>
 80022fc:	6833      	ldr	r3, [r6, #0]
 80022fe:	2100      	movs	r1, #0
 8002300:	1d1a      	adds	r2, r3, #4
 8002302:	6032      	str	r2, [r6, #0]
 8002304:	681e      	ldr	r6, [r3, #0]
 8002306:	6862      	ldr	r2, [r4, #4]
 8002308:	4630      	mov	r0, r6
 800230a:	f000 f859 	bl	80023c0 <memchr>
 800230e:	b108      	cbz	r0, 8002314 <_printf_i+0x1e8>
 8002310:	1b80      	subs	r0, r0, r6
 8002312:	6060      	str	r0, [r4, #4]
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	6123      	str	r3, [r4, #16]
 8002318:	2300      	movs	r3, #0
 800231a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800231e:	e7aa      	b.n	8002276 <_printf_i+0x14a>
 8002320:	4632      	mov	r2, r6
 8002322:	4649      	mov	r1, r9
 8002324:	4640      	mov	r0, r8
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	47d0      	blx	sl
 800232a:	3001      	adds	r0, #1
 800232c:	d0ad      	beq.n	800228a <_printf_i+0x15e>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	079b      	lsls	r3, r3, #30
 8002332:	d413      	bmi.n	800235c <_printf_i+0x230>
 8002334:	68e0      	ldr	r0, [r4, #12]
 8002336:	9b03      	ldr	r3, [sp, #12]
 8002338:	4298      	cmp	r0, r3
 800233a:	bfb8      	it	lt
 800233c:	4618      	movlt	r0, r3
 800233e:	e7a6      	b.n	800228e <_printf_i+0x162>
 8002340:	2301      	movs	r3, #1
 8002342:	4632      	mov	r2, r6
 8002344:	4649      	mov	r1, r9
 8002346:	4640      	mov	r0, r8
 8002348:	47d0      	blx	sl
 800234a:	3001      	adds	r0, #1
 800234c:	d09d      	beq.n	800228a <_printf_i+0x15e>
 800234e:	3501      	adds	r5, #1
 8002350:	68e3      	ldr	r3, [r4, #12]
 8002352:	9903      	ldr	r1, [sp, #12]
 8002354:	1a5b      	subs	r3, r3, r1
 8002356:	42ab      	cmp	r3, r5
 8002358:	dcf2      	bgt.n	8002340 <_printf_i+0x214>
 800235a:	e7eb      	b.n	8002334 <_printf_i+0x208>
 800235c:	2500      	movs	r5, #0
 800235e:	f104 0619 	add.w	r6, r4, #25
 8002362:	e7f5      	b.n	8002350 <_printf_i+0x224>
 8002364:	08002557 	.word	0x08002557
 8002368:	08002568 	.word	0x08002568

0800236c <memmove>:
 800236c:	4288      	cmp	r0, r1
 800236e:	b510      	push	{r4, lr}
 8002370:	eb01 0402 	add.w	r4, r1, r2
 8002374:	d902      	bls.n	800237c <memmove+0x10>
 8002376:	4284      	cmp	r4, r0
 8002378:	4623      	mov	r3, r4
 800237a:	d807      	bhi.n	800238c <memmove+0x20>
 800237c:	1e43      	subs	r3, r0, #1
 800237e:	42a1      	cmp	r1, r4
 8002380:	d008      	beq.n	8002394 <memmove+0x28>
 8002382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800238a:	e7f8      	b.n	800237e <memmove+0x12>
 800238c:	4601      	mov	r1, r0
 800238e:	4402      	add	r2, r0
 8002390:	428a      	cmp	r2, r1
 8002392:	d100      	bne.n	8002396 <memmove+0x2a>
 8002394:	bd10      	pop	{r4, pc}
 8002396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800239a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800239e:	e7f7      	b.n	8002390 <memmove+0x24>

080023a0 <_sbrk_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	2300      	movs	r3, #0
 80023a4:	4d05      	ldr	r5, [pc, #20]	@ (80023bc <_sbrk_r+0x1c>)
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	602b      	str	r3, [r5, #0]
 80023ac:	f7fe f992 	bl	80006d4 <_sbrk>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_sbrk_r+0x1a>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_sbrk_r+0x1a>
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	20000604 	.word	0x20000604

080023c0 <memchr>:
 80023c0:	4603      	mov	r3, r0
 80023c2:	b510      	push	{r4, lr}
 80023c4:	b2c9      	uxtb	r1, r1
 80023c6:	4402      	add	r2, r0
 80023c8:	4293      	cmp	r3, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	d101      	bne.n	80023d2 <memchr+0x12>
 80023ce:	2000      	movs	r0, #0
 80023d0:	e003      	b.n	80023da <memchr+0x1a>
 80023d2:	7804      	ldrb	r4, [r0, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	428c      	cmp	r4, r1
 80023d8:	d1f6      	bne.n	80023c8 <memchr+0x8>
 80023da:	bd10      	pop	{r4, pc}

080023dc <memcpy>:
 80023dc:	440a      	add	r2, r1
 80023de:	4291      	cmp	r1, r2
 80023e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80023e4:	d100      	bne.n	80023e8 <memcpy+0xc>
 80023e6:	4770      	bx	lr
 80023e8:	b510      	push	{r4, lr}
 80023ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023ee:	4291      	cmp	r1, r2
 80023f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023f4:	d1f9      	bne.n	80023ea <memcpy+0xe>
 80023f6:	bd10      	pop	{r4, pc}

080023f8 <_realloc_r>:
 80023f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023fc:	4680      	mov	r8, r0
 80023fe:	4615      	mov	r5, r2
 8002400:	460c      	mov	r4, r1
 8002402:	b921      	cbnz	r1, 800240e <_realloc_r+0x16>
 8002404:	4611      	mov	r1, r2
 8002406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800240a:	f7ff bc39 	b.w	8001c80 <_malloc_r>
 800240e:	b92a      	cbnz	r2, 800241c <_realloc_r+0x24>
 8002410:	f7ff fbcc 	bl	8001bac <_free_r>
 8002414:	2400      	movs	r4, #0
 8002416:	4620      	mov	r0, r4
 8002418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800241c:	f000 f81a 	bl	8002454 <_malloc_usable_size_r>
 8002420:	4285      	cmp	r5, r0
 8002422:	4606      	mov	r6, r0
 8002424:	d802      	bhi.n	800242c <_realloc_r+0x34>
 8002426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800242a:	d8f4      	bhi.n	8002416 <_realloc_r+0x1e>
 800242c:	4629      	mov	r1, r5
 800242e:	4640      	mov	r0, r8
 8002430:	f7ff fc26 	bl	8001c80 <_malloc_r>
 8002434:	4607      	mov	r7, r0
 8002436:	2800      	cmp	r0, #0
 8002438:	d0ec      	beq.n	8002414 <_realloc_r+0x1c>
 800243a:	42b5      	cmp	r5, r6
 800243c:	462a      	mov	r2, r5
 800243e:	4621      	mov	r1, r4
 8002440:	bf28      	it	cs
 8002442:	4632      	movcs	r2, r6
 8002444:	f7ff ffca 	bl	80023dc <memcpy>
 8002448:	4621      	mov	r1, r4
 800244a:	4640      	mov	r0, r8
 800244c:	f7ff fbae 	bl	8001bac <_free_r>
 8002450:	463c      	mov	r4, r7
 8002452:	e7e0      	b.n	8002416 <_realloc_r+0x1e>

08002454 <_malloc_usable_size_r>:
 8002454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002458:	1f18      	subs	r0, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfbc      	itt	lt
 800245e:	580b      	ldrlt	r3, [r1, r0]
 8002460:	18c0      	addlt	r0, r0, r3
 8002462:	4770      	bx	lr

08002464 <_init>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr

08002470 <_fini>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	bf00      	nop
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr
